% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eval_design_survival_mc.R
\name{eval_design_survival_mc}
\alias{eval_design_survival_mc}
\title{Evaluate Power for Survival Design}
\usage{
eval_design_survival_mc(RunMatrix, model, alpha, nsim, distribution,
  rfunctionsurv, anticoef, delta = 2, conservative = FALSE,
  parallel = FALSE, ...)
}
\arguments{
\item{RunMatrix}{The run matrix of the design.}

\item{model}{The model used in the evaluation.}

\item{alpha}{The type-I error.}

\item{nsim}{The number of simulations.}

\item{distribution}{Distribution of survival function}

\item{rfunctionsurv}{Random number generator function. Should be a function of the form f(X,b), where X is the
model matrix and b are the anticipated coefficients. This function should return a Surv object from
the survival package.}

\item{anticoef}{The anticipated coefficients for calculating the power. If missing, coefficients
will be automatically generated based on the delta argument.}

\item{delta}{The signal-to-noise ratio. Default 2. This specifies the difference between the high
and low levels. If you do not specify anticoef, the anticipated coefficients will be half of delta}

\item{conservative}{Default FALSE. Specifies whether default method for generating
anticipated coefficents should be conservative or not. TRUE will give the most conservative
estimate of power by setting all but one level in a categorical factor's anticipated coefficients
to zero.}

\item{parallel}{Default FALSE. If TRUE, uses all cores available to speed up computation of power.}

\item{...}{Any additional arguments to be input into the survreg function during fitting.}
}
\value{
A data frame consisting of the parameters and their powers
}
\description{
Evaluates power for a right censored survival design with a Monte Carlo simulation,
using the survival package and survreg to fit the data.
}
\examples{
#These examples focus on the survival analysis case and assume familiarity
#with the basic functionality of eval_design_mc.

#We first generate simple 2-level design using expand.grid:
basicdesign = expand.grid(a=c(-1,1))
design = gen_design(factorial=basicdesign,model=~a,trials=100,
                         optimality="D",repeats=100)

#We want to evaluate this design with a Monte Carlo approach, taking into account
#that some of the points will be censored. In this case, we need
#to create a function that generates random numbers based on our run matrix X and
#our anticipated coefficients (b), censors the results from those numbers based
#on the censoring criteria, and then returns a Surv object from the survival package.
#For an exponential distribution, the censored response is generated according to the
#following formula:

rsurvival = function(X,b) {
 Y = rexp(n=nrow(X),rate=exp(-(X \%*\% b)))
 censored = Y > 1
 Y[censored] = 1
 return(Surv(time=Y,event=!censored,type="right"))
}

#We can then evaluate the power of the design in the same way as eval_design_mc:

eval_design_survival_mc(RunMatrix=design,model=~a,alpha=0.05,nsim=1000,
                       distribution="exponential",rfunctionsurv=rsurvival, delta=1)

#We can also evaluate different censored distributions by specifying a different
#random generating function and changing the distribution argument. You can also
#specify any additional arguments at the end of the function call and they will be
#input into the survreg function when it evaluates.

rlognorm = function(X,b) {
 Y = rlnorm(n=nrow(X), meanlog = X \%*\% b, sdlog = 0.4)
 censored = Y > 1.2
 Y[censored] = 1.2
 return(Surv(time=Y,event=!censored,type="right"))
}

#The argument "scale" was not specified in eval_design_survival_mc, but it was passed into
#the survreg function call.

eval_design_survival_mc(RunMatrix=design,model=~a,alpha=0.2,nsim=1000,
                       distribution="lognormal",rfunctionsurv=rlognorm,
                       anticoef=c(0.184,0.101),delta=2,scale=0.4)
}

