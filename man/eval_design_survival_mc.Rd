% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eval_design_survival_mc.R
\name{eval_design_survival_mc}
\alias{eval_design_survival_mc}
\title{Evaluates Power for Survival Design}
\usage{
eval_design_survival_mc(RunMatrix, model, alpha, nsim, distribution, rfunction,
  censor, cutoff, anticoef, delta = 2, conservative = FALSE,
  parallel = FALSE, ...)
}
\arguments{
\item{RunMatrix}{The run matrix of the design.}

\item{model}{The model used in the evaluation.}

\item{alpha}{The type-I error.}

\item{nsim}{The number of simulations.}

\item{distribution}{Distribution of survival function}

\item{rfunction}{Random number generator function. Should be a function of the form f(X,b), where X is the
model matrix and b are the anticipated coefficients.}

\item{censor}{Function of the form f(Y,cutoff), where Y is the random vector generated by rfunction and
cutoff is the value at which the elements of the vector are censored.}

\item{anticoef}{The anticipated coefficients for calculating the power. If missing, coefficients will be
automatically generated.}

\item{delta}{The signal-to-noise ratio. Default 2. This specifies the difference between the high and low levels.
Anticipated coefficients will be half of this number.}

\item{conservative}{Default FALSE. Specifies whether default method for generating
anticipated coefficents should be conservative or not. TRUE will give the most conservative
estimate of power by setting all but one level in a categorical factor's anticipated coefficients
to zero.}

\item{parallel}{Default FALSE. If TRUE, uses all cores available to speed up computation of power.}

\item{...}{Any additional arguments to be input into the survreg function during fitting.}
}
\value{
A data frame consisting of the parameters and their powers
}
\description{
Evaluates power for a right censored survival design with a Monte Carlo simulation,
using the survival package and survreg to fit the data.
}
\examples{
#These examples focus on the survival analysis case and assume familiarity
#with the basic functionality of eval_design_mc.

#We first generate simple 2-level design using expand.grid:
basicdesign = expand.grid(a=c(-1,1))
designcoffee = gen_design(basicdesign,~a,100,"D",100)

#We want to evaluate this design with a Monte Carlo approach, taking into account
#that some of the points will be censored. In this case, we need
#to create a function that generates random numbers based on our run matrix X and
#our anticipated coefficients (b), as well as a function that determines whether
#the point should be censored or not. For an exponential distribution, the random
#numbers are generated according to the following formula:

rsurvival = function(X,b) {return(rexp(n=nrow(X),rate=exp(-(X \%*\% b))))}

#We also need to provide a function that determines whether points generated
#by the random generating function should be censored. This function needs to be of
#the form f(y,c), where y is the vector of numbers generated by the random generating
#function, and c is the cutoff point that determines if the value is censored or not.

rcensor = function(y,c) {return(y > c)}

#We can then evaluate the power of the design as follows (also providing the cutoff
#value in addition to the two functions above):

eval_design_survival_mc(designcoffee,~a,0.05,1000,"exponential",rsurvival,rcensor,

#We can also evaluate different censored distributions by specifying a different
#random generating function and changing the distribution argument. You can also
#input any additional arguments at the end of the function call and they will be
#fed into the survreg function.

rlognorm = function(X,b) {return(rlnorm(n=nrow(X), meanlog = X \%*\% b, sdlog = 0.4))}

eval_design_survival_mc(designcoffee,~a,0.2,1000,"lognormal",rlognorm,rcensor,cutoff=1.2,
                       anticoef=c(0.184,0.101),delta=2,scale=0.4)

#The argument scale was not specified in eval_design_survival_mc, but it was passed into
#the survreg function call.
}

