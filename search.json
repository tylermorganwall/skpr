[{"path":"https://tylermorganwall.github.io/skpr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tyler Morgan-Wall. Author, maintainer. George Khoury. Author.","code":""},{"path":"https://tylermorganwall.github.io/skpr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morgan-Wall T, Khoury G (2021). “Optimal Design Generation Power Evaluation R: skpr Package.” Journal Statistical Software, 99(1), 1–36. doi:10.18637/jss.v099.i01.","code":"@Article{,   title = {Optimal Design Generation and Power Evaluation in {R}: The {skpr} Package},   author = {Tyler Morgan-Wall and George Khoury},   journal = {Journal of Statistical Software},   year = {2021},   volume = {99},   number = {1},   pages = {1--36},   doi = {10.18637/jss.v099.i01}, }"},{"path":[]},{"path":"https://tylermorganwall.github.io/skpr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Design of Experiments Suite: Generate and Evaluate Optimal Designs","text":"skpr open source design experiments suite generating evaluating optimal designs R. sampling skpr offers: Generates evaluates D, , , Alias, E, T, G optimal designs, well user-defined custom optimality criteria. Supports generation evaluation split/split-split/…/N-split plot designs. Includes parametric Monte Carlo power evaluation functions, supports calculating power censored responses. Provides extensible framework user evaluate Monte Carlo power using libraries. Includes Shiny graphical user interface, skprGUI, auto-generates R code used create evaluate design improve ease--use enhance reproducibility.","code":""},{"path":"https://tylermorganwall.github.io/skpr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Design of Experiments Suite: Generate and Evaluate Optimal Designs","text":"","code":"# To install: install.packages(\"skpr\")  # To install the latest version from Github: # install.packages(\"devtools\") devtools::install_github(\"tylermorganwall/skpr\")"},{"path":"https://tylermorganwall.github.io/skpr/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Design of Experiments Suite: Generate and Evaluate Optimal Designs","text":"gen_design() generates optimal designs candidate set, given model desired number runs. eval_design() evaluates power parametrically linear models, normal split-plot designs. eval_design_mc() evaluates power Monte Carlo simulation, linear generalized linear models. function also supports calculating power split-plot designs using REML. eval_design_survival_mc() evaluates power Monte Carlo simulation, allowing user specify point data censored. eval_design_custom_mc() allows user import libraries use Monte Carlo framework provided skpr calculate power. skprGUI() skprGUIbrowser() opens GUI either R Studio external browser. addition, package offers two functions generate common plots related designs: plot_correlations() generates color map correlations variables. plot_fds() generates fraction design space plot given design. ##skprGUI skprGUI provides graphical user interface access main features skpr. interactive tutorial provided familiarize user available functionality. Type skprGUI() skprGUIbrowser() begin. Screenshots:","code":""},{"path":"https://tylermorganwall.github.io/skpr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Design of Experiments Suite: Generate and Evaluate Optimal Designs","text":"","code":"library(skpr)  #Generate a candidate set of all potential design points to be considered in the experiment #The hypothetical experiment is determining what affects the caffeine content in coffee candidate_set = expand.grid(temp = c(80,90,100),                              type = c(\"Kona\",\"Java\"),                             beansize = c(\"Large\",\"Medium\",\"Small\")) candidate_set #>    temp type beansize #> 1    80 Kona    Large #> 2    90 Kona    Large #> 3   100 Kona    Large #> 4    80 Java    Large #> 5    90 Java    Large #> 6   100 Java    Large #> 7    80 Kona   Medium #> 8    90 Kona   Medium #> 9   100 Kona   Medium #> 10   80 Java   Medium #> 11   90 Java   Medium #> 12  100 Java   Medium #> 13   80 Kona    Small #> 14   90 Kona    Small #> 15  100 Kona    Small #> 16   80 Java    Small #> 17   90 Java    Small #> 18  100 Java    Small  #Generate the design (default D-optimal) design = gen_design(candidateset = candidate_set,                      model = ~temp + type + beansize,                     trials=12) design #>    temp type beansize #> 1    80 Java   Medium #> 2   100 Java    Large #> 3   100 Java    Small #> 4    80 Java    Large #> 5    80 Kona   Medium #> 6    80 Kona    Small #> 7   100 Kona    Small #> 8   100 Kona   Medium #> 9    80 Kona    Large #> 10  100 Java   Medium #> 11  100 Kona    Large #> 12   80 Java    Small  #Evaluate power for the design with an allowable type-I error of 5% (default) eval_design(design) #>     parameter            type     power #> 1 (Intercept)    effect.power 0.8424665 #> 2        temp    effect.power 0.8424665 #> 3        type    effect.power 0.8424665 #> 4    beansize    effect.power 0.5165386 #> 5 (Intercept) parameter.power 0.8424665 #> 6        temp parameter.power 0.8424665 #> 7       type1 parameter.power 0.8424665 #> 8   beansize1 parameter.power 0.5593966 #> 9   beansize2 parameter.power 0.5593966 #> ============Evaluation Info============ #> [1m• Alpha = [0m0.05 [1m• Trials = [0m12 [1m• Blocked = [0mFALSE #> [1m• Evaluating Model = [0m~temp + type + beansize #> [1m• Anticipated Coefficients = [0mc(1, 1, 1, 1, -1)  #Evaluate power for the design using a Monte Carlo simulation.  #Here, we set the effect size (here, the signal-to-noise ratio) to 1.5. eval_design_mc(design, effectsize=1.5) #>     parameter               type power #> 1 (Intercept)    effect.power.mc 0.600 #> 2        temp    effect.power.mc 0.612 #> 3        type    effect.power.mc 0.610 #> 4    beansize    effect.power.mc 0.316 #> 5 (Intercept) parameter.power.mc 0.600 #> 6        temp parameter.power.mc 0.612 #> 7       type1 parameter.power.mc 0.610 #> 8   beansize1 parameter.power.mc 0.359 #> 9   beansize2 parameter.power.mc 0.354 #> ===========Evaluation Info============ #> [1m• Alpha = [0m0.05 [1m• Trials = [0m12 [1m• Blocked = [0mFALSE #> [1m• Evaluating Model = [0m~temp + type + beansize #> [1m• Anticipated Coefficients = [0mc(0.750, 0.750, 0.750, 0.750, -0.750)  #Evaluate power for the design using a Monte Carlo simulation, for a non-normal response.  #Here, we also increase the number of simululations to improve the precision of the results. eval_design_mc(design, nsim=5000, glmfamily = \"poisson\", effectsize=c(2,6)) #>     parameter               type  power #> 1 (Intercept)    effect.power.mc 0.9968 #> 2        temp    effect.power.mc 0.9826 #> 3        type    effect.power.mc 0.9832 #> 4    beansize    effect.power.mc 0.8502 #> 5 (Intercept) parameter.power.mc 0.9968 #> 6        temp parameter.power.mc 0.9826 #> 7       type1 parameter.power.mc 0.9832 #> 8   beansize1 parameter.power.mc 0.8842 #> 9   beansize2 parameter.power.mc 0.7052 #> ============Evaluation Info============ #> [1m• Alpha = [0m0.05 [1m• Trials = [0m12 [1m• Blocked = [0mFALSE #> [1m• Evaluating Model = [0m~temp + type + beansize #> [1m• Anticipated Coefficients = [0mc(1.242, 0.549, 0.549, 0.549, -0.549)  #skpr was designed to operate with the pipe (%>%) in mind.  #Here is an example of an entire design of experiments analysis in three lines:  expand.grid(temp = c(80,90,100), type = c(\"Kona\",\"Java\"), beansize = c(\"Large\",\"Medium\",\"Small\")) %>%   gen_design(model = ~temp + type + beansize + beansize:type + I(temp^2), trials=24, optimality=\"I\") %>%   eval_design_mc() #>          parameter               type power #> 1      (Intercept)    effect.power.mc 0.912 #> 2             temp    effect.power.mc 0.927 #> 3             type    effect.power.mc 0.997 #> 4         beansize    effect.power.mc 0.935 #> 5        I(temp^2)    effect.power.mc 0.637 #> 6    type:beansize    effect.power.mc 0.913 #> 7      (Intercept) parameter.power.mc 0.912 #> 8             temp parameter.power.mc 0.927 #> 9            type1 parameter.power.mc 0.997 #> 10       beansize1 parameter.power.mc 0.917 #> 11       beansize2 parameter.power.mc 0.913 #> 12       I(temp^2) parameter.power.mc 0.637 #> 13 type1:beansize1 parameter.power.mc 0.899 #> 14 type1:beansize2 parameter.power.mc 0.902 #> ==============Evaluation Info============== #> [1m• Alpha = [0m0.05 [1m• Trials = [0m24 [1m• Blocked = [0mFALSE #> [1m• Evaluating Model = [0m~temp + type + beansize + type:beansize + I(temp^2) #> [1m• Anticipated Coefficients = [0mc(1, 1, 1, 1, -1, 1, 1, -1)"},{"path":"https://tylermorganwall.github.io/skpr/reference/aliasmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias terms — aliasmodel","title":"Alias terms — aliasmodel","text":"Creates alias terms Alias-optimal designs","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/aliasmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias terms — aliasmodel","text":"","code":"aliasmodel(formula, power)"},{"path":"https://tylermorganwall.github.io/skpr/reference/aliasmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias terms — aliasmodel","text":"formula formula expanded","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/aliasmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alias terms — aliasmodel","text":"Returns aliased model terms formula","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/anticoef_from_delta.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates Anticipated Coefficients from delta — anticoef_from_delta","title":"Generates Anticipated Coefficients from delta — anticoef_from_delta","text":"Generates Anticipated Coefficients delta parameter logic generating anticipated coefficients delta varies glm family.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/anticoef_from_delta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates Anticipated Coefficients from delta — anticoef_from_delta","text":"","code":"anticoef_from_delta(default_coef, delta, glmfamily)"},{"path":"https://tylermorganwall.github.io/skpr/reference/anticoef_from_delta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates Anticipated Coefficients from delta — anticoef_from_delta","text":"default_coef vector default coefficients, gen_anticoef delta user-input delta parameter, must numeric vector length 1 2 glmfamily user-supplied glmfamily, either string glmfamily object","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/anticoef_from_delta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates Anticipated Coefficients from delta — anticoef_from_delta","text":"Anticipated coefficients.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/anticoef_from_delta_surv.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates Anticipated Coefficients from delta for eval_design_suvival_mc — anticoef_from_delta_surv","title":"Generates Anticipated Coefficients from delta for eval_design_suvival_mc — anticoef_from_delta_surv","text":"Generates Anticipated Coefficients delta parameter logic generating anticipated coefficients delta varies glm family.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/anticoef_from_delta_surv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates Anticipated Coefficients from delta for eval_design_suvival_mc — anticoef_from_delta_surv","text":"","code":"anticoef_from_delta_surv(default_coef, delta, distribution)"},{"path":"https://tylermorganwall.github.io/skpr/reference/anticoef_from_delta_surv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates Anticipated Coefficients from delta for eval_design_suvival_mc — anticoef_from_delta_surv","text":"default_coef vector default coefficients, gen_anticoef delta user-input delta parameter, must numeric vector length 1 2 distribution user-supplied distribution, either string survreg distribution object","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/anticoef_from_delta_surv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates Anticipated Coefficients from delta for eval_design_suvival_mc — anticoef_from_delta_surv","text":"Anticipated coefficients.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/blockingstructure.html","id":null,"dir":"Reference","previous_headings":"","what":"Find block sizes in column — blockingstructure","title":"Find block sizes in column — blockingstructure","text":"Returns blocks","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/blockingstructure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find block sizes in column — blockingstructure","text":"","code":"blockingstructure(blocklist)"},{"path":"https://tylermorganwall.github.io/skpr/reference/blockingstructure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find block sizes in column — blockingstructure","text":"blocklist Block list","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/blockingstructure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find block sizes in column — blockingstructure","text":"Returns blocking structure given vector block ids","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calc_conservative_anticoef.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Conservative Anticipated Coefficients — calc_conservative_anticoef","title":"Calculate Conservative Anticipated Coefficients — calc_conservative_anticoef","text":"Calculate Conservative Anticipated Coefficients","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calc_conservative_anticoef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Conservative Anticipated Coefficients — calc_conservative_anticoef","text":"","code":"calc_conservative_anticoef(results, effectsize)"},{"path":"https://tylermorganwall.github.io/skpr/reference/calc_conservative_anticoef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Conservative Anticipated Coefficients — calc_conservative_anticoef","text":"results power results matrix effectsize effectsize.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calc_conservative_anticoef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Conservative Anticipated Coefficients — calc_conservative_anticoef","text":"Vector conservative anticipated coefficients","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calc_interaction_degrees.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Interaction Degrees of Freedom — calc_interaction_degrees","title":"Calculate Interaction Degrees of Freedom — calc_interaction_degrees","text":"Calculate interaction degrees freedom split-plot designs","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calc_interaction_degrees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Interaction Degrees of Freedom — calc_interaction_degrees","text":"","code":"calc_interaction_degrees(   design,   model,   contrast,   nointercept,   split_layers,   split_degrees,   split_plot_structure )"},{"path":"https://tylermorganwall.github.io/skpr/reference/calc_interaction_degrees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Interaction Degrees of Freedom — calc_interaction_degrees","text":"design design matrix model model contrast contrast split_layers layer split plots main effect term split_degrees number degrees freedom main effect term","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calc_interaction_degrees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Interaction Degrees of Freedom — calc_interaction_degrees","text":"Degrees freedom vector","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calcblocksizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate block sizes — calcblocksizes","title":"Calculate block sizes — calcblocksizes","text":"Calculate block size vector","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calcblocksizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate block sizes — calcblocksizes","text":"","code":"calcblocksizes(trials, blocksize)"},{"path":"https://tylermorganwall.github.io/skpr/reference/calcblocksizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate block sizes — calcblocksizes","text":"trials Number trials design blocksize desired size block","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calcblocksizes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate block sizes — calcblocksizes","text":"blocksize vector","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calcnoncentralparam.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Non-Centrality Parameter — calcnoncentralparam","title":"Calculate Non-Centrality Parameter — calcnoncentralparam","text":"Calculates non-centrality parameter model matrix","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calcnoncentralparam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Non-Centrality Parameter — calcnoncentralparam","text":"","code":"calcnoncentralparam(X, L, b, vinv = NULL)"},{"path":"https://tylermorganwall.github.io/skpr/reference/calcnoncentralparam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Non-Centrality Parameter — calcnoncentralparam","text":"X model matrix L parameter matrix/vector b anticipated coefficients vinv variance-covariance matrix","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calcnoncentralparam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Non-Centrality Parameter — calcnoncentralparam","text":"non-centrality parameter F test","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_degrees_of_freedom.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Degrees of Freedom — calculate_degrees_of_freedom","title":"Calculate Degrees of Freedom — calculate_degrees_of_freedom","text":"Calculates degrees freedom adjustment models random effects Penheiro Bates, pg. 91","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_degrees_of_freedom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Degrees of Freedom — calculate_degrees_of_freedom","text":"","code":"calculate_degrees_of_freedom(   run_matrix_processed,   nointercept,   model,   contrasts )"},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_degrees_of_freedom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Degrees of Freedom — calculate_degrees_of_freedom","text":"run_matrix_processed design nointercept Whether intercept term present","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_degrees_of_freedom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Degrees of Freedom — calculate_degrees_of_freedom","text":"Vector numbers indicating split plot layers","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_gefficiency.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate G Efficiency — calculate_gefficiency","title":"Calculate G Efficiency — calculate_gefficiency","text":"Either calculates G-Efficiency Monte Carlo sampling design space (ignoring constraints), searching maximum point (slower higher quality), using user-specified candidate set design space (fastest).","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_gefficiency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate G Efficiency — calculate_gefficiency","text":"","code":"calculate_gefficiency(   design,   calculation_type = \"random\",   randsearches = 1000,   design_space_mm = NULL )"},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_gefficiency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate G Efficiency — calculate_gefficiency","text":"Normalized run matrix","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_level_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate level vector — calculate_level_vector","title":"Calculate level vector — calculate_level_vector","text":"Calculate level vector","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_level_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate level vector — calculate_level_vector","text":"","code":"calculate_level_vector(design, model, nointercept)"},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_level_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate level vector — calculate_level_vector","text":"design Design analyzed. model model. nointercept Whether intercept included.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_level_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate level vector — calculate_level_vector","text":"vector levels.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_level_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate level vector — calculate_level_vector","text":"","code":"#We can pass either the output of gen_design or eval_design to plot_correlations"},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_power_curves.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Power Curves — calculate_power_curves","title":"Calculate Power Curves — calculate_power_curves","text":"Calculate optionally plot power curves different effect sizes trial counts. function takes ","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_power_curves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Power Curves — calculate_power_curves","text":"","code":"calculate_power_curves(   trials,   effectsize = 1,   candidateset = NULL,   model = NULL,   alpha = 0.05,   gen_args = list(),   eval_function = \"eval_design\",   eval_args = list(),   random_seed = 123,   iterate_seed = FALSE,   plot_results = TRUE,   auto_scale = TRUE,   x_breaks = NULL,   y_breaks = seq(0, 1, by = 0.1),   ggplot_elements = list() )"},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_power_curves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Power Curves — calculate_power_curves","text":"trials numeric vector indicating trial(s) used computing power curve. single value, fixed `effectsize` varied. effectsize Default `1`. numeric vector indicating effect size(s) used computing power curve. single value, fixed `trials` varied. using length-2 effect size `eval_design_mc()` (binomial probability interval), effect size pairs can input entries list. candidateset Default `NULL`. candidate set (see `gen_design()` documentation information). Provided aid code completion: can also provided `gen_args`. model Default `NULL`. model (see `gen_design()` `eval_design()` documentation information). Provided aid code completion: can also provided `gen_args`/`eval_args`. alpha Default `0.05`. allowable Type-error rate (see `eval_design()` documentation information). Provided aid code completion: can also provided `eval_args`. gen_args Default `list()`. list argument/value pairs specify design generation parameters `gen_design()`. eval_function Default `\"eval_design\"`. string (function) specifying skpr power evaluation function. Can also `\"eval_design_mc\"`, `\"eval_design_survival_mc\"`, `\"eval_design_custom_mc\"`. eval_args Default `list()`. list argument/value pairs specify design power evaluation parameters `eval_function`. random_seed Default `123`. random seed used generate evaluate design. seed set right design generation. iterate_seed Default `FALSE`. iterate random seed new design. Set `TRUE` add variability design generation process. plot_results Default `TRUE`. Whether print plot power curves addition data frame results. Requires `ggplot2`. auto_scale Default `TRUE`. Whether automatically scale y-axis 0 1. x_breaks Default `NULL`, automaticly generated ggplot2. y_breaks Default `seq(0,1,=0.1)`. Y-axis breaks. ggplot_elements Default `list()`. Extra `ggplot2` elements customize plot, passed elements list.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_power_curves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Power Curves — calculate_power_curves","text":"data.frame power values design generation information.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_power_curves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Power Curves — calculate_power_curves","text":"","code":"if(skpr:::run_documentation()) { cand_set = expand.grid(brew_temp = c(80, 85, 90),                       altitude = c(0, 2000, 4000),                       bean_sun = c(\"low\", \"partial\", \"high\")) #Plot power for a linear model with all interactions calculate_power_curves(trials=seq(10,60,by=1),                       candidateset = cand_set,                       model = ~.*.,                       alpha = 0.05,                       effectsize = 1,                       eval_function = \"eval_design\") }  #>               parameter            type      power trials effectsize #> 18          (Intercept)    effect.power 0.09280916     11          1 #> 19            brew_temp    effect.power 0.09280916     11          1 #> 20             altitude    effect.power 0.09280916     11          1 #> 21             bean_sun    effect.power 0.06447520     11          1 #> 22   brew_temp:altitude    effect.power 0.09280916     11          1 #> 23   brew_temp:bean_sun    effect.power 0.06447520     11          1 #> 24    altitude:bean_sun    effect.power 0.06447520     11          1 #> 25          (Intercept) parameter.power 0.09280916     11          1 #> 26            brew_temp parameter.power 0.09280916     11          1 #> 27             altitude parameter.power 0.09280916     11          1 #> 28            bean_sun1 parameter.power 0.06757424     11          1 #> 29            bean_sun2 parameter.power 0.07717846     11          1 #> 30   brew_temp:altitude parameter.power 0.09280916     11          1 #> 31  brew_temp:bean_sun1 parameter.power 0.06757424     11          1 #> 32  brew_temp:bean_sun2 parameter.power 0.07717846     11          1 #> 33   altitude:bean_sun1 parameter.power 0.06757424     11          1 #> 34   altitude:bean_sun2 parameter.power 0.07717846     11          1 #> 35          (Intercept)    effect.power 0.17925539     12          1 #> 36            brew_temp    effect.power 0.17925539     12          1 #> 37             altitude    effect.power 0.17925539     12          1 #> 38             bean_sun    effect.power 0.09633205     12          1 #> 39   brew_temp:altitude    effect.power 0.17925539     12          1 #> 40   brew_temp:bean_sun    effect.power 0.09633205     12          1 #> 41    altitude:bean_sun    effect.power 0.09633205     12          1 #> 42          (Intercept) parameter.power 0.17925539     12          1 #> 43            brew_temp parameter.power 0.17925539     12          1 #> 44             altitude parameter.power 0.17925539     12          1 #> 45            bean_sun1 parameter.power 0.11698959     12          1 #> 46            bean_sun2 parameter.power 0.11698959     12          1 #> 47   brew_temp:altitude parameter.power 0.17925539     12          1 #> 48  brew_temp:bean_sun1 parameter.power 0.11698959     12          1 #> 49  brew_temp:bean_sun2 parameter.power 0.11698959     12          1 #> 50   altitude:bean_sun1 parameter.power 0.11698959     12          1 #> 51   altitude:bean_sun2 parameter.power 0.11698959     12          1 #> 52          (Intercept)    effect.power 0.23980153     13          1 #> 53            brew_temp    effect.power 0.23980153     13          1 #> 54             altitude    effect.power 0.23980153     13          1 #> 55             bean_sun    effect.power 0.11673369     13          1 #> 56   brew_temp:altitude    effect.power 0.23980153     13          1 #> 57   brew_temp:bean_sun    effect.power 0.11673369     13          1 #> 58    altitude:bean_sun    effect.power 0.11673369     13          1 #> 59          (Intercept) parameter.power 0.23980153     13          1 #> 60            brew_temp parameter.power 0.23980153     13          1 #> 61             altitude parameter.power 0.23980153     13          1 #> 62            bean_sun1 parameter.power 0.14393244     13          1 #> 63            bean_sun2 parameter.power 0.14393244     13          1 #> 64   brew_temp:altitude parameter.power 0.23980153     13          1 #> 65  brew_temp:bean_sun1 parameter.power 0.14393244     13          1 #> 66  brew_temp:bean_sun2 parameter.power 0.14393244     13          1 #> 67   altitude:bean_sun1 parameter.power 0.14393244     13          1 #> 68   altitude:bean_sun2 parameter.power 0.14393244     13          1 #> 69          (Intercept)    effect.power 0.28907638     14          1 #> 70            brew_temp    effect.power 0.28698042     14          1 #> 71             altitude    effect.power 0.28907638     14          1 #> 72             bean_sun    effect.power 0.13904907     14          1 #> 73   brew_temp:altitude    effect.power 0.28698042     14          1 #> 74   brew_temp:bean_sun    effect.power 0.13911462     14          1 #> 75    altitude:bean_sun    effect.power 0.13904907     14          1 #> 76          (Intercept) parameter.power 0.28907638     14          1 #> 77            brew_temp parameter.power 0.28698042     14          1 #> 78             altitude parameter.power 0.28907638     14          1 #> 79            bean_sun1 parameter.power 0.16426949     14          1 #> 80            bean_sun2 parameter.power 0.17229035     14          1 #> 81   brew_temp:altitude parameter.power 0.28698042     14          1 #> 82  brew_temp:bean_sun1 parameter.power 0.16377155     14          1 #> 83  brew_temp:bean_sun2 parameter.power 0.17344445     14          1 #> 84   altitude:bean_sun1 parameter.power 0.16426949     14          1 #> 85   altitude:bean_sun2 parameter.power 0.17229035     14          1 #> 86          (Intercept)    effect.power 0.32970877     15          1 #> 87            brew_temp    effect.power 0.32970877     15          1 #> 88             altitude    effect.power 0.32970877     15          1 #> 89             bean_sun    effect.power 0.15997755     15          1 #> 90   brew_temp:altitude    effect.power 0.32483734     15          1 #> 91   brew_temp:bean_sun    effect.power 0.16158936     15          1 #> 92    altitude:bean_sun    effect.power 0.15997755     15          1 #> 93          (Intercept) parameter.power 0.32970877     15          1 #> 94            brew_temp parameter.power 0.32970877     15          1 #> 95             altitude parameter.power 0.32970877     15          1 #> 96            bean_sun1 parameter.power 0.19043010     15          1 #> 97            bean_sun2 parameter.power 0.18849519     15          1 #> 98   brew_temp:altitude parameter.power 0.32483734     15          1 #> 99  brew_temp:bean_sun1 parameter.power 0.19043010     15          1 #> 100 brew_temp:bean_sun2 parameter.power 0.19043010     15          1 #> 101  altitude:bean_sun1 parameter.power 0.18849519     15          1 #> 102  altitude:bean_sun2 parameter.power 0.19043010     15          1 #> 103         (Intercept)    effect.power 0.36313816     16          1 #> 104           brew_temp    effect.power 0.36313816     16          1 #> 105            altitude    effect.power 0.36044528     16          1 #> 106            bean_sun    effect.power 0.17129841     16          1 #> 107  brew_temp:altitude    effect.power 0.36044528     16          1 #> 108  brew_temp:bean_sun    effect.power 0.17129841     16          1 #> 109   altitude:bean_sun    effect.power 0.17300427     16          1 #> 110         (Intercept) parameter.power 0.36313816     16          1 #> 111           brew_temp parameter.power 0.36313816     16          1 #> 112            altitude parameter.power 0.36044528     16          1 #> 113           bean_sun1 parameter.power 0.20302702     16          1 #> 114           bean_sun2 parameter.power 0.20302702     16          1 #> 115  brew_temp:altitude parameter.power 0.36044528     16          1 #> 116 brew_temp:bean_sun1 parameter.power 0.20302702     16          1 #> 117 brew_temp:bean_sun2 parameter.power 0.20302702     16          1 #> 118  altitude:bean_sun1 parameter.power 0.20689979     16          1 #> 119  altitude:bean_sun2 parameter.power 0.20689979     16          1 #> 120         (Intercept)    effect.power 0.39216753     17          1 #> 121           brew_temp    effect.power 0.39615524     17          1 #> 122            altitude    effect.power 0.40319351     17          1 #> 123            bean_sun    effect.power 0.19133726     17          1 #> 124  brew_temp:altitude    effect.power 0.39216753     17          1 #> 125  brew_temp:bean_sun    effect.power 0.19124473     17          1 #> 126   altitude:bean_sun    effect.power 0.19447109     17          1 #> 127         (Intercept) parameter.power 0.39216753     17          1 #> 128           brew_temp parameter.power 0.39615524     17          1 #> 129            altitude parameter.power 0.40319351     17          1 #> 130           bean_sun1 parameter.power 0.21535581     17          1 #> 131           bean_sun2 parameter.power 0.22759644     17          1 #> 132  brew_temp:altitude parameter.power 0.39216753     17          1 #> 133 brew_temp:bean_sun1 parameter.power 0.21895474     17          1 #> 134 brew_temp:bean_sun2 parameter.power 0.22873737     17          1 #> 135  altitude:bean_sun1 parameter.power 0.21549690     17          1 #> 136  altitude:bean_sun2 parameter.power 0.23431344     17          1 #> 137         (Intercept)    effect.power 0.42105194     18          1 #> 138           brew_temp    effect.power 0.42963908     18          1 #> 139            altitude    effect.power 0.42963908     18          1 #> 140            bean_sun    effect.power 0.21106798     18          1 #> 141  brew_temp:altitude    effect.power 0.42105194     18          1 #> 142  brew_temp:bean_sun    effect.power 0.21811522     18          1 #> 143   altitude:bean_sun    effect.power 0.21782628     18          1 #> 144         (Intercept) parameter.power 0.42105194     18          1 #> 145           brew_temp parameter.power 0.42963908     18          1 #> 146            altitude parameter.power 0.42963908     18          1 #> 147           bean_sun1 parameter.power 0.23900042     18          1 #> 148           bean_sun2 parameter.power 0.23900042     18          1 #> 149  brew_temp:altitude parameter.power 0.42105194     18          1 #> 150 brew_temp:bean_sun1 parameter.power 0.25698617     18          1 #> 151 brew_temp:bean_sun2 parameter.power 0.24138229     18          1 #> 152  altitude:bean_sun1 parameter.power 0.24138229     18          1 #> 153  altitude:bean_sun2 parameter.power 0.24888917     18          1 #> 154         (Intercept)    effect.power 0.45877832     19          1 #> 155           brew_temp    effect.power 0.45425904     19          1 #> 156            altitude    effect.power 0.46999930     19          1 #> 157            bean_sun    effect.power 0.22564019     19          1 #> 158  brew_temp:altitude    effect.power 0.45425904     19          1 #> 159  brew_temp:bean_sun    effect.power 0.21816729     19          1 #> 160   altitude:bean_sun    effect.power 0.22539359     19          1 #> 161         (Intercept) parameter.power 0.45877832     19          1 #> 162           brew_temp parameter.power 0.45425904     19          1 #> 163            altitude parameter.power 0.46999930     19          1 #> 164           bean_sun1 parameter.power 0.26531559     19          1 #> 165           bean_sun2 parameter.power 0.25207002     19          1 #> 166  brew_temp:altitude parameter.power 0.45425904     19          1 #> 167 brew_temp:bean_sun1 parameter.power 0.25085559     19          1 #> 168 brew_temp:bean_sun2 parameter.power 0.25085559     19          1 #> 169  altitude:bean_sun1 parameter.power 0.25504325     19          1 #> 170  altitude:bean_sun2 parameter.power 0.25888040     19          1 #> 171         (Intercept)    effect.power 0.48563889     20          1 #> 172           brew_temp    effect.power 0.48563889     20          1 #> 173            altitude    effect.power 0.48563889     20          1 #> 174            bean_sun    effect.power 0.24470624     20          1 #> 175  brew_temp:altitude    effect.power 0.48563889     20          1 #> 176  brew_temp:bean_sun    effect.power 0.24470624     20          1 #> 177   altitude:bean_sun    effect.power 0.25837891     20          1 #> 178         (Intercept) parameter.power 0.48563889     20          1 #> 179           brew_temp parameter.power 0.48563889     20          1 #> 180            altitude parameter.power 0.48563889     20          1 #> 181           bean_sun1 parameter.power 0.26156802     20          1 #> 182           bean_sun2 parameter.power 0.28835609     20          1 #> 183  brew_temp:altitude parameter.power 0.48563889     20          1 #> 184 brew_temp:bean_sun1 parameter.power 0.26156802     20          1 #> 185 brew_temp:bean_sun2 parameter.power 0.28835609     20          1 #> 186  altitude:bean_sun1 parameter.power 0.28080811     20          1 #> 187  altitude:bean_sun2 parameter.power 0.29404214     20          1 #> 188         (Intercept)    effect.power 0.51537013     21          1 #> 189           brew_temp    effect.power 0.51537013     21          1 #> 190            altitude    effect.power 0.51537013     21          1 #> 191            bean_sun    effect.power 0.27767961     21          1 #> 192  brew_temp:altitude    effect.power 0.51537013     21          1 #> 193  brew_temp:bean_sun    effect.power 0.27767961     21          1 #> 194   altitude:bean_sun    effect.power 0.27767961     21          1 #> 195         (Intercept) parameter.power 0.51537013     21          1 #> 196           brew_temp parameter.power 0.51537013     21          1 #> 197            altitude parameter.power 0.51537013     21          1 #> 198           bean_sun1 parameter.power 0.30342999     21          1 #> 199           bean_sun2 parameter.power 0.30342999     21          1 #> 200  brew_temp:altitude parameter.power 0.51537013     21          1 #> 201 brew_temp:bean_sun1 parameter.power 0.30342999     21          1 #> 202 brew_temp:bean_sun2 parameter.power 0.30342999     21          1 #> 203  altitude:bean_sun1 parameter.power 0.30342999     21          1 #> 204  altitude:bean_sun2 parameter.power 0.30342999     21          1 #> 205         (Intercept)    effect.power 0.55423625     22          1 #> 206           brew_temp    effect.power 0.55423625     22          1 #> 207            altitude    effect.power 0.55423625     22          1 #> 208            bean_sun    effect.power 0.28318633     22          1 #> 209  brew_temp:altitude    effect.power 0.55423625     22          1 #> 210  brew_temp:bean_sun    effect.power 0.28318633     22          1 #> 211   altitude:bean_sun    effect.power 0.28318633     22          1 #> 212         (Intercept) parameter.power 0.55423625     22          1 #> 213           brew_temp parameter.power 0.55423625     22          1 #> 214            altitude parameter.power 0.55423625     22          1 #> 215           bean_sun1 parameter.power 0.31402002     22          1 #> 216           bean_sun2 parameter.power 0.31402002     22          1 #> 217  brew_temp:altitude parameter.power 0.55423625     22          1 #> 218 brew_temp:bean_sun1 parameter.power 0.31402002     22          1 #> 219 brew_temp:bean_sun2 parameter.power 0.31402002     22          1 #> 220  altitude:bean_sun1 parameter.power 0.31402002     22          1 #> 221  altitude:bean_sun2 parameter.power 0.31402002     22          1 #> 222         (Intercept)    effect.power 0.59089727     23          1 #> 223           brew_temp    effect.power 0.59089727     23          1 #> 224            altitude    effect.power 0.59089727     23          1 #> 225            bean_sun    effect.power 0.31009774     23          1 #> 226  brew_temp:altitude    effect.power 0.59089727     23          1 #> 227  brew_temp:bean_sun    effect.power 0.31009774     23          1 #> 228   altitude:bean_sun    effect.power 0.31009774     23          1 #> 229         (Intercept) parameter.power 0.59089727     23          1 #> 230           brew_temp parameter.power 0.59089727     23          1 #> 231            altitude parameter.power 0.59089727     23          1 #> 232           bean_sun1 parameter.power 0.32349934     23          1 #> 233           bean_sun2 parameter.power 0.35099761     23          1 #> 234  brew_temp:altitude parameter.power 0.59089727     23          1 #> 235 brew_temp:bean_sun1 parameter.power 0.32349934     23          1 #> 236 brew_temp:bean_sun2 parameter.power 0.35099761     23          1 #> 237  altitude:bean_sun1 parameter.power 0.32349934     23          1 #> 238  altitude:bean_sun2 parameter.power 0.35099761     23          1 #> 239         (Intercept)    effect.power 0.62533027     24          1 #> 240           brew_temp    effect.power 0.62533027     24          1 #> 241            altitude    effect.power 0.62533027     24          1 #> 242            bean_sun    effect.power 0.34339118     24          1 #> 243  brew_temp:altitude    effect.power 0.62533027     24          1 #> 244  brew_temp:bean_sun    effect.power 0.34339118     24          1 #> 245   altitude:bean_sun    effect.power 0.34339118     24          1 #> 246         (Intercept) parameter.power 0.62533027     24          1 #> 247           brew_temp parameter.power 0.62533027     24          1 #> 248            altitude parameter.power 0.62533027     24          1 #> 249           bean_sun1 parameter.power 0.36472520     24          1 #> 250           bean_sun2 parameter.power 0.36472520     24          1 #> 251  brew_temp:altitude parameter.power 0.62533027     24          1 #> 252 brew_temp:bean_sun1 parameter.power 0.36472520     24          1 #> 253 brew_temp:bean_sun2 parameter.power 0.36472520     24          1 #> 254  altitude:bean_sun1 parameter.power 0.36472520     24          1 #> 255  altitude:bean_sun2 parameter.power 0.36472520     24          1 #> 256         (Intercept)    effect.power 0.64253443     25          1 #> 257           brew_temp    effect.power 0.64253443     25          1 #> 258            altitude    effect.power 0.64253443     25          1 #> 259            bean_sun    effect.power 0.34777951     25          1 #> 260  brew_temp:altitude    effect.power 0.64253443     25          1 #> 261  brew_temp:bean_sun    effect.power 0.34777951     25          1 #> 262   altitude:bean_sun    effect.power 0.34777951     25          1 #> 263         (Intercept) parameter.power 0.64253443     25          1 #> 264           brew_temp parameter.power 0.64253443     25          1 #> 265            altitude parameter.power 0.64253443     25          1 #> 266           bean_sun1 parameter.power 0.37220113     25          1 #> 267           bean_sun2 parameter.power 0.37220113     25          1 #> 268  brew_temp:altitude parameter.power 0.64253443     25          1 #> 269 brew_temp:bean_sun1 parameter.power 0.37220113     25          1 #> 270 brew_temp:bean_sun2 parameter.power 0.37220113     25          1 #> 271  altitude:bean_sun1 parameter.power 0.37220113     25          1 #> 272  altitude:bean_sun2 parameter.power 0.37220113     25          1 #> 273         (Intercept)    effect.power 0.66045936     26          1 #> 274           brew_temp    effect.power 0.65886502     26          1 #> 275            altitude    effect.power 0.66045936     26          1 #> 276            bean_sun    effect.power 0.36629224     26          1 #> 277  brew_temp:altitude    effect.power 0.65886502     26          1 #> 278  brew_temp:bean_sun    effect.power 0.36634939     26          1 #> 279   altitude:bean_sun    effect.power 0.36629224     26          1 #> 280         (Intercept) parameter.power 0.66045936     26          1 #> 281           brew_temp parameter.power 0.65886502     26          1 #> 282            altitude parameter.power 0.66045936     26          1 #> 283           bean_sun1 parameter.power 0.37979131     26          1 #> 284           bean_sun2 parameter.power 0.39375325     26          1 #> 285  brew_temp:altitude parameter.power 0.65886502     26          1 #> 286 brew_temp:bean_sun1 parameter.power 0.37923225     26          1 #> 287 brew_temp:bean_sun2 parameter.power 0.39496586     26          1 #> 288  altitude:bean_sun1 parameter.power 0.37979131     26          1 #> 289  altitude:bean_sun2 parameter.power 0.39375325     26          1 #> 290         (Intercept)    effect.power 0.67759329     27          1 #> 291           brew_temp    effect.power 0.67759329     27          1 #> 292            altitude    effect.power 0.67759329     27          1 #> 293            bean_sun    effect.power 0.38462757     27          1 #> 294  brew_temp:altitude    effect.power 0.67440003     27          1 #> 295  brew_temp:bean_sun    effect.power 0.38462757     27          1 #> 296   altitude:bean_sun    effect.power 0.38651637     27          1 #> 297         (Intercept) parameter.power 0.67759329     27          1 #> 298           brew_temp parameter.power 0.67759329     27          1 #> 299            altitude parameter.power 0.67759329     27          1 #> 300           bean_sun1 parameter.power 0.40055246     27          1 #> 301           bean_sun2 parameter.power 0.40237505     27          1 #> 302  brew_temp:altitude parameter.power 0.67440003     27          1 #> 303 brew_temp:bean_sun1 parameter.power 0.40237505     27          1 #> 304 brew_temp:bean_sun2 parameter.power 0.40055246     27          1 #> 305  altitude:bean_sun1 parameter.power 0.40237505     27          1 #> 306  altitude:bean_sun2 parameter.power 0.40237505     27          1 #> 307         (Intercept)    effect.power 0.69663495     28          1 #> 308           brew_temp    effect.power 0.69153191     28          1 #> 309            altitude    effect.power 0.69312095     28          1 #> 310            bean_sun    effect.power 0.38807288     28          1 #> 311  brew_temp:altitude    effect.power 0.69153191     28          1 #> 312  brew_temp:bean_sun    effect.power 0.38990256     28          1 #> 313   altitude:bean_sun    effect.power 0.38805572     28          1 #> 314         (Intercept) parameter.power 0.69663495     28          1 #> 315           brew_temp parameter.power 0.69153191     28          1 #> 316            altitude parameter.power 0.69312095     28          1 #> 317           bean_sun1 parameter.power 0.40782115     28          1 #> 318           bean_sun2 parameter.power 0.41184588     28          1 #> 319  brew_temp:altitude parameter.power 0.69153191     28          1 #> 320 brew_temp:bean_sun1 parameter.power 0.40970134     28          1 #> 321 brew_temp:bean_sun2 parameter.power 0.40970134     28          1 #> 322  altitude:bean_sun1 parameter.power 0.40848626     28          1 #> 323  altitude:bean_sun2 parameter.power 0.40848626     28          1 #> 324         (Intercept)    effect.power 0.70782823     29          1 #> 325           brew_temp    effect.power 0.70782823     29          1 #> 326            altitude    effect.power 0.70782823     29          1 #> 327            bean_sun    effect.power 0.40776378     29          1 #> 328  brew_temp:altitude    effect.power 0.70782823     29          1 #> 329  brew_temp:bean_sun    effect.power 0.40776378     29          1 #> 330   altitude:bean_sun    effect.power 0.41481931     29          1 #> 331         (Intercept) parameter.power 0.70782823     29          1 #> 332           brew_temp parameter.power 0.70782823     29          1 #> 333            altitude parameter.power 0.70782823     29          1 #> 334           bean_sun1 parameter.power 0.41604089     29          1 #> 335           bean_sun2 parameter.power 0.43161583     29          1 #> 336  brew_temp:altitude parameter.power 0.70782823     29          1 #> 337 brew_temp:bean_sun1 parameter.power 0.41604089     29          1 #> 338 brew_temp:bean_sun2 parameter.power 0.43161583     29          1 #> 339  altitude:bean_sun1 parameter.power 0.42008026     29          1 #> 340  altitude:bean_sun2 parameter.power 0.44336035     29          1 #> 341         (Intercept)    effect.power 0.72713449     30          1 #> 342           brew_temp    effect.power 0.72713449     30          1 #> 343            altitude    effect.power 0.72333320     30          1 #> 344            bean_sun    effect.power 0.44269129     30          1 #> 345  brew_temp:altitude    effect.power 0.72333320     30          1 #> 346  brew_temp:bean_sun    effect.power 0.42721421     30          1 #> 347   altitude:bean_sun    effect.power 0.42721421     30          1 #> 348         (Intercept) parameter.power 0.72713449     30          1 #> 349           brew_temp parameter.power 0.72713449     30          1 #> 350            altitude parameter.power 0.72333320     30          1 #> 351           bean_sun1 parameter.power 0.45030320     30          1 #> 352           bean_sun2 parameter.power 0.45030320     30          1 #> 353  brew_temp:altitude parameter.power 0.72333320     30          1 #> 354 brew_temp:bean_sun1 parameter.power 0.44054807     30          1 #> 355 brew_temp:bean_sun2 parameter.power 0.44054807     30          1 #> 356  altitude:bean_sun1 parameter.power 0.43896355     30          1 #> 357  altitude:bean_sun2 parameter.power 0.43896355     30          1 #> 358         (Intercept)    effect.power 0.74083267     31          1 #> 359           brew_temp    effect.power 0.74270695     31          1 #> 360            altitude    effect.power 0.74270695     31          1 #> 361            bean_sun    effect.power 0.42991256     31          1 #> 362  brew_temp:altitude    effect.power 0.74083267     31          1 #> 363  brew_temp:bean_sun    effect.power 0.43513149     31          1 #> 364   altitude:bean_sun    effect.power 0.43513149     31          1 #> 365         (Intercept) parameter.power 0.74083267     31          1 #> 366           brew_temp parameter.power 0.74270695     31          1 #> 367            altitude parameter.power 0.74270695     31          1 #> 368           bean_sun1 parameter.power 0.44713092     31          1 #> 369           bean_sun2 parameter.power 0.44713092     31          1 #> 370  brew_temp:altitude parameter.power 0.74083267     31          1 #> 371 brew_temp:bean_sun1 parameter.power 0.44791870     31          1 #> 372 brew_temp:bean_sun2 parameter.power 0.45568006     31          1 #> 373  altitude:bean_sun1 parameter.power 0.45568006     31          1 #> 374  altitude:bean_sun2 parameter.power 0.44791870     31          1 #> 375         (Intercept)    effect.power 0.75965148     32          1 #> 376           brew_temp    effect.power 0.76377259     32          1 #> 377            altitude    effect.power 0.75737182     32          1 #> 378            bean_sun    effect.power 0.45397055     32          1 #> 379  brew_temp:altitude    effect.power 0.75737182     32          1 #> 380  brew_temp:bean_sun    effect.power 0.46261148     32          1 #> 381   altitude:bean_sun    effect.power 0.45409791     32          1 #> 382         (Intercept) parameter.power 0.75965148     32          1 #> 383           brew_temp parameter.power 0.76377259     32          1 #> 384            altitude parameter.power 0.75737182     32          1 #> 385           bean_sun1 parameter.power 0.45587683     32          1 #> 386           bean_sun2 parameter.power 0.47561335     32          1 #> 387  brew_temp:altitude parameter.power 0.75737182     32          1 #> 388 brew_temp:bean_sun1 parameter.power 0.46297202     32          1 #> 389 brew_temp:bean_sun2 parameter.power 0.48040973     32          1 #> 390  altitude:bean_sun1 parameter.power 0.45490851     32          1 #> 391  altitude:bean_sun2 parameter.power 0.47773343     32          1 #> 392         (Intercept)    effect.power 0.77747458     33          1 #> 393           brew_temp    effect.power 0.77299047     33          1 #> 394            altitude    effect.power 0.77747458     33          1 #> 395            bean_sun    effect.power 0.48110251     33          1 #> 396  brew_temp:altitude    effect.power 0.77299047     33          1 #> 397  brew_temp:bean_sun    effect.power 0.48110251     33          1 #> 398   altitude:bean_sun    effect.power 0.48110251     33          1 #> 399         (Intercept) parameter.power 0.77747458     33          1 #> 400           brew_temp parameter.power 0.77299047     33          1 #> 401            altitude parameter.power 0.77747458     33          1 #> 402           bean_sun1 parameter.power 0.48631517     33          1 #> 403           bean_sun2 parameter.power 0.48631517     33          1 #> 404  brew_temp:altitude parameter.power 0.77299047     33          1 #> 405 brew_temp:bean_sun1 parameter.power 0.48737893     33          1 #> 406 brew_temp:bean_sun2 parameter.power 0.48737893     33          1 #> 407  altitude:bean_sun1 parameter.power 0.48631517     33          1 #> 408  altitude:bean_sun2 parameter.power 0.48631517     33          1 #> 409         (Intercept)    effect.power 0.79311087     34          1 #> 410           brew_temp    effect.power 0.79092792     34          1 #> 411            altitude    effect.power 0.79311087     34          1 #> 412            bean_sun    effect.power 0.48009226     34          1 #> 413  brew_temp:altitude    effect.power 0.79092792     34          1 #> 414  brew_temp:bean_sun    effect.power 0.48335657     34          1 #> 415   altitude:bean_sun    effect.power 0.48009226     34          1 #> 416         (Intercept) parameter.power 0.79311087     34          1 #> 417           brew_temp parameter.power 0.79092792     34          1 #> 418            altitude parameter.power 0.79311087     34          1 #> 419           bean_sun1 parameter.power 0.49291513     34          1 #> 420           bean_sun2 parameter.power 0.49291513     34          1 #> 421  brew_temp:altitude parameter.power 0.79092792     34          1 #> 422 brew_temp:bean_sun1 parameter.power 0.49500840     34          1 #> 423 brew_temp:bean_sun2 parameter.power 0.49500840     34          1 #> 424  altitude:bean_sun1 parameter.power 0.49291513     34          1 #> 425  altitude:bean_sun2 parameter.power 0.49291513     34          1 #> 426         (Intercept)    effect.power 0.80764343     35          1 #> 427           brew_temp    effect.power 0.80764343     35          1 #> 428            altitude    effect.power 0.80764343     35          1 #> 429            bean_sun    effect.power 0.50644848     35          1 #> 430  brew_temp:altitude    effect.power 0.80764343     35          1 #> 431  brew_temp:bean_sun    effect.power 0.50644848     35          1 #> 432   altitude:bean_sun    effect.power 0.50644848     35          1 #> 433         (Intercept) parameter.power 0.80764343     35          1 #> 434           brew_temp parameter.power 0.80764343     35          1 #> 435            altitude parameter.power 0.80764343     35          1 #> 436           bean_sun1 parameter.power 0.50220633     35          1 #> 437           bean_sun2 parameter.power 0.52404541     35          1 #> 438  brew_temp:altitude parameter.power 0.80764343     35          1 #> 439 brew_temp:bean_sun1 parameter.power 0.50220633     35          1 #> 440 brew_temp:bean_sun2 parameter.power 0.52404541     35          1 #> 441  altitude:bean_sun1 parameter.power 0.50220633     35          1 #> 442  altitude:bean_sun2 parameter.power 0.52404541     35          1 #> 443         (Intercept)    effect.power 0.82319570     36          1 #> 444           brew_temp    effect.power 0.82319570     36          1 #> 445            altitude    effect.power 0.82319570     36          1 #> 446            bean_sun    effect.power 0.53212341     36          1 #> 447  brew_temp:altitude    effect.power 0.82319570     36          1 #> 448  brew_temp:bean_sun    effect.power 0.53212341     36          1 #> 449   altitude:bean_sun    effect.power 0.53212341     36          1 #> 450         (Intercept) parameter.power 0.82319570     36          1 #> 451           brew_temp parameter.power 0.82319570     36          1 #> 452            altitude parameter.power 0.82319570     36          1 #> 453           bean_sun1 parameter.power 0.53298203     36          1 #> 454           bean_sun2 parameter.power 0.53298203     36          1 #> 455  brew_temp:altitude parameter.power 0.82319570     36          1 #> 456 brew_temp:bean_sun1 parameter.power 0.53298203     36          1 #> 457 brew_temp:bean_sun2 parameter.power 0.53298203     36          1 #> 458  altitude:bean_sun1 parameter.power 0.53298203     36          1 #> 459  altitude:bean_sun2 parameter.power 0.53298203     36          1 #> 460         (Intercept)    effect.power 0.83241158     37          1 #> 461           brew_temp    effect.power 0.83241158     37          1 #> 462            altitude    effect.power 0.83241158     37          1 #> 463            bean_sun    effect.power 0.53401488     37          1 #> 464  brew_temp:altitude    effect.power 0.83241158     37          1 #> 465  brew_temp:bean_sun    effect.power 0.53401488     37          1 #> 466   altitude:bean_sun    effect.power 0.53401488     37          1 #> 467         (Intercept) parameter.power 0.83241158     37          1 #> 468           brew_temp parameter.power 0.83241158     37          1 #> 469            altitude parameter.power 0.83241158     37          1 #> 470           bean_sun1 parameter.power 0.53859022     37          1 #> 471           bean_sun2 parameter.power 0.53859022     37          1 #> 472  brew_temp:altitude parameter.power 0.83241158     37          1 #> 473 brew_temp:bean_sun1 parameter.power 0.53859022     37          1 #> 474 brew_temp:bean_sun2 parameter.power 0.53859022     37          1 #> 475  altitude:bean_sun1 parameter.power 0.53859022     37          1 #> 476  altitude:bean_sun2 parameter.power 0.53859022     37          1 #> 477         (Intercept)    effect.power 0.84117705     38          1 #> 478           brew_temp    effect.power 0.84188390     38          1 #> 479            altitude    effect.power 0.84188390     38          1 #> 480            bean_sun    effect.power 0.55057934     38          1 #> 481  brew_temp:altitude    effect.power 0.84117705     38          1 #> 482  brew_temp:bean_sun    effect.power 0.55054905     38          1 #> 483   altitude:bean_sun    effect.power 0.55054905     38          1 #> 484         (Intercept) parameter.power 0.84117705     38          1 #> 485           brew_temp parameter.power 0.84188390     38          1 #> 486            altitude parameter.power 0.84188390     38          1 #> 487           bean_sun1 parameter.power 0.54400042     38          1 #> 488           bean_sun2 parameter.power 0.55861146     38          1 #> 489  brew_temp:altitude parameter.power 0.84117705     38          1 #> 490 brew_temp:bean_sun1 parameter.power 0.54439682     38          1 #> 491 brew_temp:bean_sun2 parameter.power 0.55778106     38          1 #> 492  altitude:bean_sun1 parameter.power 0.54439682     38          1 #> 493  altitude:bean_sun2 parameter.power 0.55778106     38          1 #> 494         (Intercept)    effect.power 0.84951347     39          1 #> 495           brew_temp    effect.power 0.84951347     39          1 #> 496            altitude    effect.power 0.84951347     39          1 #> 497            bean_sun    effect.power 0.56808294     39          1 #> 498  brew_temp:altitude    effect.power 0.84951347     39          1 #> 499  brew_temp:bean_sun    effect.power 0.56808294     39          1 #> 500   altitude:bean_sun    effect.power 0.56808294     39          1 #> 501         (Intercept) parameter.power 0.84951347     39          1 #> 502           brew_temp parameter.power 0.84951347     39          1 #> 503            altitude parameter.power 0.84951347     39          1 #> 504           bean_sun1 parameter.power 0.56467153     39          1 #> 505           bean_sun2 parameter.power 0.56467153     39          1 #> 506  brew_temp:altitude parameter.power 0.84951347     39          1 #> 507 brew_temp:bean_sun1 parameter.power 0.56467153     39          1 #> 508 brew_temp:bean_sun2 parameter.power 0.56467153     39          1 #> 509  altitude:bean_sun1 parameter.power 0.56467153     39          1 #> 510  altitude:bean_sun2 parameter.power 0.56467153     39          1 #> 511         (Intercept)    effect.power 0.85843167     40          1 #> 512           brew_temp    effect.power 0.85910271     40          1 #> 513            altitude    effect.power 0.85910271     40          1 #> 514            bean_sun    effect.power 0.56966013     40          1 #> 515  brew_temp:altitude    effect.power 0.85843167     40          1 #> 516  brew_temp:bean_sun    effect.power 0.56835224     40          1 #> 517   altitude:bean_sun    effect.power 0.56835224     40          1 #> 518         (Intercept) parameter.power 0.85843167     40          1 #> 519           brew_temp parameter.power 0.85910271     40          1 #> 520            altitude parameter.power 0.85910271     40          1 #> 521           bean_sun1 parameter.power 0.57123331     40          1 #> 522           bean_sun2 parameter.power 0.57123331     40          1 #> 523  brew_temp:altitude parameter.power 0.85843167     40          1 #> 524 brew_temp:bean_sun1 parameter.power 0.56909228     40          1 #> 525 brew_temp:bean_sun2 parameter.power 0.56909228     40          1 #> 526  altitude:bean_sun1 parameter.power 0.56909228     40          1 #> 527  altitude:bean_sun2 parameter.power 0.56909228     40          1 #> 528         (Intercept)    effect.power 0.87124773     41          1 #> 529           brew_temp    effect.power 0.86686495     41          1 #> 530            altitude    effect.power 0.86686495     41          1 #> 531            bean_sun    effect.power 0.58982659     41          1 #> 532  brew_temp:altitude    effect.power 0.86686495     41          1 #> 533  brew_temp:bean_sun    effect.power 0.58537150     41          1 #> 534   altitude:bean_sun    effect.power 0.58537150     41          1 #> 535         (Intercept) parameter.power 0.87124773     41          1 #> 536           brew_temp parameter.power 0.86686495     41          1 #> 537            altitude parameter.power 0.86686495     41          1 #> 538           bean_sun1 parameter.power 0.57770418     41          1 #> 539           bean_sun2 parameter.power 0.59311332     41          1 #> 540  brew_temp:altitude parameter.power 0.86686495     41          1 #> 541 brew_temp:bean_sun1 parameter.power 0.57495534     41          1 #> 542 brew_temp:bean_sun2 parameter.power 0.58896705     41          1 #> 543  altitude:bean_sun1 parameter.power 0.57495534     41          1 #> 544  altitude:bean_sun2 parameter.power 0.58896705     41          1 #> 545         (Intercept)    effect.power 0.87483652     42          1 #> 546           brew_temp    effect.power 0.87628694     42          1 #> 547            altitude    effect.power 0.87628694     42          1 #> 548            bean_sun    effect.power 0.60195631     42          1 #> 549  brew_temp:altitude    effect.power 0.87483652     42          1 #> 550  brew_temp:bean_sun    effect.power 0.60510491     42          1 #> 551   altitude:bean_sun    effect.power 0.60512681     42          1 #> 552         (Intercept) parameter.power 0.87483652     42          1 #> 553           brew_temp parameter.power 0.87628694     42          1 #> 554            altitude parameter.power 0.87628694     42          1 #> 555           bean_sun1 parameter.power 0.59462960     42          1 #> 556           bean_sun2 parameter.power 0.59462960     42          1 #> 557  brew_temp:altitude parameter.power 0.87483652     42          1 #> 558 brew_temp:bean_sun1 parameter.power 0.59851482     42          1 #> 559 brew_temp:bean_sun2 parameter.power 0.59559683     42          1 #> 560  altitude:bean_sun1 parameter.power 0.59559683     42          1 #> 561  altitude:bean_sun2 parameter.power 0.60145744     42          1 #> 562         (Intercept)    effect.power 0.88340158     43          1 #> 563           brew_temp    effect.power 0.88340158     43          1 #> 564            altitude    effect.power 0.88340158     43          1 #> 565            bean_sun    effect.power 0.60328412     43          1 #> 566  brew_temp:altitude    effect.power 0.88340158     43          1 #> 567  brew_temp:bean_sun    effect.power 0.60328412     43          1 #> 568   altitude:bean_sun    effect.power 0.61279361     43          1 #> 569         (Intercept) parameter.power 0.88340158     43          1 #> 570           brew_temp parameter.power 0.88340158     43          1 #> 571            altitude parameter.power 0.88340158     43          1 #> 572           bean_sun1 parameter.power 0.60080396     43          1 #> 573           bean_sun2 parameter.power 0.60080396     43          1 #> 574  brew_temp:altitude parameter.power 0.88340158     43          1 #> 575 brew_temp:bean_sun1 parameter.power 0.60080396     43          1 #> 576 brew_temp:bean_sun2 parameter.power 0.60080396     43          1 #> 577  altitude:bean_sun1 parameter.power 0.60827933     43          1 #> 578  altitude:bean_sun2 parameter.power 0.60827933     43          1 #> 579         (Intercept)    effect.power 0.89143160     44          1 #> 580           brew_temp    effect.power 0.89366090     44          1 #> 581            altitude    effect.power 0.89221278     44          1 #> 582            bean_sun    effect.power 0.62247859     44          1 #> 583  brew_temp:altitude    effect.power 0.89143160     44          1 #> 584  brew_temp:bean_sun    effect.power 0.62745933     44          1 #> 585   altitude:bean_sun    effect.power 0.62242967     44          1 #> 586         (Intercept) parameter.power 0.89143160     44          1 #> 587           brew_temp parameter.power 0.89366090     44          1 #> 588            altitude parameter.power 0.89221278     44          1 #> 589           bean_sun1 parameter.power 0.60675034     44          1 #> 590           bean_sun2 parameter.power 0.62448446     44          1 #> 591  brew_temp:altitude parameter.power 0.89143160     44          1 #> 592 brew_temp:bean_sun1 parameter.power 0.61141204     44          1 #> 593 brew_temp:bean_sun2 parameter.power 0.62601150     44          1 #> 594  altitude:bean_sun1 parameter.power 0.60730028     44          1 #> 595  altitude:bean_sun2 parameter.power 0.62333294     44          1 #> 596         (Intercept)    effect.power 0.90045632     45          1 #> 597           brew_temp    effect.power 0.89895516     45          1 #> 598            altitude    effect.power 0.90045632     45          1 #> 599            bean_sun    effect.power 0.64099921     45          1 #> 600  brew_temp:altitude    effect.power 0.89895516     45          1 #> 601  brew_temp:bean_sun    effect.power 0.64284244     45          1 #> 602   altitude:bean_sun    effect.power 0.64099921     45          1 #> 603         (Intercept) parameter.power 0.90045632     45          1 #> 604           brew_temp parameter.power 0.89895516     45          1 #> 605            altitude parameter.power 0.90045632     45          1 #> 606           bean_sun1 parameter.power 0.63074179     45          1 #> 607           bean_sun2 parameter.power 0.62903185     45          1 #> 608  brew_temp:altitude parameter.power 0.89895516     45          1 #> 609 brew_temp:bean_sun1 parameter.power 0.63131346     45          1 #> 610 brew_temp:bean_sun2 parameter.power 0.63131346     45          1 #> 611  altitude:bean_sun1 parameter.power 0.63074179     45          1 #> 612  altitude:bean_sun2 parameter.power 0.62903185     45          1 #> 613         (Intercept)    effect.power 0.90705830     46          1 #> 614           brew_temp    effect.power 0.90705830     46          1 #> 615            altitude    effect.power 0.90705830     46          1 #> 616            bean_sun    effect.power 0.64397124     46          1 #> 617  brew_temp:altitude    effect.power 0.90705830     46          1 #> 618  brew_temp:bean_sun    effect.power 0.64397124     46          1 #> 619   altitude:bean_sun    effect.power 0.64397124     46          1 #> 620         (Intercept) parameter.power 0.90705830     46          1 #> 621           brew_temp parameter.power 0.90705830     46          1 #> 622            altitude parameter.power 0.90705830     46          1 #> 623           bean_sun1 parameter.power 0.63704141     46          1 #> 624           bean_sun2 parameter.power 0.63704141     46          1 #> 625  brew_temp:altitude parameter.power 0.90705830     46          1 #> 626 brew_temp:bean_sun1 parameter.power 0.63704141     46          1 #> 627 brew_temp:bean_sun2 parameter.power 0.63704141     46          1 #> 628  altitude:bean_sun1 parameter.power 0.63704141     46          1 #> 629  altitude:bean_sun2 parameter.power 0.63704141     46          1 #> 630         (Intercept)    effect.power 0.91456592     47          1 #> 631           brew_temp    effect.power 0.91456592     47          1 #> 632            altitude    effect.power 0.91456592     47          1 #> 633            bean_sun    effect.power 0.66178559     47          1 #> 634  brew_temp:altitude    effect.power 0.91456592     47          1 #> 635  brew_temp:bean_sun    effect.power 0.66178559     47          1 #> 636   altitude:bean_sun    effect.power 0.66178559     47          1 #> 637         (Intercept) parameter.power 0.91456592     47          1 #> 638           brew_temp parameter.power 0.91456592     47          1 #> 639            altitude parameter.power 0.91456592     47          1 #> 640           bean_sun1 parameter.power 0.64252818     47          1 #> 641           bean_sun2 parameter.power 0.65911840     47          1 #> 642  brew_temp:altitude parameter.power 0.91456592     47          1 #> 643 brew_temp:bean_sun1 parameter.power 0.64252818     47          1 #> 644 brew_temp:bean_sun2 parameter.power 0.65911840     47          1 #> 645  altitude:bean_sun1 parameter.power 0.64252818     47          1 #> 646  altitude:bean_sun2 parameter.power 0.65911840     47          1 #> 647         (Intercept)    effect.power 0.92151562     48          1 #> 648           brew_temp    effect.power 0.92151562     48          1 #> 649            altitude    effect.power 0.92151562     48          1 #> 650            bean_sun    effect.power 0.68063060     48          1 #> 651  brew_temp:altitude    effect.power 0.92151562     48          1 #> 652  brew_temp:bean_sun    effect.power 0.68063060     48          1 #> 653   altitude:bean_sun    effect.power 0.68063060     48          1 #> 654         (Intercept) parameter.power 0.92151562     48          1 #> 655           brew_temp parameter.power 0.92151562     48          1 #> 656            altitude parameter.power 0.92151562     48          1 #> 657           bean_sun1 parameter.power 0.66541256     48          1 #> 658           bean_sun2 parameter.power 0.66541256     48          1 #> 659  brew_temp:altitude parameter.power 0.92151562     48          1 #> 660 brew_temp:bean_sun1 parameter.power 0.66541256     48          1 #> 661 brew_temp:bean_sun2 parameter.power 0.66541256     48          1 #> 662  altitude:bean_sun1 parameter.power 0.66541256     48          1 #> 663  altitude:bean_sun2 parameter.power 0.66541256     48          1 #> 664         (Intercept)    effect.power 0.92606893     49          1 #> 665           brew_temp    effect.power 0.92606893     49          1 #> 666            altitude    effect.power 0.92606893     49          1 #> 667            bean_sun    effect.power 0.68159074     49          1 #> 668  brew_temp:altitude    effect.power 0.92606893     49          1 #> 669  brew_temp:bean_sun    effect.power 0.68159074     49          1 #> 670   altitude:bean_sun    effect.power 0.68159074     49          1 #> 671         (Intercept) parameter.power 0.92606893     49          1 #> 672           brew_temp parameter.power 0.92606893     49          1 #> 673            altitude parameter.power 0.92606893     49          1 #> 674           bean_sun1 parameter.power 0.66975710     49          1 #> 675           bean_sun2 parameter.power 0.66975710     49          1 #> 676  brew_temp:altitude parameter.power 0.92606893     49          1 #> 677 brew_temp:bean_sun1 parameter.power 0.66975710     49          1 #> 678 brew_temp:bean_sun2 parameter.power 0.66975710     49          1 #> 679  altitude:bean_sun1 parameter.power 0.66975710     49          1 #> 680  altitude:bean_sun2 parameter.power 0.66975710     49          1 #> 681         (Intercept)    effect.power 0.93065613     50          1 #> 682           brew_temp    effect.power 0.93037347     50          1 #> 683            altitude    effect.power 0.93065613     50          1 #> 684            bean_sun    effect.power 0.69479981     50          1 #> 685  brew_temp:altitude    effect.power 0.93037347     50          1 #> 686  brew_temp:bean_sun    effect.power 0.69481528     50          1 #> 687   altitude:bean_sun    effect.power 0.69479981     50          1 #> 688         (Intercept) parameter.power 0.93065613     50          1 #> 689           brew_temp parameter.power 0.93037347     50          1 #> 690            altitude parameter.power 0.93065613     50          1 #> 691           bean_sun1 parameter.power 0.67423750     50          1 #> 692           bean_sun2 parameter.power 0.68540963     50          1 #> 693  brew_temp:altitude parameter.power 0.93037347     50          1 #> 694 brew_temp:bean_sun1 parameter.power 0.67397476     50          1 #> 695 brew_temp:bean_sun2 parameter.power 0.68594833     50          1 #> 696  altitude:bean_sun1 parameter.power 0.67423750     50          1 #> 697  altitude:bean_sun2 parameter.power 0.68540963     50          1 #> 698         (Intercept)    effect.power 0.93498592     51          1 #> 699           brew_temp    effect.power 0.93498592     51          1 #> 700            altitude    effect.power 0.93498592     51          1 #> 701            bean_sun    effect.power 0.70761069     51          1 #> 702  brew_temp:altitude    effect.power 0.93444180     51          1 #> 703  brew_temp:bean_sun    effect.power 0.70761069     51          1 #> 704   altitude:bean_sun    effect.power 0.70846509     51          1 #> 705         (Intercept) parameter.power 0.93498592     51          1 #> 706           brew_temp parameter.power 0.93498592     51          1 #> 707            altitude parameter.power 0.93498592     51          1 #> 708           bean_sun1 parameter.power 0.69026642     51          1 #> 709           bean_sun2 parameter.power 0.68946584     51          1 #> 710  brew_temp:altitude parameter.power 0.93444180     51          1 #> 711 brew_temp:bean_sun1 parameter.power 0.68946584     51          1 #> 712 brew_temp:bean_sun2 parameter.power 0.69026642     51          1 #> 713  altitude:bean_sun1 parameter.power 0.69026642     51          1 #> 714  altitude:bean_sun2 parameter.power 0.69026642     51          1 #> 715         (Intercept)    effect.power 0.93977209     52          1 #> 716           brew_temp    effect.power 0.93867276     52          1 #> 717            altitude    effect.power 0.93867276     52          1 #> 718            bean_sun    effect.power 0.70928436     52          1 #> 719  brew_temp:altitude    effect.power 0.93867276     52          1 #> 720  brew_temp:bean_sun    effect.power 0.70928436     52          1 #> 721   altitude:bean_sun    effect.power 0.70928436     52          1 #> 722         (Intercept) parameter.power 0.93977209     52          1 #> 723           brew_temp parameter.power 0.93867276     52          1 #> 724            altitude parameter.power 0.93867276     52          1 #> 725           bean_sun1 parameter.power 0.69486707     52          1 #> 726           bean_sun2 parameter.power 0.69486707     52          1 #> 727  brew_temp:altitude parameter.power 0.93867276     52          1 #> 728 brew_temp:bean_sun1 parameter.power 0.69458807     52          1 #> 729 brew_temp:bean_sun2 parameter.power 0.69458807     52          1 #> 730  altitude:bean_sun1 parameter.power 0.69458807     52          1 #> 731  altitude:bean_sun2 parameter.power 0.69458807     52          1 #> 732         (Intercept)    effect.power 0.94292584     53          1 #> 733           brew_temp    effect.power 0.94292584     53          1 #> 734            altitude    effect.power 0.94264730     53          1 #> 735            bean_sun    effect.power 0.72436521     53          1 #> 736  brew_temp:altitude    effect.power 0.94264730     53          1 #> 737  brew_temp:bean_sun    effect.power 0.72160021     53          1 #> 738   altitude:bean_sun    effect.power 0.72161471     53          1 #> 739         (Intercept) parameter.power 0.94292584     53          1 #> 740           brew_temp parameter.power 0.94292584     53          1 #> 741            altitude parameter.power 0.94264730     53          1 #> 742           bean_sun1 parameter.power 0.69963516     53          1 #> 743           bean_sun2 parameter.power 0.71269761     53          1 #> 744  brew_temp:altitude parameter.power 0.94264730     53          1 #> 745 brew_temp:bean_sun1 parameter.power 0.69963516     53          1 #> 746 brew_temp:bean_sun2 parameter.power 0.71010611     53          1 #> 747  altitude:bean_sun1 parameter.power 0.69851539     53          1 #> 748  altitude:bean_sun2 parameter.power 0.70980850     53          1 #> 749         (Intercept)    effect.power 0.94691230     54          1 #> 750           brew_temp    effect.power 0.94637960     54          1 #> 751            altitude    effect.power 0.94797160     54          1 #> 752            bean_sun    effect.power 0.73620256     54          1 #> 753  brew_temp:altitude    effect.power 0.94637960     54          1 #> 754  brew_temp:bean_sun    effect.power 0.73432537     54          1 #> 755   altitude:bean_sun    effect.power 0.73619998     54          1 #> 756         (Intercept) parameter.power 0.94691230     54          1 #> 757           brew_temp parameter.power 0.94637960     54          1 #> 758            altitude parameter.power 0.94797160     54          1 #> 759           bean_sun1 parameter.power 0.71466722     54          1 #> 760           bean_sun2 parameter.power 0.71643794     54          1 #> 761  brew_temp:altitude parameter.power 0.94637960     54          1 #> 762 brew_temp:bean_sun1 parameter.power 0.71407824     54          1 #> 763 brew_temp:bean_sun2 parameter.power 0.71407824     54          1 #> 764  altitude:bean_sun1 parameter.power 0.71584707     54          1 #> 765  altitude:bean_sun2 parameter.power 0.71584707     54          1 #> 766         (Intercept)    effect.power 0.95104855     55          1 #> 767           brew_temp    effect.power 0.95025925     55          1 #> 768            altitude    effect.power 0.95051297     55          1 #> 769            bean_sun    effect.power 0.73691936     55          1 #> 770  brew_temp:altitude    effect.power 0.95025925     55          1 #> 771  brew_temp:bean_sun    effect.power 0.73502700     55          1 #> 772   altitude:bean_sun    effect.power 0.73692499     55          1 #> 773         (Intercept) parameter.power 0.95104855     55          1 #> 774           brew_temp parameter.power 0.95025925     55          1 #> 775            altitude parameter.power 0.95051297     55          1 #> 776           bean_sun1 parameter.power 0.71955699     55          1 #> 777           bean_sun2 parameter.power 0.72043142     55          1 #> 778  brew_temp:altitude parameter.power 0.95025925     55          1 #> 779 brew_temp:bean_sun1 parameter.power 0.71864971     55          1 #> 780 brew_temp:bean_sun2 parameter.power 0.71864971     55          1 #> 781  altitude:bean_sun1 parameter.power 0.72166822     55          1 #> 782  altitude:bean_sun2 parameter.power 0.71894057     55          1 #> 783         (Intercept)    effect.power 0.95387505     56          1 #> 784           brew_temp    effect.power 0.95414546     56          1 #> 785            altitude    effect.power 0.95414546     56          1 #> 786            bean_sun    effect.power 0.75193990     56          1 #> 787  brew_temp:altitude    effect.power 0.95387505     56          1 #> 788  brew_temp:bean_sun    effect.power 0.74905743     56          1 #> 789   altitude:bean_sun    effect.power 0.74905743     56          1 #> 790         (Intercept) parameter.power 0.95387505     56          1 #> 791           brew_temp parameter.power 0.95414546     56          1 #> 792            altitude parameter.power 0.95414546     56          1 #> 793           bean_sun1 parameter.power 0.72673476     56          1 #> 794           bean_sun2 parameter.power 0.73719664     56          1 #> 795  brew_temp:altitude parameter.power 0.95387505     56          1 #> 796 brew_temp:bean_sun1 parameter.power 0.72339542     56          1 #> 797 brew_temp:bean_sun2 parameter.power 0.73560489     56          1 #> 798  altitude:bean_sun1 parameter.power 0.72339542     56          1 #> 799  altitude:bean_sun2 parameter.power 0.73560489     56          1 #> 800         (Intercept)    effect.power 0.95775642     57          1 #> 801           brew_temp    effect.power 0.95724332     57          1 #> 802            altitude    effect.power 0.95775642     57          1 #> 803            bean_sun    effect.power 0.76252209     57          1 #> 804  brew_temp:altitude    effect.power 0.95724332     57          1 #> 805  brew_temp:bean_sun    effect.power 0.76354531     57          1 #> 806   altitude:bean_sun    effect.power 0.76252209     57          1 #> 807         (Intercept) parameter.power 0.95775642     57          1 #> 808           brew_temp parameter.power 0.95724332     57          1 #> 809            altitude parameter.power 0.95775642     57          1 #> 810           bean_sun1 parameter.power 0.73981108     57          1 #> 811           bean_sun2 parameter.power 0.74078591     57          1 #> 812  brew_temp:altitude parameter.power 0.95724332     57          1 #> 813 brew_temp:bean_sun1 parameter.power 0.74111118     57          1 #> 814 brew_temp:bean_sun2 parameter.power 0.74111118     57          1 #> 815  altitude:bean_sun1 parameter.power 0.73981108     57          1 #> 816  altitude:bean_sun2 parameter.power 0.74078591     57          1 #> 817         (Intercept)    effect.power 0.96073882     58          1 #> 818           brew_temp    effect.power 0.96098111     58          1 #> 819            altitude    effect.power 0.96098111     58          1 #> 820            bean_sun    effect.power 0.76414464     58          1 #> 821  brew_temp:altitude    effect.power 0.96073882     58          1 #> 822  brew_temp:bean_sun    effect.power 0.76314217     58          1 #> 823   altitude:bean_sun    effect.power 0.76314217     58          1 #> 824         (Intercept) parameter.power 0.96073882     58          1 #> 825           brew_temp parameter.power 0.96098111     58          1 #> 826            altitude parameter.power 0.96098111     58          1 #> 827           bean_sun1 parameter.power 0.74531684     58          1 #> 828           bean_sun2 parameter.power 0.74531684     58          1 #> 829  brew_temp:altitude parameter.power 0.96073882     58          1 #> 830 brew_temp:bean_sun1 parameter.power 0.74467614     58          1 #> 831 brew_temp:bean_sun2 parameter.power 0.74467614     58          1 #> 832  altitude:bean_sun1 parameter.power 0.74467614     58          1 #> 833  altitude:bean_sun2 parameter.power 0.74467614     58          1 #> 834         (Intercept)    effect.power 0.96396482     59          1 #> 835           brew_temp    effect.power 0.96396482     59          1 #> 836            altitude    effect.power 0.96396482     59          1 #> 837            bean_sun    effect.power 0.77695510     59          1 #> 838  brew_temp:altitude    effect.power 0.96396482     59          1 #> 839  brew_temp:bean_sun    effect.power 0.77695510     59          1 #> 840   altitude:bean_sun    effect.power 0.77695510     59          1 #> 841         (Intercept) parameter.power 0.96396482     59          1 #> 842           brew_temp parameter.power 0.96396482     59          1 #> 843            altitude parameter.power 0.96396482     59          1 #> 844           bean_sun1 parameter.power 0.74937249     59          1 #> 845           bean_sun2 parameter.power 0.76155442     59          1 #> 846  brew_temp:altitude parameter.power 0.96396482     59          1 #> 847 brew_temp:bean_sun1 parameter.power 0.74937249     59          1 #> 848 brew_temp:bean_sun2 parameter.power 0.76155442     59          1 #> 849  altitude:bean_sun1 parameter.power 0.74937249     59          1 #> 850  altitude:bean_sun2 parameter.power 0.76155442     59          1 #> 851         (Intercept)    effect.power 0.96694033     60          1 #> 852           brew_temp    effect.power 0.96694033     60          1 #> 853            altitude    effect.power 0.96694033     60          1 #> 854            bean_sun    effect.power 0.79011675     60          1 #> 855  brew_temp:altitude    effect.power 0.96694033     60          1 #> 856  brew_temp:bean_sun    effect.power 0.79011675     60          1 #> 857   altitude:bean_sun    effect.power 0.79011675     60          1 #> 858         (Intercept) parameter.power 0.96694033     60          1 #> 859           brew_temp parameter.power 0.96694033     60          1 #> 860            altitude parameter.power 0.96694033     60          1 #> 861           bean_sun1 parameter.power 0.76599370     60          1 #> 862           bean_sun2 parameter.power 0.76599370     60          1 #> 863  brew_temp:altitude parameter.power 0.96694033     60          1 #> 864 brew_temp:bean_sun1 parameter.power 0.76599370     60          1 #> 865 brew_temp:bean_sun2 parameter.power 0.76599370     60          1 #> 866  altitude:bean_sun1 parameter.power 0.76599370     60          1 #> 867  altitude:bean_sun2 parameter.power 0.76599370     60          1 #>     random_seed #> 18          123 #> 19          123 #> 20          123 #> 21          123 #> 22          123 #> 23          123 #> 24          123 #> 25          123 #> 26          123 #> 27          123 #> 28          123 #> 29          123 #> 30          123 #> 31          123 #> 32          123 #> 33          123 #> 34          123 #> 35          123 #> 36          123 #> 37          123 #> 38          123 #> 39          123 #> 40          123 #> 41          123 #> 42          123 #> 43          123 #> 44          123 #> 45          123 #> 46          123 #> 47          123 #> 48          123 #> 49          123 #> 50          123 #> 51          123 #> 52          123 #> 53          123 #> 54          123 #> 55          123 #> 56          123 #> 57          123 #> 58          123 #> 59          123 #> 60          123 #> 61          123 #> 62          123 #> 63          123 #> 64          123 #> 65          123 #> 66          123 #> 67          123 #> 68          123 #> 69          123 #> 70          123 #> 71          123 #> 72          123 #> 73          123 #> 74          123 #> 75          123 #> 76          123 #> 77          123 #> 78          123 #> 79          123 #> 80          123 #> 81          123 #> 82          123 #> 83          123 #> 84          123 #> 85          123 #> 86          123 #> 87          123 #> 88          123 #> 89          123 #> 90          123 #> 91          123 #> 92          123 #> 93          123 #> 94          123 #> 95          123 #> 96          123 #> 97          123 #> 98          123 #> 99          123 #> 100         123 #> 101         123 #> 102         123 #> 103         123 #> 104         123 #> 105         123 #> 106         123 #> 107         123 #> 108         123 #> 109         123 #> 110         123 #> 111         123 #> 112         123 #> 113         123 #> 114         123 #> 115         123 #> 116         123 #> 117         123 #> 118         123 #> 119         123 #> 120         123 #> 121         123 #> 122         123 #> 123         123 #> 124         123 #> 125         123 #> 126         123 #> 127         123 #> 128         123 #> 129         123 #> 130         123 #> 131         123 #> 132         123 #> 133         123 #> 134         123 #> 135         123 #> 136         123 #> 137         123 #> 138         123 #> 139         123 #> 140         123 #> 141         123 #> 142         123 #> 143         123 #> 144         123 #> 145         123 #> 146         123 #> 147         123 #> 148         123 #> 149         123 #> 150         123 #> 151         123 #> 152         123 #> 153         123 #> 154         123 #> 155         123 #> 156         123 #> 157         123 #> 158         123 #> 159         123 #> 160         123 #> 161         123 #> 162         123 #> 163         123 #> 164         123 #> 165         123 #> 166         123 #> 167         123 #> 168         123 #> 169         123 #> 170         123 #> 171         123 #> 172         123 #> 173         123 #> 174         123 #> 175         123 #> 176         123 #> 177         123 #> 178         123 #> 179         123 #> 180         123 #> 181         123 #> 182         123 #> 183         123 #> 184         123 #> 185         123 #> 186         123 #> 187         123 #> 188         123 #> 189         123 #> 190         123 #> 191         123 #> 192         123 #> 193         123 #> 194         123 #> 195         123 #> 196         123 #> 197         123 #> 198         123 #> 199         123 #> 200         123 #> 201         123 #> 202         123 #> 203         123 #> 204         123 #> 205         123 #> 206         123 #> 207         123 #> 208         123 #> 209         123 #> 210         123 #> 211         123 #> 212         123 #> 213         123 #> 214         123 #> 215         123 #> 216         123 #> 217         123 #> 218         123 #> 219         123 #> 220         123 #> 221         123 #> 222         123 #> 223         123 #> 224         123 #> 225         123 #> 226         123 #> 227         123 #> 228         123 #> 229         123 #> 230         123 #> 231         123 #> 232         123 #> 233         123 #> 234         123 #> 235         123 #> 236         123 #> 237         123 #> 238         123 #> 239         123 #> 240         123 #> 241         123 #> 242         123 #> 243         123 #> 244         123 #> 245         123 #> 246         123 #> 247         123 #> 248         123 #> 249         123 #> 250         123 #> 251         123 #> 252         123 #> 253         123 #> 254         123 #> 255         123 #> 256         123 #> 257         123 #> 258         123 #> 259         123 #> 260         123 #> 261         123 #> 262         123 #> 263         123 #> 264         123 #> 265         123 #> 266         123 #> 267         123 #> 268         123 #> 269         123 #> 270         123 #> 271         123 #> 272         123 #> 273         123 #> 274         123 #> 275         123 #> 276         123 #> 277         123 #> 278         123 #> 279         123 #> 280         123 #> 281         123 #> 282         123 #> 283         123 #> 284         123 #> 285         123 #> 286         123 #> 287         123 #> 288         123 #> 289         123 #> 290         123 #> 291         123 #> 292         123 #> 293         123 #> 294         123 #> 295         123 #> 296         123 #> 297         123 #> 298         123 #> 299         123 #> 300         123 #> 301         123 #> 302         123 #> 303         123 #> 304         123 #> 305         123 #> 306         123 #> 307         123 #> 308         123 #> 309         123 #> 310         123 #> 311         123 #> 312         123 #> 313         123 #> 314         123 #> 315         123 #> 316         123 #> 317         123 #> 318         123 #> 319         123 #> 320         123 #> 321         123 #> 322         123 #> 323         123 #> 324         123 #> 325         123 #> 326         123 #> 327         123 #> 328         123 #> 329         123 #> 330         123 #> 331         123 #> 332         123 #> 333         123 #> 334         123 #> 335         123 #> 336         123 #> 337         123 #> 338         123 #> 339         123 #> 340         123 #> 341         123 #> 342         123 #> 343         123 #> 344         123 #> 345         123 #> 346         123 #> 347         123 #> 348         123 #> 349         123 #> 350         123 #> 351         123 #> 352         123 #> 353         123 #> 354         123 #> 355         123 #> 356         123 #> 357         123 #> 358         123 #> 359         123 #> 360         123 #> 361         123 #> 362         123 #> 363         123 #> 364         123 #> 365         123 #> 366         123 #> 367         123 #> 368         123 #> 369         123 #> 370         123 #> 371         123 #> 372         123 #> 373         123 #> 374         123 #> 375         123 #> 376         123 #> 377         123 #> 378         123 #> 379         123 #> 380         123 #> 381         123 #> 382         123 #> 383         123 #> 384         123 #> 385         123 #> 386         123 #> 387         123 #> 388         123 #> 389         123 #> 390         123 #> 391         123 #> 392         123 #> 393         123 #> 394         123 #> 395         123 #> 396         123 #> 397         123 #> 398         123 #> 399         123 #> 400         123 #> 401         123 #> 402         123 #> 403         123 #> 404         123 #> 405         123 #> 406         123 #> 407         123 #> 408         123 #> 409         123 #> 410         123 #> 411         123 #> 412         123 #> 413         123 #> 414         123 #> 415         123 #> 416         123 #> 417         123 #> 418         123 #> 419         123 #> 420         123 #> 421         123 #> 422         123 #> 423         123 #> 424         123 #> 425         123 #> 426         123 #> 427         123 #> 428         123 #> 429         123 #> 430         123 #> 431         123 #> 432         123 #> 433         123 #> 434         123 #> 435         123 #> 436         123 #> 437         123 #> 438         123 #> 439         123 #> 440         123 #> 441         123 #> 442         123 #> 443         123 #> 444         123 #> 445         123 #> 446         123 #> 447         123 #> 448         123 #> 449         123 #> 450         123 #> 451         123 #> 452         123 #> 453         123 #> 454         123 #> 455         123 #> 456         123 #> 457         123 #> 458         123 #> 459         123 #> 460         123 #> 461         123 #> 462         123 #> 463         123 #> 464         123 #> 465         123 #> 466         123 #> 467         123 #> 468         123 #> 469         123 #> 470         123 #> 471         123 #> 472         123 #> 473         123 #> 474         123 #> 475         123 #> 476         123 #> 477         123 #> 478         123 #> 479         123 #> 480         123 #> 481         123 #> 482         123 #> 483         123 #> 484         123 #> 485         123 #> 486         123 #> 487         123 #> 488         123 #> 489         123 #> 490         123 #> 491         123 #> 492         123 #> 493         123 #> 494         123 #> 495         123 #> 496         123 #> 497         123 #> 498         123 #> 499         123 #> 500         123 #> 501         123 #> 502         123 #> 503         123 #> 504         123 #> 505         123 #> 506         123 #> 507         123 #> 508         123 #> 509         123 #> 510         123 #> 511         123 #> 512         123 #> 513         123 #> 514         123 #> 515         123 #> 516         123 #> 517         123 #> 518         123 #> 519         123 #> 520         123 #> 521         123 #> 522         123 #> 523         123 #> 524         123 #> 525         123 #> 526         123 #> 527         123 #> 528         123 #> 529         123 #> 530         123 #> 531         123 #> 532         123 #> 533         123 #> 534         123 #> 535         123 #> 536         123 #> 537         123 #> 538         123 #> 539         123 #> 540         123 #> 541         123 #> 542         123 #> 543         123 #> 544         123 #> 545         123 #> 546         123 #> 547         123 #> 548         123 #> 549         123 #> 550         123 #> 551         123 #> 552         123 #> 553         123 #> 554         123 #> 555         123 #> 556         123 #> 557         123 #> 558         123 #> 559         123 #> 560         123 #> 561         123 #> 562         123 #> 563         123 #> 564         123 #> 565         123 #> 566         123 #> 567         123 #> 568         123 #> 569         123 #> 570         123 #> 571         123 #> 572         123 #> 573         123 #> 574         123 #> 575         123 #> 576         123 #> 577         123 #> 578         123 #> 579         123 #> 580         123 #> 581         123 #> 582         123 #> 583         123 #> 584         123 #> 585         123 #> 586         123 #> 587         123 #> 588         123 #> 589         123 #> 590         123 #> 591         123 #> 592         123 #> 593         123 #> 594         123 #> 595         123 #> 596         123 #> 597         123 #> 598         123 #> 599         123 #> 600         123 #> 601         123 #> 602         123 #> 603         123 #> 604         123 #> 605         123 #> 606         123 #> 607         123 #> 608         123 #> 609         123 #> 610         123 #> 611         123 #> 612         123 #> 613         123 #> 614         123 #> 615         123 #> 616         123 #> 617         123 #> 618         123 #> 619         123 #> 620         123 #> 621         123 #> 622         123 #> 623         123 #> 624         123 #> 625         123 #> 626         123 #> 627         123 #> 628         123 #> 629         123 #> 630         123 #> 631         123 #> 632         123 #> 633         123 #> 634         123 #> 635         123 #> 636         123 #> 637         123 #> 638         123 #> 639         123 #> 640         123 #> 641         123 #> 642         123 #> 643         123 #> 644         123 #> 645         123 #> 646         123 #> 647         123 #> 648         123 #> 649         123 #> 650         123 #> 651         123 #> 652         123 #> 653         123 #> 654         123 #> 655         123 #> 656         123 #> 657         123 #> 658         123 #> 659         123 #> 660         123 #> 661         123 #> 662         123 #> 663         123 #> 664         123 #> 665         123 #> 666         123 #> 667         123 #> 668         123 #> 669         123 #> 670         123 #> 671         123 #> 672         123 #> 673         123 #> 674         123 #> 675         123 #> 676         123 #> 677         123 #> 678         123 #> 679         123 #> 680         123 #> 681         123 #> 682         123 #> 683         123 #> 684         123 #> 685         123 #> 686         123 #> 687         123 #> 688         123 #> 689         123 #> 690         123 #> 691         123 #> 692         123 #> 693         123 #> 694         123 #> 695         123 #> 696         123 #> 697         123 #> 698         123 #> 699         123 #> 700         123 #> 701         123 #> 702         123 #> 703         123 #> 704         123 #> 705         123 #> 706         123 #> 707         123 #> 708         123 #> 709         123 #> 710         123 #> 711         123 #> 712         123 #> 713         123 #> 714         123 #> 715         123 #> 716         123 #> 717         123 #> 718         123 #> 719         123 #> 720         123 #> 721         123 #> 722         123 #> 723         123 #> 724         123 #> 725         123 #> 726         123 #> 727         123 #> 728         123 #> 729         123 #> 730         123 #> 731         123 #> 732         123 #> 733         123 #> 734         123 #> 735         123 #> 736         123 #> 737         123 #> 738         123 #> 739         123 #> 740         123 #> 741         123 #> 742         123 #> 743         123 #> 744         123 #> 745         123 #> 746         123 #> 747         123 #> 748         123 #> 749         123 #> 750         123 #> 751         123 #> 752         123 #> 753         123 #> 754         123 #> 755         123 #> 756         123 #> 757         123 #> 758         123 #> 759         123 #> 760         123 #> 761         123 #> 762         123 #> 763         123 #> 764         123 #> 765         123 #> 766         123 #> 767         123 #> 768         123 #> 769         123 #> 770         123 #> 771         123 #> 772         123 #> 773         123 #> 774         123 #> 775         123 #> 776         123 #> 777         123 #> 778         123 #> 779         123 #> 780         123 #> 781         123 #> 782         123 #> 783         123 #> 784         123 #> 785         123 #> 786         123 #> 787         123 #> 788         123 #> 789         123 #> 790         123 #> 791         123 #> 792         123 #> 793         123 #> 794         123 #> 795         123 #> 796         123 #> 797         123 #> 798         123 #> 799         123 #> 800         123 #> 801         123 #> 802         123 #> 803         123 #> 804         123 #> 805         123 #> 806         123 #> 807         123 #> 808         123 #> 809         123 #> 810         123 #> 811         123 #> 812         123 #> 813         123 #> 814         123 #> 815         123 #> 816         123 #> 817         123 #> 818         123 #> 819         123 #> 820         123 #> 821         123 #> 822         123 #> 823         123 #> 824         123 #> 825         123 #> 826         123 #> 827         123 #> 828         123 #> 829         123 #> 830         123 #> 831         123 #> 832         123 #> 833         123 #> 834         123 #> 835         123 #> 836         123 #> 837         123 #> 838         123 #> 839         123 #> 840         123 #> 841         123 #> 842         123 #> 843         123 #> 844         123 #> 845         123 #> 846         123 #> 847         123 #> 848         123 #> 849         123 #> 850         123 #> 851         123 #> 852         123 #> 853         123 #> 854         123 #> 855         123 #> 856         123 #> 857         123 #> 858         123 #> 859         123 #> 860         123 #> 861         123 #> 862         123 #> 863         123 #> 864         123 #> 865         123 #> 866         123 #> 867         123 #> Power curve generation captured the following warning/error messages: #> Function   | Type | N | Message #> Evaluation | Warn | 1 | Message: 'skpr: NA indicates not enough degrees of freedom to estimate power for those terms.' if(skpr:::run_documentation()) { #Add multiple effect sizes calculate_power_curves(trials=seq(10,60,by=1),                       candidateset = cand_set,                       model = ~.*.,                       alpha = 0.05,                       effectsize = c(1,2),                       eval_function = \"eval_design\") }  #>                parameter            type      power trials effectsize #> 18           (Intercept)    effect.power 0.09280916     11          1 #> 19             brew_temp    effect.power 0.09280916     11          1 #> 20              altitude    effect.power 0.09280916     11          1 #> 21              bean_sun    effect.power 0.06447520     11          1 #> 22    brew_temp:altitude    effect.power 0.09280916     11          1 #> 23    brew_temp:bean_sun    effect.power 0.06447520     11          1 #> 24     altitude:bean_sun    effect.power 0.06447520     11          1 #> 25           (Intercept) parameter.power 0.09280916     11          1 #> 26             brew_temp parameter.power 0.09280916     11          1 #> 27              altitude parameter.power 0.09280916     11          1 #> 28             bean_sun1 parameter.power 0.06757424     11          1 #> 29             bean_sun2 parameter.power 0.07717846     11          1 #> 30    brew_temp:altitude parameter.power 0.09280916     11          1 #> 31   brew_temp:bean_sun1 parameter.power 0.06757424     11          1 #> 32   brew_temp:bean_sun2 parameter.power 0.07717846     11          1 #> 33    altitude:bean_sun1 parameter.power 0.06757424     11          1 #> 34    altitude:bean_sun2 parameter.power 0.07717846     11          1 #> 35           (Intercept)    effect.power 0.17925539     12          1 #> 36             brew_temp    effect.power 0.17925539     12          1 #> 37              altitude    effect.power 0.17925539     12          1 #> 38              bean_sun    effect.power 0.09633205     12          1 #> 39    brew_temp:altitude    effect.power 0.17925539     12          1 #> 40    brew_temp:bean_sun    effect.power 0.09633205     12          1 #> 41     altitude:bean_sun    effect.power 0.09633205     12          1 #> 42           (Intercept) parameter.power 0.17925539     12          1 #> 43             brew_temp parameter.power 0.17925539     12          1 #> 44              altitude parameter.power 0.17925539     12          1 #> 45             bean_sun1 parameter.power 0.11698959     12          1 #> 46             bean_sun2 parameter.power 0.11698959     12          1 #> 47    brew_temp:altitude parameter.power 0.17925539     12          1 #> 48   brew_temp:bean_sun1 parameter.power 0.11698959     12          1 #> 49   brew_temp:bean_sun2 parameter.power 0.11698959     12          1 #> 50    altitude:bean_sun1 parameter.power 0.11698959     12          1 #> 51    altitude:bean_sun2 parameter.power 0.11698959     12          1 #> 52           (Intercept)    effect.power 0.23980153     13          1 #> 53             brew_temp    effect.power 0.23980153     13          1 #> 54              altitude    effect.power 0.23980153     13          1 #> 55              bean_sun    effect.power 0.11673369     13          1 #> 56    brew_temp:altitude    effect.power 0.23980153     13          1 #> 57    brew_temp:bean_sun    effect.power 0.11673369     13          1 #> 58     altitude:bean_sun    effect.power 0.11673369     13          1 #> 59           (Intercept) parameter.power 0.23980153     13          1 #> 60             brew_temp parameter.power 0.23980153     13          1 #> 61              altitude parameter.power 0.23980153     13          1 #> 62             bean_sun1 parameter.power 0.14393244     13          1 #> 63             bean_sun2 parameter.power 0.14393244     13          1 #> 64    brew_temp:altitude parameter.power 0.23980153     13          1 #> 65   brew_temp:bean_sun1 parameter.power 0.14393244     13          1 #> 66   brew_temp:bean_sun2 parameter.power 0.14393244     13          1 #> 67    altitude:bean_sun1 parameter.power 0.14393244     13          1 #> 68    altitude:bean_sun2 parameter.power 0.14393244     13          1 #> 69           (Intercept)    effect.power 0.28907638     14          1 #> 70             brew_temp    effect.power 0.28698042     14          1 #> 71              altitude    effect.power 0.28907638     14          1 #> 72              bean_sun    effect.power 0.13904907     14          1 #> 73    brew_temp:altitude    effect.power 0.28698042     14          1 #> 74    brew_temp:bean_sun    effect.power 0.13911462     14          1 #> 75     altitude:bean_sun    effect.power 0.13904907     14          1 #> 76           (Intercept) parameter.power 0.28907638     14          1 #> 77             brew_temp parameter.power 0.28698042     14          1 #> 78              altitude parameter.power 0.28907638     14          1 #> 79             bean_sun1 parameter.power 0.16426949     14          1 #> 80             bean_sun2 parameter.power 0.17229035     14          1 #> 81    brew_temp:altitude parameter.power 0.28698042     14          1 #> 82   brew_temp:bean_sun1 parameter.power 0.16377155     14          1 #> 83   brew_temp:bean_sun2 parameter.power 0.17344445     14          1 #> 84    altitude:bean_sun1 parameter.power 0.16426949     14          1 #> 85    altitude:bean_sun2 parameter.power 0.17229035     14          1 #> 86           (Intercept)    effect.power 0.32970877     15          1 #> 87             brew_temp    effect.power 0.32970877     15          1 #> 88              altitude    effect.power 0.32970877     15          1 #> 89              bean_sun    effect.power 0.15997755     15          1 #> 90    brew_temp:altitude    effect.power 0.32483734     15          1 #> 91    brew_temp:bean_sun    effect.power 0.16158936     15          1 #> 92     altitude:bean_sun    effect.power 0.15997755     15          1 #> 93           (Intercept) parameter.power 0.32970877     15          1 #> 94             brew_temp parameter.power 0.32970877     15          1 #> 95              altitude parameter.power 0.32970877     15          1 #> 96             bean_sun1 parameter.power 0.19043010     15          1 #> 97             bean_sun2 parameter.power 0.18849519     15          1 #> 98    brew_temp:altitude parameter.power 0.32483734     15          1 #> 99   brew_temp:bean_sun1 parameter.power 0.19043010     15          1 #> 100  brew_temp:bean_sun2 parameter.power 0.19043010     15          1 #> 101   altitude:bean_sun1 parameter.power 0.18849519     15          1 #> 102   altitude:bean_sun2 parameter.power 0.19043010     15          1 #> 103          (Intercept)    effect.power 0.36313816     16          1 #> 104            brew_temp    effect.power 0.36313816     16          1 #> 105             altitude    effect.power 0.36044528     16          1 #> 106             bean_sun    effect.power 0.17129841     16          1 #> 107   brew_temp:altitude    effect.power 0.36044528     16          1 #> 108   brew_temp:bean_sun    effect.power 0.17129841     16          1 #> 109    altitude:bean_sun    effect.power 0.17300427     16          1 #> 110          (Intercept) parameter.power 0.36313816     16          1 #> 111            brew_temp parameter.power 0.36313816     16          1 #> 112             altitude parameter.power 0.36044528     16          1 #> 113            bean_sun1 parameter.power 0.20302702     16          1 #> 114            bean_sun2 parameter.power 0.20302702     16          1 #> 115   brew_temp:altitude parameter.power 0.36044528     16          1 #> 116  brew_temp:bean_sun1 parameter.power 0.20302702     16          1 #> 117  brew_temp:bean_sun2 parameter.power 0.20302702     16          1 #> 118   altitude:bean_sun1 parameter.power 0.20689979     16          1 #> 119   altitude:bean_sun2 parameter.power 0.20689979     16          1 #> 120          (Intercept)    effect.power 0.39216753     17          1 #> 121            brew_temp    effect.power 0.39615524     17          1 #> 122             altitude    effect.power 0.40319351     17          1 #> 123             bean_sun    effect.power 0.19133726     17          1 #> 124   brew_temp:altitude    effect.power 0.39216753     17          1 #> 125   brew_temp:bean_sun    effect.power 0.19124473     17          1 #> 126    altitude:bean_sun    effect.power 0.19447109     17          1 #> 127          (Intercept) parameter.power 0.39216753     17          1 #> 128            brew_temp parameter.power 0.39615524     17          1 #> 129             altitude parameter.power 0.40319351     17          1 #> 130            bean_sun1 parameter.power 0.21535581     17          1 #> 131            bean_sun2 parameter.power 0.22759644     17          1 #> 132   brew_temp:altitude parameter.power 0.39216753     17          1 #> 133  brew_temp:bean_sun1 parameter.power 0.21895474     17          1 #> 134  brew_temp:bean_sun2 parameter.power 0.22873737     17          1 #> 135   altitude:bean_sun1 parameter.power 0.21549690     17          1 #> 136   altitude:bean_sun2 parameter.power 0.23431344     17          1 #> 137          (Intercept)    effect.power 0.42105194     18          1 #> 138            brew_temp    effect.power 0.42963908     18          1 #> 139             altitude    effect.power 0.42963908     18          1 #> 140             bean_sun    effect.power 0.21106798     18          1 #> 141   brew_temp:altitude    effect.power 0.42105194     18          1 #> 142   brew_temp:bean_sun    effect.power 0.21811522     18          1 #> 143    altitude:bean_sun    effect.power 0.21782628     18          1 #> 144          (Intercept) parameter.power 0.42105194     18          1 #> 145            brew_temp parameter.power 0.42963908     18          1 #> 146             altitude parameter.power 0.42963908     18          1 #> 147            bean_sun1 parameter.power 0.23900042     18          1 #> 148            bean_sun2 parameter.power 0.23900042     18          1 #> 149   brew_temp:altitude parameter.power 0.42105194     18          1 #> 150  brew_temp:bean_sun1 parameter.power 0.25698617     18          1 #> 151  brew_temp:bean_sun2 parameter.power 0.24138229     18          1 #> 152   altitude:bean_sun1 parameter.power 0.24138229     18          1 #> 153   altitude:bean_sun2 parameter.power 0.24888917     18          1 #> 154          (Intercept)    effect.power 0.45877832     19          1 #> 155            brew_temp    effect.power 0.45425904     19          1 #> 156             altitude    effect.power 0.46999930     19          1 #> 157             bean_sun    effect.power 0.22564019     19          1 #> 158   brew_temp:altitude    effect.power 0.45425904     19          1 #> 159   brew_temp:bean_sun    effect.power 0.21816729     19          1 #> 160    altitude:bean_sun    effect.power 0.22539359     19          1 #> 161          (Intercept) parameter.power 0.45877832     19          1 #> 162            brew_temp parameter.power 0.45425904     19          1 #> 163             altitude parameter.power 0.46999930     19          1 #> 164            bean_sun1 parameter.power 0.26531559     19          1 #> 165            bean_sun2 parameter.power 0.25207002     19          1 #> 166   brew_temp:altitude parameter.power 0.45425904     19          1 #> 167  brew_temp:bean_sun1 parameter.power 0.25085559     19          1 #> 168  brew_temp:bean_sun2 parameter.power 0.25085559     19          1 #> 169   altitude:bean_sun1 parameter.power 0.25504325     19          1 #> 170   altitude:bean_sun2 parameter.power 0.25888040     19          1 #> 171          (Intercept)    effect.power 0.48563889     20          1 #> 172            brew_temp    effect.power 0.48563889     20          1 #> 173             altitude    effect.power 0.48563889     20          1 #> 174             bean_sun    effect.power 0.24470624     20          1 #> 175   brew_temp:altitude    effect.power 0.48563889     20          1 #> 176   brew_temp:bean_sun    effect.power 0.24470624     20          1 #> 177    altitude:bean_sun    effect.power 0.25837891     20          1 #> 178          (Intercept) parameter.power 0.48563889     20          1 #> 179            brew_temp parameter.power 0.48563889     20          1 #> 180             altitude parameter.power 0.48563889     20          1 #> 181            bean_sun1 parameter.power 0.26156802     20          1 #> 182            bean_sun2 parameter.power 0.28835609     20          1 #> 183   brew_temp:altitude parameter.power 0.48563889     20          1 #> 184  brew_temp:bean_sun1 parameter.power 0.26156802     20          1 #> 185  brew_temp:bean_sun2 parameter.power 0.28835609     20          1 #> 186   altitude:bean_sun1 parameter.power 0.28080811     20          1 #> 187   altitude:bean_sun2 parameter.power 0.29404214     20          1 #> 188          (Intercept)    effect.power 0.51537013     21          1 #> 189            brew_temp    effect.power 0.51537013     21          1 #> 190             altitude    effect.power 0.51537013     21          1 #> 191             bean_sun    effect.power 0.27767961     21          1 #> 192   brew_temp:altitude    effect.power 0.51537013     21          1 #> 193   brew_temp:bean_sun    effect.power 0.27767961     21          1 #> 194    altitude:bean_sun    effect.power 0.27767961     21          1 #> 195          (Intercept) parameter.power 0.51537013     21          1 #> 196            brew_temp parameter.power 0.51537013     21          1 #> 197             altitude parameter.power 0.51537013     21          1 #> 198            bean_sun1 parameter.power 0.30342999     21          1 #> 199            bean_sun2 parameter.power 0.30342999     21          1 #> 200   brew_temp:altitude parameter.power 0.51537013     21          1 #> 201  brew_temp:bean_sun1 parameter.power 0.30342999     21          1 #> 202  brew_temp:bean_sun2 parameter.power 0.30342999     21          1 #> 203   altitude:bean_sun1 parameter.power 0.30342999     21          1 #> 204   altitude:bean_sun2 parameter.power 0.30342999     21          1 #> 205          (Intercept)    effect.power 0.55423625     22          1 #> 206            brew_temp    effect.power 0.55423625     22          1 #> 207             altitude    effect.power 0.55423625     22          1 #> 208             bean_sun    effect.power 0.28318633     22          1 #> 209   brew_temp:altitude    effect.power 0.55423625     22          1 #> 210   brew_temp:bean_sun    effect.power 0.28318633     22          1 #> 211    altitude:bean_sun    effect.power 0.28318633     22          1 #> 212          (Intercept) parameter.power 0.55423625     22          1 #> 213            brew_temp parameter.power 0.55423625     22          1 #> 214             altitude parameter.power 0.55423625     22          1 #> 215            bean_sun1 parameter.power 0.31402002     22          1 #> 216            bean_sun2 parameter.power 0.31402002     22          1 #> 217   brew_temp:altitude parameter.power 0.55423625     22          1 #> 218  brew_temp:bean_sun1 parameter.power 0.31402002     22          1 #> 219  brew_temp:bean_sun2 parameter.power 0.31402002     22          1 #> 220   altitude:bean_sun1 parameter.power 0.31402002     22          1 #> 221   altitude:bean_sun2 parameter.power 0.31402002     22          1 #> 222          (Intercept)    effect.power 0.59089727     23          1 #> 223            brew_temp    effect.power 0.59089727     23          1 #> 224             altitude    effect.power 0.59089727     23          1 #> 225             bean_sun    effect.power 0.31009774     23          1 #> 226   brew_temp:altitude    effect.power 0.59089727     23          1 #> 227   brew_temp:bean_sun    effect.power 0.31009774     23          1 #> 228    altitude:bean_sun    effect.power 0.31009774     23          1 #> 229          (Intercept) parameter.power 0.59089727     23          1 #> 230            brew_temp parameter.power 0.59089727     23          1 #> 231             altitude parameter.power 0.59089727     23          1 #> 232            bean_sun1 parameter.power 0.32349934     23          1 #> 233            bean_sun2 parameter.power 0.35099761     23          1 #> 234   brew_temp:altitude parameter.power 0.59089727     23          1 #> 235  brew_temp:bean_sun1 parameter.power 0.32349934     23          1 #> 236  brew_temp:bean_sun2 parameter.power 0.35099761     23          1 #> 237   altitude:bean_sun1 parameter.power 0.32349934     23          1 #> 238   altitude:bean_sun2 parameter.power 0.35099761     23          1 #> 239          (Intercept)    effect.power 0.62533027     24          1 #> 240            brew_temp    effect.power 0.62533027     24          1 #> 241             altitude    effect.power 0.62533027     24          1 #> 242             bean_sun    effect.power 0.34339118     24          1 #> 243   brew_temp:altitude    effect.power 0.62533027     24          1 #> 244   brew_temp:bean_sun    effect.power 0.34339118     24          1 #> 245    altitude:bean_sun    effect.power 0.34339118     24          1 #> 246          (Intercept) parameter.power 0.62533027     24          1 #> 247            brew_temp parameter.power 0.62533027     24          1 #> 248             altitude parameter.power 0.62533027     24          1 #> 249            bean_sun1 parameter.power 0.36472520     24          1 #> 250            bean_sun2 parameter.power 0.36472520     24          1 #> 251   brew_temp:altitude parameter.power 0.62533027     24          1 #> 252  brew_temp:bean_sun1 parameter.power 0.36472520     24          1 #> 253  brew_temp:bean_sun2 parameter.power 0.36472520     24          1 #> 254   altitude:bean_sun1 parameter.power 0.36472520     24          1 #> 255   altitude:bean_sun2 parameter.power 0.36472520     24          1 #> 256          (Intercept)    effect.power 0.64253443     25          1 #> 257            brew_temp    effect.power 0.64253443     25          1 #> 258             altitude    effect.power 0.64253443     25          1 #> 259             bean_sun    effect.power 0.34777951     25          1 #> 260   brew_temp:altitude    effect.power 0.64253443     25          1 #> 261   brew_temp:bean_sun    effect.power 0.34777951     25          1 #> 262    altitude:bean_sun    effect.power 0.34777951     25          1 #> 263          (Intercept) parameter.power 0.64253443     25          1 #> 264            brew_temp parameter.power 0.64253443     25          1 #> 265             altitude parameter.power 0.64253443     25          1 #> 266            bean_sun1 parameter.power 0.37220113     25          1 #> 267            bean_sun2 parameter.power 0.37220113     25          1 #> 268   brew_temp:altitude parameter.power 0.64253443     25          1 #> 269  brew_temp:bean_sun1 parameter.power 0.37220113     25          1 #> 270  brew_temp:bean_sun2 parameter.power 0.37220113     25          1 #> 271   altitude:bean_sun1 parameter.power 0.37220113     25          1 #> 272   altitude:bean_sun2 parameter.power 0.37220113     25          1 #> 273          (Intercept)    effect.power 0.66045936     26          1 #> 274            brew_temp    effect.power 0.65886502     26          1 #> 275             altitude    effect.power 0.66045936     26          1 #> 276             bean_sun    effect.power 0.36629224     26          1 #> 277   brew_temp:altitude    effect.power 0.65886502     26          1 #> 278   brew_temp:bean_sun    effect.power 0.36634939     26          1 #> 279    altitude:bean_sun    effect.power 0.36629224     26          1 #> 280          (Intercept) parameter.power 0.66045936     26          1 #> 281            brew_temp parameter.power 0.65886502     26          1 #> 282             altitude parameter.power 0.66045936     26          1 #> 283            bean_sun1 parameter.power 0.37979131     26          1 #> 284            bean_sun2 parameter.power 0.39375325     26          1 #> 285   brew_temp:altitude parameter.power 0.65886502     26          1 #> 286  brew_temp:bean_sun1 parameter.power 0.37923225     26          1 #> 287  brew_temp:bean_sun2 parameter.power 0.39496586     26          1 #> 288   altitude:bean_sun1 parameter.power 0.37979131     26          1 #> 289   altitude:bean_sun2 parameter.power 0.39375325     26          1 #> 290          (Intercept)    effect.power 0.67759329     27          1 #> 291            brew_temp    effect.power 0.67759329     27          1 #> 292             altitude    effect.power 0.67759329     27          1 #> 293             bean_sun    effect.power 0.38462757     27          1 #> 294   brew_temp:altitude    effect.power 0.67440003     27          1 #> 295   brew_temp:bean_sun    effect.power 0.38462757     27          1 #> 296    altitude:bean_sun    effect.power 0.38651637     27          1 #> 297          (Intercept) parameter.power 0.67759329     27          1 #> 298            brew_temp parameter.power 0.67759329     27          1 #> 299             altitude parameter.power 0.67759329     27          1 #> 300            bean_sun1 parameter.power 0.40055246     27          1 #> 301            bean_sun2 parameter.power 0.40237505     27          1 #> 302   brew_temp:altitude parameter.power 0.67440003     27          1 #> 303  brew_temp:bean_sun1 parameter.power 0.40237505     27          1 #> 304  brew_temp:bean_sun2 parameter.power 0.40055246     27          1 #> 305   altitude:bean_sun1 parameter.power 0.40237505     27          1 #> 306   altitude:bean_sun2 parameter.power 0.40237505     27          1 #> 307          (Intercept)    effect.power 0.69663495     28          1 #> 308            brew_temp    effect.power 0.69153191     28          1 #> 309             altitude    effect.power 0.69312095     28          1 #> 310             bean_sun    effect.power 0.38807288     28          1 #> 311   brew_temp:altitude    effect.power 0.69153191     28          1 #> 312   brew_temp:bean_sun    effect.power 0.38990256     28          1 #> 313    altitude:bean_sun    effect.power 0.38805572     28          1 #> 314          (Intercept) parameter.power 0.69663495     28          1 #> 315            brew_temp parameter.power 0.69153191     28          1 #> 316             altitude parameter.power 0.69312095     28          1 #> 317            bean_sun1 parameter.power 0.40782115     28          1 #> 318            bean_sun2 parameter.power 0.41184588     28          1 #> 319   brew_temp:altitude parameter.power 0.69153191     28          1 #> 320  brew_temp:bean_sun1 parameter.power 0.40970134     28          1 #> 321  brew_temp:bean_sun2 parameter.power 0.40970134     28          1 #> 322   altitude:bean_sun1 parameter.power 0.40848626     28          1 #> 323   altitude:bean_sun2 parameter.power 0.40848626     28          1 #> 324          (Intercept)    effect.power 0.70782823     29          1 #> 325            brew_temp    effect.power 0.70782823     29          1 #> 326             altitude    effect.power 0.70782823     29          1 #> 327             bean_sun    effect.power 0.40776378     29          1 #> 328   brew_temp:altitude    effect.power 0.70782823     29          1 #> 329   brew_temp:bean_sun    effect.power 0.40776378     29          1 #> 330    altitude:bean_sun    effect.power 0.41481931     29          1 #> 331          (Intercept) parameter.power 0.70782823     29          1 #> 332            brew_temp parameter.power 0.70782823     29          1 #> 333             altitude parameter.power 0.70782823     29          1 #> 334            bean_sun1 parameter.power 0.41604089     29          1 #> 335            bean_sun2 parameter.power 0.43161583     29          1 #> 336   brew_temp:altitude parameter.power 0.70782823     29          1 #> 337  brew_temp:bean_sun1 parameter.power 0.41604089     29          1 #> 338  brew_temp:bean_sun2 parameter.power 0.43161583     29          1 #> 339   altitude:bean_sun1 parameter.power 0.42008026     29          1 #> 340   altitude:bean_sun2 parameter.power 0.44336035     29          1 #> 341          (Intercept)    effect.power 0.72713449     30          1 #> 342            brew_temp    effect.power 0.72713449     30          1 #> 343             altitude    effect.power 0.72333320     30          1 #> 344             bean_sun    effect.power 0.44269129     30          1 #> 345   brew_temp:altitude    effect.power 0.72333320     30          1 #> 346   brew_temp:bean_sun    effect.power 0.42721421     30          1 #> 347    altitude:bean_sun    effect.power 0.42721421     30          1 #> 348          (Intercept) parameter.power 0.72713449     30          1 #> 349            brew_temp parameter.power 0.72713449     30          1 #> 350             altitude parameter.power 0.72333320     30          1 #> 351            bean_sun1 parameter.power 0.45030320     30          1 #> 352            bean_sun2 parameter.power 0.45030320     30          1 #> 353   brew_temp:altitude parameter.power 0.72333320     30          1 #> 354  brew_temp:bean_sun1 parameter.power 0.44054807     30          1 #> 355  brew_temp:bean_sun2 parameter.power 0.44054807     30          1 #> 356   altitude:bean_sun1 parameter.power 0.43896355     30          1 #> 357   altitude:bean_sun2 parameter.power 0.43896355     30          1 #> 358          (Intercept)    effect.power 0.74083267     31          1 #> 359            brew_temp    effect.power 0.74270695     31          1 #> 360             altitude    effect.power 0.74270695     31          1 #> 361             bean_sun    effect.power 0.42991256     31          1 #> 362   brew_temp:altitude    effect.power 0.74083267     31          1 #> 363   brew_temp:bean_sun    effect.power 0.43513149     31          1 #> 364    altitude:bean_sun    effect.power 0.43513149     31          1 #> 365          (Intercept) parameter.power 0.74083267     31          1 #> 366            brew_temp parameter.power 0.74270695     31          1 #> 367             altitude parameter.power 0.74270695     31          1 #> 368            bean_sun1 parameter.power 0.44713092     31          1 #> 369            bean_sun2 parameter.power 0.44713092     31          1 #> 370   brew_temp:altitude parameter.power 0.74083267     31          1 #> 371  brew_temp:bean_sun1 parameter.power 0.44791870     31          1 #> 372  brew_temp:bean_sun2 parameter.power 0.45568006     31          1 #> 373   altitude:bean_sun1 parameter.power 0.45568006     31          1 #> 374   altitude:bean_sun2 parameter.power 0.44791870     31          1 #> 375          (Intercept)    effect.power 0.75965148     32          1 #> 376            brew_temp    effect.power 0.76377259     32          1 #> 377             altitude    effect.power 0.75737182     32          1 #> 378             bean_sun    effect.power 0.45397055     32          1 #> 379   brew_temp:altitude    effect.power 0.75737182     32          1 #> 380   brew_temp:bean_sun    effect.power 0.46261148     32          1 #> 381    altitude:bean_sun    effect.power 0.45409791     32          1 #> 382          (Intercept) parameter.power 0.75965148     32          1 #> 383            brew_temp parameter.power 0.76377259     32          1 #> 384             altitude parameter.power 0.75737182     32          1 #> 385            bean_sun1 parameter.power 0.45587683     32          1 #> 386            bean_sun2 parameter.power 0.47561335     32          1 #> 387   brew_temp:altitude parameter.power 0.75737182     32          1 #> 388  brew_temp:bean_sun1 parameter.power 0.46297202     32          1 #> 389  brew_temp:bean_sun2 parameter.power 0.48040973     32          1 #> 390   altitude:bean_sun1 parameter.power 0.45490851     32          1 #> 391   altitude:bean_sun2 parameter.power 0.47773343     32          1 #> 392          (Intercept)    effect.power 0.77747458     33          1 #> 393            brew_temp    effect.power 0.77299047     33          1 #> 394             altitude    effect.power 0.77747458     33          1 #> 395             bean_sun    effect.power 0.48110251     33          1 #> 396   brew_temp:altitude    effect.power 0.77299047     33          1 #> 397   brew_temp:bean_sun    effect.power 0.48110251     33          1 #> 398    altitude:bean_sun    effect.power 0.48110251     33          1 #> 399          (Intercept) parameter.power 0.77747458     33          1 #> 400            brew_temp parameter.power 0.77299047     33          1 #> 401             altitude parameter.power 0.77747458     33          1 #> 402            bean_sun1 parameter.power 0.48631517     33          1 #> 403            bean_sun2 parameter.power 0.48631517     33          1 #> 404   brew_temp:altitude parameter.power 0.77299047     33          1 #> 405  brew_temp:bean_sun1 parameter.power 0.48737893     33          1 #> 406  brew_temp:bean_sun2 parameter.power 0.48737893     33          1 #> 407   altitude:bean_sun1 parameter.power 0.48631517     33          1 #> 408   altitude:bean_sun2 parameter.power 0.48631517     33          1 #> 409          (Intercept)    effect.power 0.79311087     34          1 #> 410            brew_temp    effect.power 0.79092792     34          1 #> 411             altitude    effect.power 0.79311087     34          1 #> 412             bean_sun    effect.power 0.48009226     34          1 #> 413   brew_temp:altitude    effect.power 0.79092792     34          1 #> 414   brew_temp:bean_sun    effect.power 0.48335657     34          1 #> 415    altitude:bean_sun    effect.power 0.48009226     34          1 #> 416          (Intercept) parameter.power 0.79311087     34          1 #> 417            brew_temp parameter.power 0.79092792     34          1 #> 418             altitude parameter.power 0.79311087     34          1 #> 419            bean_sun1 parameter.power 0.49291513     34          1 #> 420            bean_sun2 parameter.power 0.49291513     34          1 #> 421   brew_temp:altitude parameter.power 0.79092792     34          1 #> 422  brew_temp:bean_sun1 parameter.power 0.49500840     34          1 #> 423  brew_temp:bean_sun2 parameter.power 0.49500840     34          1 #> 424   altitude:bean_sun1 parameter.power 0.49291513     34          1 #> 425   altitude:bean_sun2 parameter.power 0.49291513     34          1 #> 426          (Intercept)    effect.power 0.80764343     35          1 #> 427            brew_temp    effect.power 0.80764343     35          1 #> 428             altitude    effect.power 0.80764343     35          1 #> 429             bean_sun    effect.power 0.50644848     35          1 #> 430   brew_temp:altitude    effect.power 0.80764343     35          1 #> 431   brew_temp:bean_sun    effect.power 0.50644848     35          1 #> 432    altitude:bean_sun    effect.power 0.50644848     35          1 #> 433          (Intercept) parameter.power 0.80764343     35          1 #> 434            brew_temp parameter.power 0.80764343     35          1 #> 435             altitude parameter.power 0.80764343     35          1 #> 436            bean_sun1 parameter.power 0.50220633     35          1 #> 437            bean_sun2 parameter.power 0.52404541     35          1 #> 438   brew_temp:altitude parameter.power 0.80764343     35          1 #> 439  brew_temp:bean_sun1 parameter.power 0.50220633     35          1 #> 440  brew_temp:bean_sun2 parameter.power 0.52404541     35          1 #> 441   altitude:bean_sun1 parameter.power 0.50220633     35          1 #> 442   altitude:bean_sun2 parameter.power 0.52404541     35          1 #> 443          (Intercept)    effect.power 0.82319570     36          1 #> 444            brew_temp    effect.power 0.82319570     36          1 #> 445             altitude    effect.power 0.82319570     36          1 #> 446             bean_sun    effect.power 0.53212341     36          1 #> 447   brew_temp:altitude    effect.power 0.82319570     36          1 #> 448   brew_temp:bean_sun    effect.power 0.53212341     36          1 #> 449    altitude:bean_sun    effect.power 0.53212341     36          1 #> 450          (Intercept) parameter.power 0.82319570     36          1 #> 451            brew_temp parameter.power 0.82319570     36          1 #> 452             altitude parameter.power 0.82319570     36          1 #> 453            bean_sun1 parameter.power 0.53298203     36          1 #> 454            bean_sun2 parameter.power 0.53298203     36          1 #> 455   brew_temp:altitude parameter.power 0.82319570     36          1 #> 456  brew_temp:bean_sun1 parameter.power 0.53298203     36          1 #> 457  brew_temp:bean_sun2 parameter.power 0.53298203     36          1 #> 458   altitude:bean_sun1 parameter.power 0.53298203     36          1 #> 459   altitude:bean_sun2 parameter.power 0.53298203     36          1 #> 460          (Intercept)    effect.power 0.83241158     37          1 #> 461            brew_temp    effect.power 0.83241158     37          1 #> 462             altitude    effect.power 0.83241158     37          1 #> 463             bean_sun    effect.power 0.53401488     37          1 #> 464   brew_temp:altitude    effect.power 0.83241158     37          1 #> 465   brew_temp:bean_sun    effect.power 0.53401488     37          1 #> 466    altitude:bean_sun    effect.power 0.53401488     37          1 #> 467          (Intercept) parameter.power 0.83241158     37          1 #> 468            brew_temp parameter.power 0.83241158     37          1 #> 469             altitude parameter.power 0.83241158     37          1 #> 470            bean_sun1 parameter.power 0.53859022     37          1 #> 471            bean_sun2 parameter.power 0.53859022     37          1 #> 472   brew_temp:altitude parameter.power 0.83241158     37          1 #> 473  brew_temp:bean_sun1 parameter.power 0.53859022     37          1 #> 474  brew_temp:bean_sun2 parameter.power 0.53859022     37          1 #> 475   altitude:bean_sun1 parameter.power 0.53859022     37          1 #> 476   altitude:bean_sun2 parameter.power 0.53859022     37          1 #> 477          (Intercept)    effect.power 0.84117705     38          1 #> 478            brew_temp    effect.power 0.84188390     38          1 #> 479             altitude    effect.power 0.84188390     38          1 #> 480             bean_sun    effect.power 0.55057934     38          1 #> 481   brew_temp:altitude    effect.power 0.84117705     38          1 #> 482   brew_temp:bean_sun    effect.power 0.55054905     38          1 #> 483    altitude:bean_sun    effect.power 0.55054905     38          1 #> 484          (Intercept) parameter.power 0.84117705     38          1 #> 485            brew_temp parameter.power 0.84188390     38          1 #> 486             altitude parameter.power 0.84188390     38          1 #> 487            bean_sun1 parameter.power 0.54400042     38          1 #> 488            bean_sun2 parameter.power 0.55861146     38          1 #> 489   brew_temp:altitude parameter.power 0.84117705     38          1 #> 490  brew_temp:bean_sun1 parameter.power 0.54439682     38          1 #> 491  brew_temp:bean_sun2 parameter.power 0.55778106     38          1 #> 492   altitude:bean_sun1 parameter.power 0.54439682     38          1 #> 493   altitude:bean_sun2 parameter.power 0.55778106     38          1 #> 494          (Intercept)    effect.power 0.84951347     39          1 #> 495            brew_temp    effect.power 0.84951347     39          1 #> 496             altitude    effect.power 0.84951347     39          1 #> 497             bean_sun    effect.power 0.56808294     39          1 #> 498   brew_temp:altitude    effect.power 0.84951347     39          1 #> 499   brew_temp:bean_sun    effect.power 0.56808294     39          1 #> 500    altitude:bean_sun    effect.power 0.56808294     39          1 #> 501          (Intercept) parameter.power 0.84951347     39          1 #> 502            brew_temp parameter.power 0.84951347     39          1 #> 503             altitude parameter.power 0.84951347     39          1 #> 504            bean_sun1 parameter.power 0.56467153     39          1 #> 505            bean_sun2 parameter.power 0.56467153     39          1 #> 506   brew_temp:altitude parameter.power 0.84951347     39          1 #> 507  brew_temp:bean_sun1 parameter.power 0.56467153     39          1 #> 508  brew_temp:bean_sun2 parameter.power 0.56467153     39          1 #> 509   altitude:bean_sun1 parameter.power 0.56467153     39          1 #> 510   altitude:bean_sun2 parameter.power 0.56467153     39          1 #> 511          (Intercept)    effect.power 0.85843167     40          1 #> 512            brew_temp    effect.power 0.85910271     40          1 #> 513             altitude    effect.power 0.85910271     40          1 #> 514             bean_sun    effect.power 0.56966013     40          1 #> 515   brew_temp:altitude    effect.power 0.85843167     40          1 #> 516   brew_temp:bean_sun    effect.power 0.56835224     40          1 #> 517    altitude:bean_sun    effect.power 0.56835224     40          1 #> 518          (Intercept) parameter.power 0.85843167     40          1 #> 519            brew_temp parameter.power 0.85910271     40          1 #> 520             altitude parameter.power 0.85910271     40          1 #> 521            bean_sun1 parameter.power 0.57123331     40          1 #> 522            bean_sun2 parameter.power 0.57123331     40          1 #> 523   brew_temp:altitude parameter.power 0.85843167     40          1 #> 524  brew_temp:bean_sun1 parameter.power 0.56909228     40          1 #> 525  brew_temp:bean_sun2 parameter.power 0.56909228     40          1 #> 526   altitude:bean_sun1 parameter.power 0.56909228     40          1 #> 527   altitude:bean_sun2 parameter.power 0.56909228     40          1 #> 528          (Intercept)    effect.power 0.87124773     41          1 #> 529            brew_temp    effect.power 0.86686495     41          1 #> 530             altitude    effect.power 0.86686495     41          1 #> 531             bean_sun    effect.power 0.58982659     41          1 #> 532   brew_temp:altitude    effect.power 0.86686495     41          1 #> 533   brew_temp:bean_sun    effect.power 0.58537150     41          1 #> 534    altitude:bean_sun    effect.power 0.58537150     41          1 #> 535          (Intercept) parameter.power 0.87124773     41          1 #> 536            brew_temp parameter.power 0.86686495     41          1 #> 537             altitude parameter.power 0.86686495     41          1 #> 538            bean_sun1 parameter.power 0.57770418     41          1 #> 539            bean_sun2 parameter.power 0.59311332     41          1 #> 540   brew_temp:altitude parameter.power 0.86686495     41          1 #> 541  brew_temp:bean_sun1 parameter.power 0.57495534     41          1 #> 542  brew_temp:bean_sun2 parameter.power 0.58896705     41          1 #> 543   altitude:bean_sun1 parameter.power 0.57495534     41          1 #> 544   altitude:bean_sun2 parameter.power 0.58896705     41          1 #> 545          (Intercept)    effect.power 0.87483652     42          1 #> 546            brew_temp    effect.power 0.87628694     42          1 #> 547             altitude    effect.power 0.87628694     42          1 #> 548             bean_sun    effect.power 0.60195631     42          1 #> 549   brew_temp:altitude    effect.power 0.87483652     42          1 #> 550   brew_temp:bean_sun    effect.power 0.60510491     42          1 #> 551    altitude:bean_sun    effect.power 0.60512681     42          1 #> 552          (Intercept) parameter.power 0.87483652     42          1 #> 553            brew_temp parameter.power 0.87628694     42          1 #> 554             altitude parameter.power 0.87628694     42          1 #> 555            bean_sun1 parameter.power 0.59462960     42          1 #> 556            bean_sun2 parameter.power 0.59462960     42          1 #> 557   brew_temp:altitude parameter.power 0.87483652     42          1 #> 558  brew_temp:bean_sun1 parameter.power 0.59851482     42          1 #> 559  brew_temp:bean_sun2 parameter.power 0.59559683     42          1 #> 560   altitude:bean_sun1 parameter.power 0.59559683     42          1 #> 561   altitude:bean_sun2 parameter.power 0.60145744     42          1 #> 562          (Intercept)    effect.power 0.88340158     43          1 #> 563            brew_temp    effect.power 0.88340158     43          1 #> 564             altitude    effect.power 0.88340158     43          1 #> 565             bean_sun    effect.power 0.60328412     43          1 #> 566   brew_temp:altitude    effect.power 0.88340158     43          1 #> 567   brew_temp:bean_sun    effect.power 0.60328412     43          1 #> 568    altitude:bean_sun    effect.power 0.61279361     43          1 #> 569          (Intercept) parameter.power 0.88340158     43          1 #> 570            brew_temp parameter.power 0.88340158     43          1 #> 571             altitude parameter.power 0.88340158     43          1 #> 572            bean_sun1 parameter.power 0.60080396     43          1 #> 573            bean_sun2 parameter.power 0.60080396     43          1 #> 574   brew_temp:altitude parameter.power 0.88340158     43          1 #> 575  brew_temp:bean_sun1 parameter.power 0.60080396     43          1 #> 576  brew_temp:bean_sun2 parameter.power 0.60080396     43          1 #> 577   altitude:bean_sun1 parameter.power 0.60827933     43          1 #> 578   altitude:bean_sun2 parameter.power 0.60827933     43          1 #> 579          (Intercept)    effect.power 0.89143160     44          1 #> 580            brew_temp    effect.power 0.89366090     44          1 #> 581             altitude    effect.power 0.89221278     44          1 #> 582             bean_sun    effect.power 0.62247859     44          1 #> 583   brew_temp:altitude    effect.power 0.89143160     44          1 #> 584   brew_temp:bean_sun    effect.power 0.62745933     44          1 #> 585    altitude:bean_sun    effect.power 0.62242967     44          1 #> 586          (Intercept) parameter.power 0.89143160     44          1 #> 587            brew_temp parameter.power 0.89366090     44          1 #> 588             altitude parameter.power 0.89221278     44          1 #> 589            bean_sun1 parameter.power 0.60675034     44          1 #> 590            bean_sun2 parameter.power 0.62448446     44          1 #> 591   brew_temp:altitude parameter.power 0.89143160     44          1 #> 592  brew_temp:bean_sun1 parameter.power 0.61141204     44          1 #> 593  brew_temp:bean_sun2 parameter.power 0.62601150     44          1 #> 594   altitude:bean_sun1 parameter.power 0.60730028     44          1 #> 595   altitude:bean_sun2 parameter.power 0.62333294     44          1 #> 596          (Intercept)    effect.power 0.90045632     45          1 #> 597            brew_temp    effect.power 0.89895516     45          1 #> 598             altitude    effect.power 0.90045632     45          1 #> 599             bean_sun    effect.power 0.64099921     45          1 #> 600   brew_temp:altitude    effect.power 0.89895516     45          1 #> 601   brew_temp:bean_sun    effect.power 0.64284244     45          1 #> 602    altitude:bean_sun    effect.power 0.64099921     45          1 #> 603          (Intercept) parameter.power 0.90045632     45          1 #> 604            brew_temp parameter.power 0.89895516     45          1 #> 605             altitude parameter.power 0.90045632     45          1 #> 606            bean_sun1 parameter.power 0.63074179     45          1 #> 607            bean_sun2 parameter.power 0.62903185     45          1 #> 608   brew_temp:altitude parameter.power 0.89895516     45          1 #> 609  brew_temp:bean_sun1 parameter.power 0.63131346     45          1 #> 610  brew_temp:bean_sun2 parameter.power 0.63131346     45          1 #> 611   altitude:bean_sun1 parameter.power 0.63074179     45          1 #> 612   altitude:bean_sun2 parameter.power 0.62903185     45          1 #> 613          (Intercept)    effect.power 0.90705830     46          1 #> 614            brew_temp    effect.power 0.90705830     46          1 #> 615             altitude    effect.power 0.90705830     46          1 #> 616             bean_sun    effect.power 0.64397124     46          1 #> 617   brew_temp:altitude    effect.power 0.90705830     46          1 #> 618   brew_temp:bean_sun    effect.power 0.64397124     46          1 #> 619    altitude:bean_sun    effect.power 0.64397124     46          1 #> 620          (Intercept) parameter.power 0.90705830     46          1 #> 621            brew_temp parameter.power 0.90705830     46          1 #> 622             altitude parameter.power 0.90705830     46          1 #> 623            bean_sun1 parameter.power 0.63704141     46          1 #> 624            bean_sun2 parameter.power 0.63704141     46          1 #> 625   brew_temp:altitude parameter.power 0.90705830     46          1 #> 626  brew_temp:bean_sun1 parameter.power 0.63704141     46          1 #> 627  brew_temp:bean_sun2 parameter.power 0.63704141     46          1 #> 628   altitude:bean_sun1 parameter.power 0.63704141     46          1 #> 629   altitude:bean_sun2 parameter.power 0.63704141     46          1 #> 630          (Intercept)    effect.power 0.91456592     47          1 #> 631            brew_temp    effect.power 0.91456592     47          1 #> 632             altitude    effect.power 0.91456592     47          1 #> 633             bean_sun    effect.power 0.66178559     47          1 #> 634   brew_temp:altitude    effect.power 0.91456592     47          1 #> 635   brew_temp:bean_sun    effect.power 0.66178559     47          1 #> 636    altitude:bean_sun    effect.power 0.66178559     47          1 #> 637          (Intercept) parameter.power 0.91456592     47          1 #> 638            brew_temp parameter.power 0.91456592     47          1 #> 639             altitude parameter.power 0.91456592     47          1 #> 640            bean_sun1 parameter.power 0.64252818     47          1 #> 641            bean_sun2 parameter.power 0.65911840     47          1 #> 642   brew_temp:altitude parameter.power 0.91456592     47          1 #> 643  brew_temp:bean_sun1 parameter.power 0.64252818     47          1 #> 644  brew_temp:bean_sun2 parameter.power 0.65911840     47          1 #> 645   altitude:bean_sun1 parameter.power 0.64252818     47          1 #> 646   altitude:bean_sun2 parameter.power 0.65911840     47          1 #> 647          (Intercept)    effect.power 0.92151562     48          1 #> 648            brew_temp    effect.power 0.92151562     48          1 #> 649             altitude    effect.power 0.92151562     48          1 #> 650             bean_sun    effect.power 0.68063060     48          1 #> 651   brew_temp:altitude    effect.power 0.92151562     48          1 #> 652   brew_temp:bean_sun    effect.power 0.68063060     48          1 #> 653    altitude:bean_sun    effect.power 0.68063060     48          1 #> 654          (Intercept) parameter.power 0.92151562     48          1 #> 655            brew_temp parameter.power 0.92151562     48          1 #> 656             altitude parameter.power 0.92151562     48          1 #> 657            bean_sun1 parameter.power 0.66541256     48          1 #> 658            bean_sun2 parameter.power 0.66541256     48          1 #> 659   brew_temp:altitude parameter.power 0.92151562     48          1 #> 660  brew_temp:bean_sun1 parameter.power 0.66541256     48          1 #> 661  brew_temp:bean_sun2 parameter.power 0.66541256     48          1 #> 662   altitude:bean_sun1 parameter.power 0.66541256     48          1 #> 663   altitude:bean_sun2 parameter.power 0.66541256     48          1 #> 664          (Intercept)    effect.power 0.92606893     49          1 #> 665            brew_temp    effect.power 0.92606893     49          1 #> 666             altitude    effect.power 0.92606893     49          1 #> 667             bean_sun    effect.power 0.68159074     49          1 #> 668   brew_temp:altitude    effect.power 0.92606893     49          1 #> 669   brew_temp:bean_sun    effect.power 0.68159074     49          1 #> 670    altitude:bean_sun    effect.power 0.68159074     49          1 #> 671          (Intercept) parameter.power 0.92606893     49          1 #> 672            brew_temp parameter.power 0.92606893     49          1 #> 673             altitude parameter.power 0.92606893     49          1 #> 674            bean_sun1 parameter.power 0.66975710     49          1 #> 675            bean_sun2 parameter.power 0.66975710     49          1 #> 676   brew_temp:altitude parameter.power 0.92606893     49          1 #> 677  brew_temp:bean_sun1 parameter.power 0.66975710     49          1 #> 678  brew_temp:bean_sun2 parameter.power 0.66975710     49          1 #> 679   altitude:bean_sun1 parameter.power 0.66975710     49          1 #> 680   altitude:bean_sun2 parameter.power 0.66975710     49          1 #> 681          (Intercept)    effect.power 0.93065613     50          1 #> 682            brew_temp    effect.power 0.93037347     50          1 #> 683             altitude    effect.power 0.93065613     50          1 #> 684             bean_sun    effect.power 0.69479981     50          1 #> 685   brew_temp:altitude    effect.power 0.93037347     50          1 #> 686   brew_temp:bean_sun    effect.power 0.69481528     50          1 #> 687    altitude:bean_sun    effect.power 0.69479981     50          1 #> 688          (Intercept) parameter.power 0.93065613     50          1 #> 689            brew_temp parameter.power 0.93037347     50          1 #> 690             altitude parameter.power 0.93065613     50          1 #> 691            bean_sun1 parameter.power 0.67423750     50          1 #> 692            bean_sun2 parameter.power 0.68540963     50          1 #> 693   brew_temp:altitude parameter.power 0.93037347     50          1 #> 694  brew_temp:bean_sun1 parameter.power 0.67397476     50          1 #> 695  brew_temp:bean_sun2 parameter.power 0.68594833     50          1 #> 696   altitude:bean_sun1 parameter.power 0.67423750     50          1 #> 697   altitude:bean_sun2 parameter.power 0.68540963     50          1 #> 698          (Intercept)    effect.power 0.93498592     51          1 #> 699            brew_temp    effect.power 0.93498592     51          1 #> 700             altitude    effect.power 0.93498592     51          1 #> 701             bean_sun    effect.power 0.70761069     51          1 #> 702   brew_temp:altitude    effect.power 0.93444180     51          1 #> 703   brew_temp:bean_sun    effect.power 0.70761069     51          1 #> 704    altitude:bean_sun    effect.power 0.70846509     51          1 #> 705          (Intercept) parameter.power 0.93498592     51          1 #> 706            brew_temp parameter.power 0.93498592     51          1 #> 707             altitude parameter.power 0.93498592     51          1 #> 708            bean_sun1 parameter.power 0.69026642     51          1 #> 709            bean_sun2 parameter.power 0.68946584     51          1 #> 710   brew_temp:altitude parameter.power 0.93444180     51          1 #> 711  brew_temp:bean_sun1 parameter.power 0.68946584     51          1 #> 712  brew_temp:bean_sun2 parameter.power 0.69026642     51          1 #> 713   altitude:bean_sun1 parameter.power 0.69026642     51          1 #> 714   altitude:bean_sun2 parameter.power 0.69026642     51          1 #> 715          (Intercept)    effect.power 0.93977209     52          1 #> 716            brew_temp    effect.power 0.93867276     52          1 #> 717             altitude    effect.power 0.93867276     52          1 #> 718             bean_sun    effect.power 0.70928436     52          1 #> 719   brew_temp:altitude    effect.power 0.93867276     52          1 #> 720   brew_temp:bean_sun    effect.power 0.70928436     52          1 #> 721    altitude:bean_sun    effect.power 0.70928436     52          1 #> 722          (Intercept) parameter.power 0.93977209     52          1 #> 723            brew_temp parameter.power 0.93867276     52          1 #> 724             altitude parameter.power 0.93867276     52          1 #> 725            bean_sun1 parameter.power 0.69486707     52          1 #> 726            bean_sun2 parameter.power 0.69486707     52          1 #> 727   brew_temp:altitude parameter.power 0.93867276     52          1 #> 728  brew_temp:bean_sun1 parameter.power 0.69458807     52          1 #> 729  brew_temp:bean_sun2 parameter.power 0.69458807     52          1 #> 730   altitude:bean_sun1 parameter.power 0.69458807     52          1 #> 731   altitude:bean_sun2 parameter.power 0.69458807     52          1 #> 732          (Intercept)    effect.power 0.94292584     53          1 #> 733            brew_temp    effect.power 0.94292584     53          1 #> 734             altitude    effect.power 0.94264730     53          1 #> 735             bean_sun    effect.power 0.72436521     53          1 #> 736   brew_temp:altitude    effect.power 0.94264730     53          1 #> 737   brew_temp:bean_sun    effect.power 0.72160021     53          1 #> 738    altitude:bean_sun    effect.power 0.72161471     53          1 #> 739          (Intercept) parameter.power 0.94292584     53          1 #> 740            brew_temp parameter.power 0.94292584     53          1 #> 741             altitude parameter.power 0.94264730     53          1 #> 742            bean_sun1 parameter.power 0.69963516     53          1 #> 743            bean_sun2 parameter.power 0.71269761     53          1 #> 744   brew_temp:altitude parameter.power 0.94264730     53          1 #> 745  brew_temp:bean_sun1 parameter.power 0.69963516     53          1 #> 746  brew_temp:bean_sun2 parameter.power 0.71010611     53          1 #> 747   altitude:bean_sun1 parameter.power 0.69851539     53          1 #> 748   altitude:bean_sun2 parameter.power 0.70980850     53          1 #> 749          (Intercept)    effect.power 0.94691230     54          1 #> 750            brew_temp    effect.power 0.94637960     54          1 #> 751             altitude    effect.power 0.94797160     54          1 #> 752             bean_sun    effect.power 0.73620256     54          1 #> 753   brew_temp:altitude    effect.power 0.94637960     54          1 #> 754   brew_temp:bean_sun    effect.power 0.73432537     54          1 #> 755    altitude:bean_sun    effect.power 0.73619998     54          1 #> 756          (Intercept) parameter.power 0.94691230     54          1 #> 757            brew_temp parameter.power 0.94637960     54          1 #> 758             altitude parameter.power 0.94797160     54          1 #> 759            bean_sun1 parameter.power 0.71466722     54          1 #> 760            bean_sun2 parameter.power 0.71643794     54          1 #> 761   brew_temp:altitude parameter.power 0.94637960     54          1 #> 762  brew_temp:bean_sun1 parameter.power 0.71407824     54          1 #> 763  brew_temp:bean_sun2 parameter.power 0.71407824     54          1 #> 764   altitude:bean_sun1 parameter.power 0.71584707     54          1 #> 765   altitude:bean_sun2 parameter.power 0.71584707     54          1 #> 766          (Intercept)    effect.power 0.95104855     55          1 #> 767            brew_temp    effect.power 0.95025925     55          1 #> 768             altitude    effect.power 0.95051297     55          1 #> 769             bean_sun    effect.power 0.73691936     55          1 #> 770   brew_temp:altitude    effect.power 0.95025925     55          1 #> 771   brew_temp:bean_sun    effect.power 0.73502700     55          1 #> 772    altitude:bean_sun    effect.power 0.73692499     55          1 #> 773          (Intercept) parameter.power 0.95104855     55          1 #> 774            brew_temp parameter.power 0.95025925     55          1 #> 775             altitude parameter.power 0.95051297     55          1 #> 776            bean_sun1 parameter.power 0.71955699     55          1 #> 777            bean_sun2 parameter.power 0.72043142     55          1 #> 778   brew_temp:altitude parameter.power 0.95025925     55          1 #> 779  brew_temp:bean_sun1 parameter.power 0.71864971     55          1 #> 780  brew_temp:bean_sun2 parameter.power 0.71864971     55          1 #> 781   altitude:bean_sun1 parameter.power 0.72166822     55          1 #> 782   altitude:bean_sun2 parameter.power 0.71894057     55          1 #> 783          (Intercept)    effect.power 0.95387505     56          1 #> 784            brew_temp    effect.power 0.95414546     56          1 #> 785             altitude    effect.power 0.95414546     56          1 #> 786             bean_sun    effect.power 0.75193990     56          1 #> 787   brew_temp:altitude    effect.power 0.95387505     56          1 #> 788   brew_temp:bean_sun    effect.power 0.74905743     56          1 #> 789    altitude:bean_sun    effect.power 0.74905743     56          1 #> 790          (Intercept) parameter.power 0.95387505     56          1 #> 791            brew_temp parameter.power 0.95414546     56          1 #> 792             altitude parameter.power 0.95414546     56          1 #> 793            bean_sun1 parameter.power 0.72673476     56          1 #> 794            bean_sun2 parameter.power 0.73719664     56          1 #> 795   brew_temp:altitude parameter.power 0.95387505     56          1 #> 796  brew_temp:bean_sun1 parameter.power 0.72339542     56          1 #> 797  brew_temp:bean_sun2 parameter.power 0.73560489     56          1 #> 798   altitude:bean_sun1 parameter.power 0.72339542     56          1 #> 799   altitude:bean_sun2 parameter.power 0.73560489     56          1 #> 800          (Intercept)    effect.power 0.95775642     57          1 #> 801            brew_temp    effect.power 0.95724332     57          1 #> 802             altitude    effect.power 0.95775642     57          1 #> 803             bean_sun    effect.power 0.76252209     57          1 #> 804   brew_temp:altitude    effect.power 0.95724332     57          1 #> 805   brew_temp:bean_sun    effect.power 0.76354531     57          1 #> 806    altitude:bean_sun    effect.power 0.76252209     57          1 #> 807          (Intercept) parameter.power 0.95775642     57          1 #> 808            brew_temp parameter.power 0.95724332     57          1 #> 809             altitude parameter.power 0.95775642     57          1 #> 810            bean_sun1 parameter.power 0.73981108     57          1 #> 811            bean_sun2 parameter.power 0.74078591     57          1 #> 812   brew_temp:altitude parameter.power 0.95724332     57          1 #> 813  brew_temp:bean_sun1 parameter.power 0.74111118     57          1 #> 814  brew_temp:bean_sun2 parameter.power 0.74111118     57          1 #> 815   altitude:bean_sun1 parameter.power 0.73981108     57          1 #> 816   altitude:bean_sun2 parameter.power 0.74078591     57          1 #> 817          (Intercept)    effect.power 0.96073882     58          1 #> 818            brew_temp    effect.power 0.96098111     58          1 #> 819             altitude    effect.power 0.96098111     58          1 #> 820             bean_sun    effect.power 0.76414464     58          1 #> 821   brew_temp:altitude    effect.power 0.96073882     58          1 #> 822   brew_temp:bean_sun    effect.power 0.76314217     58          1 #> 823    altitude:bean_sun    effect.power 0.76314217     58          1 #> 824          (Intercept) parameter.power 0.96073882     58          1 #> 825            brew_temp parameter.power 0.96098111     58          1 #> 826             altitude parameter.power 0.96098111     58          1 #> 827            bean_sun1 parameter.power 0.74531684     58          1 #> 828            bean_sun2 parameter.power 0.74531684     58          1 #> 829   brew_temp:altitude parameter.power 0.96073882     58          1 #> 830  brew_temp:bean_sun1 parameter.power 0.74467614     58          1 #> 831  brew_temp:bean_sun2 parameter.power 0.74467614     58          1 #> 832   altitude:bean_sun1 parameter.power 0.74467614     58          1 #> 833   altitude:bean_sun2 parameter.power 0.74467614     58          1 #> 834          (Intercept)    effect.power 0.96396482     59          1 #> 835            brew_temp    effect.power 0.96396482     59          1 #> 836             altitude    effect.power 0.96396482     59          1 #> 837             bean_sun    effect.power 0.77695510     59          1 #> 838   brew_temp:altitude    effect.power 0.96396482     59          1 #> 839   brew_temp:bean_sun    effect.power 0.77695510     59          1 #> 840    altitude:bean_sun    effect.power 0.77695510     59          1 #> 841          (Intercept) parameter.power 0.96396482     59          1 #> 842            brew_temp parameter.power 0.96396482     59          1 #> 843             altitude parameter.power 0.96396482     59          1 #> 844            bean_sun1 parameter.power 0.74937249     59          1 #> 845            bean_sun2 parameter.power 0.76155442     59          1 #> 846   brew_temp:altitude parameter.power 0.96396482     59          1 #> 847  brew_temp:bean_sun1 parameter.power 0.74937249     59          1 #> 848  brew_temp:bean_sun2 parameter.power 0.76155442     59          1 #> 849   altitude:bean_sun1 parameter.power 0.74937249     59          1 #> 850   altitude:bean_sun2 parameter.power 0.76155442     59          1 #> 851          (Intercept)    effect.power 0.96694033     60          1 #> 852            brew_temp    effect.power 0.96694033     60          1 #> 853             altitude    effect.power 0.96694033     60          1 #> 854             bean_sun    effect.power 0.79011675     60          1 #> 855   brew_temp:altitude    effect.power 0.96694033     60          1 #> 856   brew_temp:bean_sun    effect.power 0.79011675     60          1 #> 857    altitude:bean_sun    effect.power 0.79011675     60          1 #> 858          (Intercept) parameter.power 0.96694033     60          1 #> 859            brew_temp parameter.power 0.96694033     60          1 #> 860             altitude parameter.power 0.96694033     60          1 #> 861            bean_sun1 parameter.power 0.76599370     60          1 #> 862            bean_sun2 parameter.power 0.76599370     60          1 #> 863   brew_temp:altitude parameter.power 0.96694033     60          1 #> 864  brew_temp:bean_sun1 parameter.power 0.76599370     60          1 #> 865  brew_temp:bean_sun2 parameter.power 0.76599370     60          1 #> 866   altitude:bean_sun1 parameter.power 0.76599370     60          1 #> 867   altitude:bean_sun2 parameter.power 0.76599370     60          1 #> 885          (Intercept)    effect.power 0.17570741     11          2 #> 886            brew_temp    effect.power 0.17570741     11          2 #> 887             altitude    effect.power 0.17570741     11          2 #> 888             bean_sun    effect.power 0.09853241     11          2 #> 889   brew_temp:altitude    effect.power 0.17570741     11          2 #> 890   brew_temp:bean_sun    effect.power 0.09853241     11          2 #> 891    altitude:bean_sun    effect.power 0.09853241     11          2 #> 892          (Intercept) parameter.power 0.17570741     11          2 #> 893            brew_temp parameter.power 0.17570741     11          2 #> 894             altitude parameter.power 0.17570741     11          2 #> 895            bean_sun1 parameter.power 0.11021754     11          2 #> 896            bean_sun2 parameter.power 0.13710960     11          2 #> 897   brew_temp:altitude parameter.power 0.17570741     11          2 #> 898  brew_temp:bean_sun1 parameter.power 0.11021754     11          2 #> 899  brew_temp:bean_sun2 parameter.power 0.13710960     11          2 #> 900   altitude:bean_sun1 parameter.power 0.11021754     11          2 #> 901   altitude:bean_sun2 parameter.power 0.13710960     11          2 #> 902          (Intercept)    effect.power 0.47074943     12          2 #> 903            brew_temp    effect.power 0.47074943     12          2 #> 904             altitude    effect.power 0.47074943     12          2 #> 905             bean_sun    effect.power 0.22220579     12          2 #> 906   brew_temp:altitude    effect.power 0.47074943     12          2 #> 907   brew_temp:bean_sun    effect.power 0.22220579     12          2 #> 908    altitude:bean_sun    effect.power 0.22220579     12          2 #> 909          (Intercept) parameter.power 0.47074943     12          2 #> 910            brew_temp parameter.power 0.47074943     12          2 #> 911             altitude parameter.power 0.47074943     12          2 #> 912            bean_sun1 parameter.power 0.29092452     12          2 #> 913            bean_sun2 parameter.power 0.29092452     12          2 #> 914   brew_temp:altitude parameter.power 0.47074943     12          2 #> 915  brew_temp:bean_sun1 parameter.power 0.29092452     12          2 #> 916  brew_temp:bean_sun2 parameter.power 0.29092452     12          2 #> 917   altitude:bean_sun1 parameter.power 0.29092452     12          2 #> 918   altitude:bean_sun2 parameter.power 0.29092452     12          2 #> 919          (Intercept)    effect.power 0.66183308     13          2 #> 920            brew_temp    effect.power 0.66183308     13          2 #> 921             altitude    effect.power 0.66183308     13          2 #> 922             bean_sun    effect.power 0.31774157     13          2 #> 923   brew_temp:altitude    effect.power 0.66183308     13          2 #> 924   brew_temp:bean_sun    effect.power 0.31774157     13          2 #> 925    altitude:bean_sun    effect.power 0.31774157     13          2 #> 926          (Intercept) parameter.power 0.66183308     13          2 #> 927            brew_temp parameter.power 0.66183308     13          2 #> 928             altitude parameter.power 0.66183308     13          2 #> 929            bean_sun1 parameter.power 0.40233980     13          2 #> 930            bean_sun2 parameter.power 0.40233980     13          2 #> 931   brew_temp:altitude parameter.power 0.66183308     13          2 #> 932  brew_temp:bean_sun1 parameter.power 0.40233980     13          2 #> 933  brew_temp:bean_sun2 parameter.power 0.40233980     13          2 #> 934   altitude:bean_sun1 parameter.power 0.40233980     13          2 #> 935   altitude:bean_sun2 parameter.power 0.40233980     13          2 #> 936          (Intercept)    effect.power 0.77581981     14          2 #> 937            brew_temp    effect.power 0.77232829     14          2 #> 938             altitude    effect.power 0.77581981     14          2 #> 939             bean_sun    effect.power 0.41521614     14          2 #> 940   brew_temp:altitude    effect.power 0.77232829     14          2 #> 941   brew_temp:bean_sun    effect.power 0.41545621     14          2 #> 942    altitude:bean_sun    effect.power 0.41521614     14          2 #> 943          (Intercept) parameter.power 0.77581981     14          2 #> 944            brew_temp parameter.power 0.77232829     14          2 #> 945             altitude parameter.power 0.77581981     14          2 #> 946            bean_sun1 parameter.power 0.48015125     14          2 #> 947            bean_sun2 parameter.power 0.50506751     14          2 #> 948   brew_temp:altitude parameter.power 0.77232829     14          2 #> 949  brew_temp:bean_sun1 parameter.power 0.47857622     14          2 #> 950  brew_temp:bean_sun2 parameter.power 0.50858208     14          2 #> 951   altitude:bean_sun1 parameter.power 0.48015125     14          2 #> 952   altitude:bean_sun2 parameter.power 0.50506751     14          2 #> 953          (Intercept)    effect.power 0.84431329     15          2 #> 954            brew_temp    effect.power 0.84431329     15          2 #> 955             altitude    effect.power 0.84431329     15          2 #> 956             bean_sun    effect.power 0.49942030     15          2 #> 957   brew_temp:altitude    effect.power 0.83802513     15          2 #> 958   brew_temp:bean_sun    effect.power 0.50492276     15          2 #> 959    altitude:bean_sun    effect.power 0.49942030     15          2 #> 960          (Intercept) parameter.power 0.84431329     15          2 #> 961            brew_temp parameter.power 0.84431329     15          2 #> 962             altitude parameter.power 0.84431329     15          2 #> 963            bean_sun1 parameter.power 0.56586106     15          2 #> 964            bean_sun2 parameter.power 0.56030848     15          2 #> 965   brew_temp:altitude parameter.power 0.83802513     15          2 #> 966  brew_temp:bean_sun1 parameter.power 0.56586106     15          2 #> 967  brew_temp:bean_sun2 parameter.power 0.56586106     15          2 #> 968   altitude:bean_sun1 parameter.power 0.56030848     15          2 #> 969   altitude:bean_sun2 parameter.power 0.56586106     15          2 #> 970          (Intercept)    effect.power 0.88663985     16          2 #> 971            brew_temp    effect.power 0.88663985     16          2 #> 972             altitude    effect.power 0.88393327     16          2 #> 973             bean_sun    effect.power 0.54399177     16          2 #> 974   brew_temp:altitude    effect.power 0.88393327     16          2 #> 975   brew_temp:bean_sun    effect.power 0.54399177     16          2 #> 976    altitude:bean_sun    effect.power 0.54956632     16          2 #> 977          (Intercept) parameter.power 0.88663985     16          2 #> 978            brew_temp parameter.power 0.88663985     16          2 #> 979             altitude parameter.power 0.88393327     16          2 #> 980            bean_sun1 parameter.power 0.60511325     16          2 #> 981            bean_sun2 parameter.power 0.60511325     16          2 #> 982   brew_temp:altitude parameter.power 0.88393327     16          2 #> 983  brew_temp:bean_sun1 parameter.power 0.60511325     16          2 #> 984  brew_temp:bean_sun2 parameter.power 0.60511325     16          2 #> 985   altitude:bean_sun1 parameter.power 0.61548525     16          2 #> 986   altitude:bean_sun2 parameter.power 0.61548525     16          2 #> 987          (Intercept)    effect.power 0.91496764     17          2 #> 988            brew_temp    effect.power 0.91807998     17          2 #> 989             altitude    effect.power 0.92334220     17          2 #> 990             bean_sun    effect.power 0.61104849     17          2 #> 991   brew_temp:altitude    effect.power 0.91496764     17          2 #> 992   brew_temp:bean_sun    effect.power 0.61077485     17          2 #> 993    altitude:bean_sun    effect.power 0.62022866     17          2 #> 994          (Intercept) parameter.power 0.91496764     17          2 #> 995            brew_temp parameter.power 0.91807998     17          2 #> 996             altitude parameter.power 0.92334220     17          2 #> 997            bean_sun1 parameter.power 0.64013967     17          2 #> 998            bean_sun2 parameter.power 0.67029540     17          2 #> 999   brew_temp:altitude parameter.power 0.91496764     17          2 #> 1000 brew_temp:bean_sun1 parameter.power 0.64921564     17          2 #> 1001 brew_temp:bean_sun2 parameter.power 0.67300406     17          2 #> 1002  altitude:bean_sun1 parameter.power 0.64049879     17          2 #> 1003  altitude:bean_sun2 parameter.power 0.68599570     17          2 #> 1004         (Intercept)    effect.power 0.93674287     18          2 #> 1005           brew_temp    effect.power 0.94191455     18          2 #> 1006            altitude    effect.power 0.94191455     18          2 #> 1007            bean_sun    effect.power 0.66943253     18          2 #> 1008  brew_temp:altitude    effect.power 0.93674287     18          2 #> 1009  brew_temp:bean_sun    effect.power 0.68755672     18          2 #> 1010   altitude:bean_sun    effect.power 0.68682971     18          2 #> 1011         (Intercept) parameter.power 0.93674287     18          2 #> 1012           brew_temp parameter.power 0.94191455     18          2 #> 1013            altitude parameter.power 0.94191455     18          2 #> 1014           bean_sun1 parameter.power 0.69845906     18          2 #> 1015           bean_sun2 parameter.power 0.69845906     18          2 #> 1016  brew_temp:altitude parameter.power 0.93674287     18          2 #> 1017 brew_temp:bean_sun1 parameter.power 0.73663483     18          2 #> 1018 brew_temp:bean_sun2 parameter.power 0.70374963     18          2 #> 1019  altitude:bean_sun1 parameter.power 0.70374963     18          2 #> 1020  altitude:bean_sun2 parameter.power 0.71995035     18          2 #> 1021         (Intercept)    effect.power 0.95762675     19          2 #> 1022           brew_temp    effect.power 0.95555872     19          2 #> 1023            altitude    effect.power 0.96241639     19          2 #> 1024            bean_sun    effect.power 0.70843918     19          2 #> 1025  brew_temp:altitude    effect.power 0.95555872     19          2 #> 1026  brew_temp:bean_sun    effect.power 0.69007912     19          2 #> 1027   altitude:bean_sun    effect.power 0.70784774     19          2 #> 1028         (Intercept) parameter.power 0.95762675     19          2 #> 1029           brew_temp parameter.power 0.95555872     19          2 #> 1030            altitude parameter.power 0.96241639     19          2 #> 1031           bean_sun1 parameter.power 0.75426226     19          2 #> 1032           bean_sun2 parameter.power 0.72788300     19          2 #> 1033  brew_temp:altitude parameter.power 0.95555872     19          2 #> 1034 brew_temp:bean_sun1 parameter.power 0.72535670     19          2 #> 1035 brew_temp:bean_sun2 parameter.power 0.72535670     19          2 #> 1036  altitude:bean_sun1 parameter.power 0.73399068     19          2 #> 1037  altitude:bean_sun2 parameter.power 0.74171235     19          2 #> 1038         (Intercept)    effect.power 0.96875326     20          2 #> 1039           brew_temp    effect.power 0.96875326     20          2 #> 1040            altitude    effect.power 0.96875326     20          2 #> 1041            bean_sun    effect.power 0.75307589     20          2 #> 1042  brew_temp:altitude    effect.power 0.96875326     20          2 #> 1043  brew_temp:bean_sun    effect.power 0.75307589     20          2 #> 1044   altitude:bean_sun    effect.power 0.78048787     20          2 #> 1045         (Intercept) parameter.power 0.96875326     20          2 #> 1046           brew_temp parameter.power 0.96875326     20          2 #> 1047            altitude parameter.power 0.96875326     20          2 #> 1048           bean_sun1 parameter.power 0.74792845     20          2 #> 1049           bean_sun2 parameter.power 0.79617620     20          2 #> 1050  brew_temp:altitude parameter.power 0.96875326     20          2 #> 1051 brew_temp:bean_sun1 parameter.power 0.74792845     20          2 #> 1052 brew_temp:bean_sun2 parameter.power 0.79617620     20          2 #> 1053  altitude:bean_sun1 parameter.power 0.78340518     20          2 #> 1054  altitude:bean_sun2 parameter.power 0.80538959     20          2 #> 1055         (Intercept)    effect.power 0.97803453     21          2 #> 1056           brew_temp    effect.power 0.97803453     21          2 #> 1057            altitude    effect.power 0.97803453     21          2 #> 1058            bean_sun    effect.power 0.81612153     21          2 #> 1059  brew_temp:altitude    effect.power 0.97803453     21          2 #> 1060  brew_temp:bean_sun    effect.power 0.81612153     21          2 #> 1061   altitude:bean_sun    effect.power 0.81612153     21          2 #> 1062         (Intercept) parameter.power 0.97803453     21          2 #> 1063           brew_temp parameter.power 0.97803453     21          2 #> 1064            altitude parameter.power 0.97803453     21          2 #> 1065           bean_sun1 parameter.power 0.82052108     21          2 #> 1066           bean_sun2 parameter.power 0.82052108     21          2 #> 1067  brew_temp:altitude parameter.power 0.97803453     21          2 #> 1068 brew_temp:bean_sun1 parameter.power 0.82052108     21          2 #> 1069 brew_temp:bean_sun2 parameter.power 0.82052108     21          2 #> 1070  altitude:bean_sun1 parameter.power 0.82052108     21          2 #> 1071  altitude:bean_sun2 parameter.power 0.82052108     21          2 #> 1072         (Intercept)    effect.power 0.98652545     22          2 #> 1073           brew_temp    effect.power 0.98652545     22          2 #> 1074            altitude    effect.power 0.98652545     22          2 #> 1075            bean_sun    effect.power 0.82601622     22          2 #> 1076  brew_temp:altitude    effect.power 0.98652545     22          2 #> 1077  brew_temp:bean_sun    effect.power 0.82601622     22          2 #> 1078   altitude:bean_sun    effect.power 0.82601622     22          2 #> 1079         (Intercept) parameter.power 0.98652545     22          2 #> 1080           brew_temp parameter.power 0.98652545     22          2 #> 1081            altitude parameter.power 0.98652545     22          2 #> 1082           bean_sun1 parameter.power 0.83626241     22          2 #> 1083           bean_sun2 parameter.power 0.83626241     22          2 #> 1084  brew_temp:altitude parameter.power 0.98652545     22          2 #> 1085 brew_temp:bean_sun1 parameter.power 0.83626241     22          2 #> 1086 brew_temp:bean_sun2 parameter.power 0.83626241     22          2 #> 1087  altitude:bean_sun1 parameter.power 0.83626241     22          2 #> 1088  altitude:bean_sun2 parameter.power 0.83626241     22          2 #> 1089         (Intercept)    effect.power 0.99181971     23          2 #> 1090           brew_temp    effect.power 0.99181971     23          2 #> 1091            altitude    effect.power 0.99181971     23          2 #> 1092            bean_sun    effect.power 0.86516427     23          2 #> 1093  brew_temp:altitude    effect.power 0.99181971     23          2 #> 1094  brew_temp:bean_sun    effect.power 0.86516427     23          2 #> 1095   altitude:bean_sun    effect.power 0.86516427     23          2 #> 1096         (Intercept) parameter.power 0.99181971     23          2 #> 1097           brew_temp parameter.power 0.99181971     23          2 #> 1098            altitude parameter.power 0.99181971     23          2 #> 1099           bean_sun1 parameter.power 0.84936393     23          2 #> 1100           bean_sun2 parameter.power 0.88175484     23          2 #> 1101  brew_temp:altitude parameter.power 0.99181971     23          2 #> 1102 brew_temp:bean_sun1 parameter.power 0.84936393     23          2 #> 1103 brew_temp:bean_sun2 parameter.power 0.88175484     23          2 #> 1104  altitude:bean_sun1 parameter.power 0.84936393     23          2 #> 1105  altitude:bean_sun2 parameter.power 0.88175484     23          2 #> 1106         (Intercept)    effect.power 0.99508019     24          2 #> 1107           brew_temp    effect.power 0.99508019     24          2 #> 1108            altitude    effect.power 0.99508019     24          2 #> 1109            bean_sun    effect.power 0.90292602     24          2 #> 1110  brew_temp:altitude    effect.power 0.99508019     24          2 #> 1111  brew_temp:bean_sun    effect.power 0.90292602     24          2 #> 1112   altitude:bean_sun    effect.power 0.90292602     24          2 #> 1113         (Intercept) parameter.power 0.99508019     24          2 #> 1114           brew_temp parameter.power 0.99508019     24          2 #> 1115            altitude parameter.power 0.99508019     24          2 #> 1116           bean_sun1 parameter.power 0.89589222     24          2 #> 1117           bean_sun2 parameter.power 0.89589222     24          2 #> 1118  brew_temp:altitude parameter.power 0.99508019     24          2 #> 1119 brew_temp:bean_sun1 parameter.power 0.89589222     24          2 #> 1120 brew_temp:bean_sun2 parameter.power 0.89589222     24          2 #> 1121  altitude:bean_sun1 parameter.power 0.89589222     24          2 #> 1122  altitude:bean_sun2 parameter.power 0.89589222     24          2 #> 1123         (Intercept)    effect.power 0.99625875     25          2 #> 1124           brew_temp    effect.power 0.99625875     25          2 #> 1125            altitude    effect.power 0.99625875     25          2 #> 1126            bean_sun    effect.power 0.90750084     25          2 #> 1127  brew_temp:altitude    effect.power 0.99625875     25          2 #> 1128  brew_temp:bean_sun    effect.power 0.90750084     25          2 #> 1129   altitude:bean_sun    effect.power 0.90750084     25          2 #> 1130         (Intercept) parameter.power 0.99625875     25          2 #> 1131           brew_temp parameter.power 0.99625875     25          2 #> 1132            altitude parameter.power 0.99625875     25          2 #> 1133           bean_sun1 parameter.power 0.90306058     25          2 #> 1134           bean_sun2 parameter.power 0.90306058     25          2 #> 1135  brew_temp:altitude parameter.power 0.99625875     25          2 #> 1136 brew_temp:bean_sun1 parameter.power 0.90306058     25          2 #> 1137 brew_temp:bean_sun2 parameter.power 0.90306058     25          2 #> 1138  altitude:bean_sun1 parameter.power 0.90306058     25          2 #> 1139  altitude:bean_sun2 parameter.power 0.90306058     25          2 #> 1140         (Intercept)    effect.power 0.99722203     26          2 #> 1141           brew_temp    effect.power 0.99714732     26          2 #> 1142            altitude    effect.power 0.99722203     26          2 #> 1143            bean_sun    effect.power 0.92371687     26          2 #> 1144  brew_temp:altitude    effect.power 0.99714732     26          2 #> 1145  brew_temp:bean_sun    effect.power 0.92376200     26          2 #> 1146   altitude:bean_sun    effect.power 0.92371687     26          2 #> 1147         (Intercept) parameter.power 0.99722203     26          2 #> 1148           brew_temp parameter.power 0.99714732     26          2 #> 1149            altitude parameter.power 0.99722203     26          2 #> 1150           bean_sun1 parameter.power 0.90988716     26          2 #> 1151           bean_sun2 parameter.power 0.92114486     26          2 #> 1152  brew_temp:altitude parameter.power 0.99714732     26          2 #> 1153 brew_temp:bean_sun1 parameter.power 0.90940998     26          2 #> 1154 brew_temp:bean_sun2 parameter.power 0.92206465     26          2 #> 1155  altitude:bean_sun1 parameter.power 0.90988716     26          2 #> 1156  altitude:bean_sun2 parameter.power 0.92114486     26          2 #> 1157         (Intercept)    effect.power 0.99793852     27          2 #> 1158           brew_temp    effect.power 0.99793852     27          2 #> 1159            altitude    effect.power 0.99793852     27          2 #> 1160            bean_sun    effect.power 0.93729985     27          2 #> 1161  brew_temp:altitude    effect.power 0.99782039     27          2 #> 1162  brew_temp:bean_sun    effect.power 0.93729985     27          2 #> 1163   altitude:bean_sun    effect.power 0.93855083     27          2 #> 1164         (Intercept) parameter.power 0.99793852     27          2 #> 1165           brew_temp parameter.power 0.99793852     27          2 #> 1166            altitude parameter.power 0.99793852     27          2 #> 1167           bean_sun1 parameter.power 0.92631021     27          2 #> 1168           bean_sun2 parameter.power 0.92761434     27          2 #> 1169  brew_temp:altitude parameter.power 0.99782039     27          2 #> 1170 brew_temp:bean_sun1 parameter.power 0.92761434     27          2 #> 1171 brew_temp:bean_sun2 parameter.power 0.92631021     27          2 #> 1172  altitude:bean_sun1 parameter.power 0.92761434     27          2 #> 1173  altitude:bean_sun2 parameter.power 0.92761434     27          2 #> 1174         (Intercept)    effect.power 0.99854491     28          2 #> 1175           brew_temp    effect.power 0.99840139     28          2 #> 1176            altitude    effect.power 0.99844730     28          2 #> 1177            bean_sun    effect.power 0.93975559     28          2 #> 1178  brew_temp:altitude    effect.power 0.99840139     28          2 #> 1179  brew_temp:bean_sun    effect.power 0.94092796     28          2 #> 1180   altitude:bean_sun    effect.power 0.93974449     28          2 #> 1181         (Intercept) parameter.power 0.99854491     28          2 #> 1182           brew_temp parameter.power 0.99840139     28          2 #> 1183            altitude parameter.power 0.99844730     28          2 #> 1184           bean_sun1 parameter.power 0.93149607     28          2 #> 1185           bean_sun2 parameter.power 0.93418260     28          2 #> 1186  brew_temp:altitude parameter.power 0.99840139     28          2 #> 1187 brew_temp:bean_sun1 parameter.power 0.93276227     28          2 #> 1188 brew_temp:bean_sun2 parameter.power 0.93276227     28          2 #> 1189  altitude:bean_sun1 parameter.power 0.93194623     28          2 #> 1190  altitude:bean_sun2 parameter.power 0.93194623     28          2 #> 1191         (Intercept)    effect.power 0.99882758     29          2 #> 1192           brew_temp    effect.power 0.99882758     29          2 #> 1193            altitude    effect.power 0.99882758     29          2 #> 1194            bean_sun    effect.power 0.95152241     29          2 #> 1195  brew_temp:altitude    effect.power 0.99882758     29          2 #> 1196  brew_temp:bean_sun    effect.power 0.95152241     29          2 #> 1197   altitude:bean_sun    effect.power 0.95518129     29          2 #> 1198         (Intercept) parameter.power 0.99882758     29          2 #> 1199           brew_temp parameter.power 0.99882758     29          2 #> 1200            altitude parameter.power 0.99882758     29          2 #> 1201           bean_sun1 parameter.power 0.93696878     29          2 #> 1202           bean_sun2 parameter.power 0.94621175     29          2 #> 1203  brew_temp:altitude parameter.power 0.99882758     29          2 #> 1204 brew_temp:bean_sun1 parameter.power 0.93696878     29          2 #> 1205 brew_temp:bean_sun2 parameter.power 0.94621175     29          2 #> 1206  altitude:bean_sun1 parameter.power 0.93948447     29          2 #> 1207  altitude:bean_sun2 parameter.power 0.95240700     29          2 #> 1208         (Intercept)    effect.power 0.99920456     30          2 #> 1209           brew_temp    effect.power 0.99920456     30          2 #> 1210            altitude    effect.power 0.99914036     30          2 #> 1211            bean_sun    effect.power 0.96750514     30          2 #> 1212  brew_temp:altitude    effect.power 0.99914036     30          2 #> 1213  brew_temp:bean_sun    effect.power 0.96114283     30          2 #> 1214   altitude:bean_sun    effect.power 0.96114283     30          2 #> 1215         (Intercept) parameter.power 0.99920456     30          2 #> 1216           brew_temp parameter.power 0.99920456     30          2 #> 1217            altitude parameter.power 0.99914036     30          2 #> 1218           bean_sun1 parameter.power 0.95583669     30          2 #> 1219           bean_sun2 parameter.power 0.95583669     30          2 #> 1220  brew_temp:altitude parameter.power 0.99914036     30          2 #> 1221 brew_temp:bean_sun1 parameter.power 0.95104076     30          2 #> 1222 brew_temp:bean_sun2 parameter.power 0.95104076     30          2 #> 1223  altitude:bean_sun1 parameter.power 0.95022212     30          2 #> 1224  altitude:bean_sun2 parameter.power 0.95022212     30          2 #> 1225         (Intercept)    effect.power 0.99940603     31          2 #> 1226           brew_temp    effect.power 0.99942966     31          2 #> 1227            altitude    effect.power 0.99942966     31          2 #> 1228            bean_sun    effect.power 0.96241541     31          2 #> 1229  brew_temp:altitude    effect.power 0.99940603     31          2 #> 1230  brew_temp:bean_sun    effect.power 0.96460853     31          2 #> 1231   altitude:bean_sun    effect.power 0.96460853     31          2 #> 1232         (Intercept) parameter.power 0.99940603     31          2 #> 1233           brew_temp parameter.power 0.99942966     31          2 #> 1234            altitude parameter.power 0.99942966     31          2 #> 1235           bean_sun1 parameter.power 0.95437182     31          2 #> 1236           bean_sun2 parameter.power 0.95437182     31          2 #> 1237  brew_temp:altitude parameter.power 0.99940603     31          2 #> 1238 brew_temp:bean_sun1 parameter.power 0.95475166     31          2 #> 1239 brew_temp:bean_sun2 parameter.power 0.95835462     31          2 #> 1240  altitude:bean_sun1 parameter.power 0.95835462     31          2 #> 1241  altitude:bean_sun2 parameter.power 0.95475166     31          2 #> 1242         (Intercept)    effect.power 0.99961139     32          2 #> 1243           brew_temp    effect.power 0.99964709     32          2 #> 1244            altitude    effect.power 0.99959039     32          2 #> 1245            bean_sun    effect.power 0.97170007     32          2 #> 1246  brew_temp:altitude    effect.power 0.99959039     32          2 #> 1247  brew_temp:bean_sun    effect.power 0.97449174     32          2 #> 1248   altitude:bean_sun    effect.power 0.97174305     32          2 #> 1249         (Intercept) parameter.power 0.99961139     32          2 #> 1250           brew_temp parameter.power 0.99964709     32          2 #> 1251            altitude parameter.power 0.99959039     32          2 #> 1252           bean_sun1 parameter.power 0.95848339     32          2 #> 1253           bean_sun2 parameter.power 0.96656056     32          2 #> 1254  brew_temp:altitude parameter.power 0.99959039     32          2 #> 1255 brew_temp:bean_sun1 parameter.power 0.96155662     32          2 #> 1256 brew_temp:bean_sun2 parameter.power 0.96831037     32          2 #> 1257  altitude:bean_sun1 parameter.power 0.95804846     32          2 #> 1258  altitude:bean_sun2 parameter.power 0.96734373     32          2 #> 1259         (Intercept)    effect.power 0.99974765     33          2 #> 1260           brew_temp    effect.power 0.99971806     33          2 #> 1261            altitude    effect.power 0.99974765     33          2 #> 1262            bean_sun    effect.power 0.97972625     33          2 #> 1263  brew_temp:altitude    effect.power 0.99971806     33          2 #> 1264  brew_temp:bean_sun    effect.power 0.97972625     33          2 #> 1265   altitude:bean_sun    effect.power 0.97972625     33          2 #> 1266         (Intercept) parameter.power 0.99974765     33          2 #> 1267           brew_temp parameter.power 0.99971806     33          2 #> 1268            altitude parameter.power 0.99974765     33          2 #> 1269           bean_sun1 parameter.power 0.97038785     33          2 #> 1270           bean_sun2 parameter.power 0.97038785     33          2 #> 1271  brew_temp:altitude parameter.power 0.99971806     33          2 #> 1272 brew_temp:bean_sun1 parameter.power 0.97074455     33          2 #> 1273 brew_temp:bean_sun2 parameter.power 0.97074455     33          2 #> 1274  altitude:bean_sun1 parameter.power 0.97038785     33          2 #> 1275  altitude:bean_sun2 parameter.power 0.97038785     33          2 #> 1276         (Intercept)    effect.power 0.99983198     34          2 #> 1277           brew_temp    effect.power 0.99982193     34          2 #> 1278            altitude    effect.power 0.99983198     34          2 #> 1279            bean_sun    effect.power 0.97951085     34          2 #> 1280  brew_temp:altitude    effect.power 0.99982193     34          2 #> 1281  brew_temp:bean_sun    effect.power 0.98033138     34          2 #> 1282   altitude:bean_sun    effect.power 0.97951085     34          2 #> 1283         (Intercept) parameter.power 0.99983198     34          2 #> 1284           brew_temp parameter.power 0.99982193     34          2 #> 1285            altitude parameter.power 0.99983198     34          2 #> 1286           bean_sun1 parameter.power 0.97256766     34          2 #> 1287           bean_sun2 parameter.power 0.97256766     34          2 #> 1288  brew_temp:altitude parameter.power 0.99982193     34          2 #> 1289 brew_temp:bean_sun1 parameter.power 0.97322283     34          2 #> 1290 brew_temp:bean_sun2 parameter.power 0.97322283     34          2 #> 1291  altitude:bean_sun1 parameter.power 0.97256766     34          2 #> 1292  altitude:bean_sun2 parameter.power 0.97256766     34          2 #> 1293         (Intercept)    effect.power 0.99988795     35          2 #> 1294           brew_temp    effect.power 0.99988795     35          2 #> 1295            altitude    effect.power 0.99988795     35          2 #> 1296            bean_sun    effect.power 0.98539836     35          2 #> 1297  brew_temp:altitude    effect.power 0.99988795     35          2 #> 1298  brew_temp:bean_sun    effect.power 0.98539836     35          2 #> 1299   altitude:bean_sun    effect.power 0.98539836     35          2 #> 1300         (Intercept) parameter.power 0.99988795     35          2 #> 1301           brew_temp parameter.power 0.99988795     35          2 #> 1302            altitude parameter.power 0.99988795     35          2 #> 1303           bean_sun1 parameter.power 0.97539651     35          2 #> 1304           bean_sun2 parameter.power 0.98106085     35          2 #> 1305  brew_temp:altitude parameter.power 0.99988795     35          2 #> 1306 brew_temp:bean_sun1 parameter.power 0.97539651     35          2 #> 1307 brew_temp:bean_sun2 parameter.power 0.98106085     35          2 #> 1308  altitude:bean_sun1 parameter.power 0.97539651     35          2 #> 1309  altitude:bean_sun2 parameter.power 0.98106085     35          2 #> 1310         (Intercept)    effect.power 0.99992973     36          2 #> 1311           brew_temp    effect.power 0.99992973     36          2 #> 1312            altitude    effect.power 0.99992973     36          2 #> 1313            bean_sun    effect.power 0.98966917     36          2 #> 1314  brew_temp:altitude    effect.power 0.99992973     36          2 #> 1315  brew_temp:bean_sun    effect.power 0.98966917     36          2 #> 1316   altitude:bean_sun    effect.power 0.98966917     36          2 #> 1317         (Intercept) parameter.power 0.99992973     36          2 #> 1318           brew_temp parameter.power 0.99992973     36          2 #> 1319            altitude parameter.power 0.99992973     36          2 #> 1320           bean_sun1 parameter.power 0.98305336     36          2 #> 1321           bean_sun2 parameter.power 0.98305336     36          2 #> 1322  brew_temp:altitude parameter.power 0.99992973     36          2 #> 1323 brew_temp:bean_sun1 parameter.power 0.98305336     36          2 #> 1324 brew_temp:bean_sun2 parameter.power 0.98305336     36          2 #> 1325  altitude:bean_sun1 parameter.power 0.98305336     36          2 #> 1326  altitude:bean_sun2 parameter.power 0.98305336     36          2 #> 1327         (Intercept)    effect.power 0.99994774     37          2 #> 1328           brew_temp    effect.power 0.99994774     37          2 #> 1329            altitude    effect.power 0.99994774     37          2 #> 1330            bean_sun    effect.power 0.98995257     37          2 #> 1331  brew_temp:altitude    effect.power 0.99994774     37          2 #> 1332  brew_temp:bean_sun    effect.power 0.98995257     37          2 #> 1333   altitude:bean_sun    effect.power 0.98995257     37          2 #> 1334         (Intercept) parameter.power 0.99994774     37          2 #> 1335           brew_temp parameter.power 0.99994774     37          2 #> 1336            altitude parameter.power 0.99994774     37          2 #> 1337           bean_sun1 parameter.power 0.98421530     37          2 #> 1338           bean_sun2 parameter.power 0.98421530     37          2 #> 1339  brew_temp:altitude parameter.power 0.99994774     37          2 #> 1340 brew_temp:bean_sun1 parameter.power 0.98421530     37          2 #> 1341 brew_temp:bean_sun2 parameter.power 0.98421530     37          2 #> 1342  altitude:bean_sun1 parameter.power 0.98421530     37          2 #> 1343  altitude:bean_sun2 parameter.power 0.98421530     37          2 #> 1344         (Intercept)    effect.power 0.99996115     38          2 #> 1345           brew_temp    effect.power 0.99996208     38          2 #> 1346            altitude    effect.power 0.99996208     38          2 #> 1347            bean_sun    effect.power 0.99204724     38          2 #> 1348  brew_temp:altitude    effect.power 0.99996115     38          2 #> 1349  brew_temp:bean_sun    effect.power 0.99204381     38          2 #> 1350   altitude:bean_sun    effect.power 0.99204381     38          2 #> 1351         (Intercept) parameter.power 0.99996115     38          2 #> 1352           brew_temp parameter.power 0.99996208     38          2 #> 1353            altitude parameter.power 0.99996208     38          2 #> 1354           bean_sun1 parameter.power 0.98527162     38          2 #> 1355           bean_sun2 parameter.power 0.98780966     38          2 #> 1356  brew_temp:altitude parameter.power 0.99996115     38          2 #> 1357 brew_temp:bean_sun1 parameter.power 0.98534589     38          2 #> 1358 brew_temp:bean_sun2 parameter.power 0.98767599     38          2 #> 1359  altitude:bean_sun1 parameter.power 0.98534589     38          2 #> 1360  altitude:bean_sun2 parameter.power 0.98767599     38          2 #> 1361         (Intercept)    effect.power 0.99997112     39          2 #> 1362           brew_temp    effect.power 0.99997112     39          2 #> 1363            altitude    effect.power 0.99997112     39          2 #> 1364            bean_sun    effect.power 0.99384009     39          2 #> 1365  brew_temp:altitude    effect.power 0.99997112     39          2 #> 1366  brew_temp:bean_sun    effect.power 0.99384009     39          2 #> 1367   altitude:bean_sun    effect.power 0.99384009     39          2 #> 1368         (Intercept) parameter.power 0.99997112     39          2 #> 1369           brew_temp parameter.power 0.99997112     39          2 #> 1370            altitude parameter.power 0.99997112     39          2 #> 1371           bean_sun1 parameter.power 0.98875635     39          2 #> 1372           bean_sun2 parameter.power 0.98875635     39          2 #> 1373  brew_temp:altitude parameter.power 0.99997112     39          2 #> 1374 brew_temp:bean_sun1 parameter.power 0.98875635     39          2 #> 1375 brew_temp:bean_sun2 parameter.power 0.98875635     39          2 #> 1376  altitude:bean_sun1 parameter.power 0.98875635     39          2 #> 1377  altitude:bean_sun2 parameter.power 0.98875635     39          2 #> 1378         (Intercept)    effect.power 0.99997934     40          2 #> 1379           brew_temp    effect.power 0.99997987     40          2 #> 1380            altitude    effect.power 0.99997987     40          2 #> 1381            bean_sun    effect.power 0.99399120     40          2 #> 1382  brew_temp:altitude    effect.power 0.99997934     40          2 #> 1383  brew_temp:bean_sun    effect.power 0.99387375     40          2 #> 1384   altitude:bean_sun    effect.power 0.99387375     40          2 #> 1385         (Intercept) parameter.power 0.99997934     40          2 #> 1386           brew_temp parameter.power 0.99997987     40          2 #> 1387            altitude parameter.power 0.99997987     40          2 #> 1388           bean_sun1 parameter.power 0.98971002     40          2 #> 1389           bean_sun2 parameter.power 0.98971002     40          2 #> 1390  brew_temp:altitude parameter.power 0.99997934     40          2 #> 1391 brew_temp:bean_sun1 parameter.power 0.98940872     40          2 #> 1392 brew_temp:bean_sun2 parameter.power 0.98940872     40          2 #> 1393  altitude:bean_sun1 parameter.power 0.98940872     40          2 #> 1394  altitude:bean_sun2 parameter.power 0.98940872     40          2 #> 1395         (Intercept)    effect.power 0.99998769     41          2 #> 1396           brew_temp    effect.power 0.99998523     41          2 #> 1397            altitude    effect.power 0.99998523     41          2 #> 1398            bean_sun    effect.power 0.99557881     41          2 #> 1399  brew_temp:altitude    effect.power 0.99998523     41          2 #> 1400  brew_temp:bean_sun    effect.power 0.99526478     41          2 #> 1401   altitude:bean_sun    effect.power 0.99526478     41          2 #> 1402         (Intercept) parameter.power 0.99998769     41          2 #> 1403           brew_temp parameter.power 0.99998523     41          2 #> 1404            altitude parameter.power 0.99998523     41          2 #> 1405           bean_sun1 parameter.power 0.99058276     41          2 #> 1406           bean_sun2 parameter.power 0.99240391     41          2 #> 1407  brew_temp:altitude parameter.power 0.99998523     41          2 #> 1408 brew_temp:bean_sun1 parameter.power 0.99022228     41          2 #> 1409 brew_temp:bean_sun2 parameter.power 0.99194575     41          2 #> 1410  altitude:bean_sun1 parameter.power 0.99022228     41          2 #> 1411  altitude:bean_sun2 parameter.power 0.99194575     41          2 #> 1412         (Intercept)    effect.power 0.99998945     42          2 #> 1413           brew_temp    effect.power 0.99999010     42          2 #> 1414            altitude    effect.power 0.99999010     42          2 #> 1415            bean_sun    effect.power 0.99634996     42          2 #> 1416  brew_temp:altitude    effect.power 0.99998945     42          2 #> 1417  brew_temp:bean_sun    effect.power 0.99652886     42          2 #> 1418   altitude:bean_sun    effect.power 0.99653008     42          2 #> 1419         (Intercept) parameter.power 0.99998945     42          2 #> 1420           brew_temp parameter.power 0.99999010     42          2 #> 1421            altitude parameter.power 0.99999010     42          2 #> 1422           bean_sun1 parameter.power 0.99257006     42          2 #> 1423           bean_sun2 parameter.power 0.99257006     42          2 #> 1424  brew_temp:altitude parameter.power 0.99998945     42          2 #> 1425 brew_temp:bean_sun1 parameter.power 0.99297183     42          2 #> 1426 brew_temp:bean_sun2 parameter.power 0.99267184     42          2 #> 1427  altitude:bean_sun1 parameter.power 0.99267184     42          2 #> 1428  altitude:bean_sun2 parameter.power 0.99326386     42          2 #> 1429         (Intercept)    effect.power 0.99999282     43          2 #> 1430           brew_temp    effect.power 0.99999282     43          2 #> 1431            altitude    effect.power 0.99999282     43          2 #> 1432            bean_sun    effect.power 0.99643095     43          2 #> 1433  brew_temp:altitude    effect.power 0.99999282     43          2 #> 1434  brew_temp:bean_sun    effect.power 0.99643095     43          2 #> 1435   altitude:bean_sun    effect.power 0.99693852     43          2 #> 1436         (Intercept) parameter.power 0.99999282     43          2 #> 1437           brew_temp parameter.power 0.99999282     43          2 #> 1438            altitude parameter.power 0.99999282     43          2 #> 1439           bean_sun1 parameter.power 0.99320345     43          2 #> 1440           bean_sun2 parameter.power 0.99320345     43          2 #> 1441  brew_temp:altitude parameter.power 0.99999282     43          2 #> 1442 brew_temp:bean_sun1 parameter.power 0.99320345     43          2 #> 1443 brew_temp:bean_sun2 parameter.power 0.99320345     43          2 #> 1444  altitude:bean_sun1 parameter.power 0.99390528     43          2 #> 1445  altitude:bean_sun2 parameter.power 0.99390528     43          2 #> 1446         (Intercept)    effect.power 0.99999513     44          2 #> 1447           brew_temp    effect.power 0.99999564     44          2 #> 1448            altitude    effect.power 0.99999531     44          2 #> 1449            bean_sun    effect.power 0.99739384     44          2 #> 1450  brew_temp:altitude    effect.power 0.99999513     44          2 #> 1451  brew_temp:bean_sun    effect.power 0.99760291     44          2 #> 1452   altitude:bean_sun    effect.power 0.99739171     44          2 #> 1453         (Intercept) parameter.power 0.99999513     44          2 #> 1454           brew_temp parameter.power 0.99999564     44          2 #> 1455            altitude parameter.power 0.99999531     44          2 #> 1456           bean_sun1 parameter.power 0.99376994     44          2 #> 1457           bean_sun2 parameter.power 0.99522313     44          2 #> 1458  brew_temp:altitude parameter.power 0.99999513     44          2 #> 1459 brew_temp:bean_sun1 parameter.power 0.99418366     44          2 #> 1460 brew_temp:bean_sun2 parameter.power 0.99533368     44          2 #> 1461  altitude:bean_sun1 parameter.power 0.99381999     44          2 #> 1462  altitude:bean_sun2 parameter.power 0.99513832     44          2 #> 1463         (Intercept)    effect.power 0.99999695     45          2 #> 1464           brew_temp    effect.power 0.99999669     45          2 #> 1465            altitude    effect.power 0.99999695     45          2 #> 1466            bean_sun    effect.power 0.99810260     45          2 #> 1467  brew_temp:altitude    effect.power 0.99999669     45          2 #> 1468  brew_temp:bean_sun    effect.power 0.99816286     45          2 #> 1469   altitude:bean_sun    effect.power 0.99810260     45          2 #> 1470         (Intercept) parameter.power 0.99999695     45          2 #> 1471           brew_temp parameter.power 0.99999669     45          2 #> 1472            altitude parameter.power 0.99999695     45          2 #> 1473           bean_sun1 parameter.power 0.99566478     45          2 #> 1474           bean_sun2 parameter.power 0.99554822     45          2 #> 1475  brew_temp:altitude parameter.power 0.99999669     45          2 #> 1476 brew_temp:bean_sun1 parameter.power 0.99570317     45          2 #> 1477 brew_temp:bean_sun2 parameter.power 0.99570317     45          2 #> 1478  altitude:bean_sun1 parameter.power 0.99566478     45          2 #> 1479  altitude:bean_sun2 parameter.power 0.99554822     45          2 #> 1480         (Intercept)    effect.power 0.99999789     46          2 #> 1481           brew_temp    effect.power 0.99999789     46          2 #> 1482            altitude    effect.power 0.99999789     46          2 #> 1483            bean_sun    effect.power 0.99820103     46          2 #> 1484  brew_temp:altitude    effect.power 0.99999789     46          2 #> 1485  brew_temp:bean_sun    effect.power 0.99820103     46          2 #> 1486   altitude:bean_sun    effect.power 0.99820103     46          2 #> 1487         (Intercept) parameter.power 0.99999789     46          2 #> 1488           brew_temp parameter.power 0.99999789     46          2 #> 1489            altitude parameter.power 0.99999789     46          2 #> 1490           bean_sun1 parameter.power 0.99607421     46          2 #> 1491           bean_sun2 parameter.power 0.99607421     46          2 #> 1492  brew_temp:altitude parameter.power 0.99999789     46          2 #> 1493 brew_temp:bean_sun1 parameter.power 0.99607421     46          2 #> 1494 brew_temp:bean_sun2 parameter.power 0.99607421     46          2 #> 1495  altitude:bean_sun1 parameter.power 0.99607421     46          2 #> 1496  altitude:bean_sun2 parameter.power 0.99607421     46          2 #> 1497         (Intercept)    effect.power 0.99999866     47          2 #> 1498           brew_temp    effect.power 0.99999866     47          2 #> 1499            altitude    effect.power 0.99999866     47          2 #> 1500            bean_sun    effect.power 0.99869639     47          2 #> 1501  brew_temp:altitude    effect.power 0.99999866     47          2 #> 1502  brew_temp:bean_sun    effect.power 0.99869639     47          2 #> 1503   altitude:bean_sun    effect.power 0.99869639     47          2 #> 1504         (Intercept) parameter.power 0.99999866     47          2 #> 1505           brew_temp parameter.power 0.99999866     47          2 #> 1506            altitude parameter.power 0.99999866     47          2 #> 1507           bean_sun1 parameter.power 0.99640406     47          2 #> 1508           bean_sun2 parameter.power 0.99726024     47          2 #> 1509  brew_temp:altitude parameter.power 0.99999866     47          2 #> 1510 brew_temp:bean_sun1 parameter.power 0.99640406     47          2 #> 1511 brew_temp:bean_sun2 parameter.power 0.99726024     47          2 #> 1512  altitude:bean_sun1 parameter.power 0.99640406     47          2 #> 1513  altitude:bean_sun2 parameter.power 0.99726024     47          2 #> 1514         (Intercept)    effect.power 0.99999915     48          2 #> 1515           brew_temp    effect.power 0.99999915     48          2 #> 1516            altitude    effect.power 0.99999915     48          2 #> 1517            bean_sun    effect.power 0.99908854     48          2 #> 1518  brew_temp:altitude    effect.power 0.99999915     48          2 #> 1519  brew_temp:bean_sun    effect.power 0.99908854     48          2 #> 1520   altitude:bean_sun    effect.power 0.99908854     48          2 #> 1521         (Intercept) parameter.power 0.99999915     48          2 #> 1522           brew_temp parameter.power 0.99999915     48          2 #> 1523            altitude parameter.power 0.99999915     48          2 #> 1524           bean_sun1 parameter.power 0.99753792     48          2 #> 1525           bean_sun2 parameter.power 0.99753792     48          2 #> 1526  brew_temp:altitude parameter.power 0.99999915     48          2 #> 1527 brew_temp:bean_sun1 parameter.power 0.99753792     48          2 #> 1528 brew_temp:bean_sun2 parameter.power 0.99753792     48          2 #> 1529  altitude:bean_sun1 parameter.power 0.99753792     48          2 #> 1530  altitude:bean_sun2 parameter.power 0.99753792     48          2 #> 1531         (Intercept)    effect.power 0.99999938     49          2 #> 1532           brew_temp    effect.power 0.99999938     49          2 #> 1533            altitude    effect.power 0.99999938     49          2 #> 1534            bean_sun    effect.power 0.99910635     49          2 #> 1535  brew_temp:altitude    effect.power 0.99999938     49          2 #> 1536  brew_temp:bean_sun    effect.power 0.99910635     49          2 #> 1537   altitude:bean_sun    effect.power 0.99910635     49          2 #> 1538         (Intercept) parameter.power 0.99999938     49          2 #> 1539           brew_temp parameter.power 0.99999938     49          2 #> 1540            altitude parameter.power 0.99999938     49          2 #> 1541           bean_sun1 parameter.power 0.99771576     49          2 #> 1542           bean_sun2 parameter.power 0.99771576     49          2 #> 1543  brew_temp:altitude parameter.power 0.99999938     49          2 #> 1544 brew_temp:bean_sun1 parameter.power 0.99771576     49          2 #> 1545 brew_temp:bean_sun2 parameter.power 0.99771576     49          2 #> 1546  altitude:bean_sun1 parameter.power 0.99771576     49          2 #> 1547  altitude:bean_sun2 parameter.power 0.99771576     49          2 #> 1548         (Intercept)    effect.power 0.99999956     50          2 #> 1549           brew_temp    effect.power 0.99999955     50          2 #> 1550            altitude    effect.power 0.99999956     50          2 #> 1551            bean_sun    effect.power 0.99931335     50          2 #> 1552  brew_temp:altitude    effect.power 0.99999955     50          2 #> 1553  brew_temp:bean_sun    effect.power 0.99931356     50          2 #> 1554   altitude:bean_sun    effect.power 0.99931335     50          2 #> 1555         (Intercept) parameter.power 0.99999956     50          2 #> 1556           brew_temp parameter.power 0.99999955     50          2 #> 1557            altitude parameter.power 0.99999956     50          2 #> 1558           bean_sun1 parameter.power 0.99788771     50          2 #> 1559           bean_sun2 parameter.power 0.99826830     50          2 #> 1560  brew_temp:altitude parameter.power 0.99999955     50          2 #> 1561 brew_temp:bean_sun1 parameter.power 0.99787799     50          2 #> 1562 brew_temp:bean_sun2 parameter.power 0.99828509     50          2 #> 1563  altitude:bean_sun1 parameter.power 0.99788771     50          2 #> 1564  altitude:bean_sun2 parameter.power 0.99826830     50          2 #> 1565         (Intercept)    effect.power 0.99999969     51          2 #> 1566           brew_temp    effect.power 0.99999969     51          2 #> 1567            altitude    effect.power 0.99999969     51          2 #> 1568            bean_sun    effect.power 0.99947356     51          2 #> 1569  brew_temp:altitude    effect.power 0.99999967     51          2 #> 1570  brew_temp:bean_sun    effect.power 0.99947356     51          2 #> 1571   altitude:bean_sun    effect.power 0.99948296     51          2 #> 1572         (Intercept) parameter.power 0.99999969     51          2 #> 1573           brew_temp parameter.power 0.99999969     51          2 #> 1574            altitude parameter.power 0.99999969     51          2 #> 1575           bean_sun1 parameter.power 0.99841547     51          2 #> 1576           bean_sun2 parameter.power 0.99839206     51          2 #> 1577  brew_temp:altitude parameter.power 0.99999967     51          2 #> 1578 brew_temp:bean_sun1 parameter.power 0.99839206     51          2 #> 1579 brew_temp:bean_sun2 parameter.power 0.99841547     51          2 #> 1580  altitude:bean_sun1 parameter.power 0.99841547     51          2 #> 1581  altitude:bean_sun2 parameter.power 0.99841547     51          2 #> 1582         (Intercept)    effect.power 0.99999979     52          2 #> 1583           brew_temp    effect.power 0.99999977     52          2 #> 1584            altitude    effect.power 0.99999977     52          2 #> 1585            bean_sun    effect.power 0.99949232     52          2 #> 1586  brew_temp:altitude    effect.power 0.99999977     52          2 #> 1587  brew_temp:bean_sun    effect.power 0.99949232     52          2 #> 1588   altitude:bean_sun    effect.power 0.99949232     52          2 #> 1589         (Intercept) parameter.power 0.99999979     52          2 #> 1590           brew_temp parameter.power 0.99999977     52          2 #> 1591            altitude parameter.power 0.99999977     52          2 #> 1592           bean_sun1 parameter.power 0.99854510     52          2 #> 1593           bean_sun2 parameter.power 0.99854510     52          2 #> 1594  brew_temp:altitude parameter.power 0.99999977     52          2 #> 1595 brew_temp:bean_sun1 parameter.power 0.99853753     52          2 #> 1596 brew_temp:bean_sun2 parameter.power 0.99853753     52          2 #> 1597  altitude:bean_sun1 parameter.power 0.99853753     52          2 #> 1598  altitude:bean_sun2 parameter.power 0.99853753     52          2 #> 1599         (Intercept)    effect.power 0.99999984     53          2 #> 1600           brew_temp    effect.power 0.99999984     53          2 #> 1601            altitude    effect.power 0.99999984     53          2 #> 1602            bean_sun    effect.power 0.99963440     53          2 #> 1603  brew_temp:altitude    effect.power 0.99999984     53          2 #> 1604  brew_temp:bean_sun    effect.power 0.99961131     53          2 #> 1605   altitude:bean_sun    effect.power 0.99961144     53          2 #> 1606         (Intercept) parameter.power 0.99999984     53          2 #> 1607           brew_temp parameter.power 0.99999984     53          2 #> 1608            altitude parameter.power 0.99999984     53          2 #> 1609           bean_sun1 parameter.power 0.99866993     53          2 #> 1610           bean_sun2 parameter.power 0.99896606     53          2 #> 1611  brew_temp:altitude parameter.power 0.99999984     53          2 #> 1612 brew_temp:bean_sun1 parameter.power 0.99866993     53          2 #> 1613 brew_temp:bean_sun2 parameter.power 0.99891217     53          2 #> 1614  altitude:bean_sun1 parameter.power 0.99864156     53          2 #> 1615  altitude:bean_sun2 parameter.power 0.99890583     53          2 #> 1616         (Intercept)    effect.power 0.99999989     54          2 #> 1617           brew_temp    effect.power 0.99999989     54          2 #> 1618            altitude    effect.power 0.99999990     54          2 #> 1619            bean_sun    effect.power 0.99972081     54          2 #> 1620  brew_temp:altitude    effect.power 0.99999989     54          2 #> 1621  brew_temp:bean_sun    effect.power 0.99970844     54          2 #> 1622   altitude:bean_sun    effect.power 0.99972079     54          2 #> 1623         (Intercept) parameter.power 0.99999989     54          2 #> 1624           brew_temp parameter.power 0.99999989     54          2 #> 1625            altitude parameter.power 0.99999990     54          2 #> 1626           bean_sun1 parameter.power 0.99900585     54          2 #> 1627           bean_sun2 parameter.power 0.99904023     54          2 #> 1628  brew_temp:altitude parameter.power 0.99999989     54          2 #> 1629 brew_temp:bean_sun1 parameter.power 0.99899419     54          2 #> 1630 brew_temp:bean_sun2 parameter.power 0.99899419     54          2 #> 1631  altitude:bean_sun1 parameter.power 0.99902887     54          2 #> 1632  altitude:bean_sun2 parameter.power 0.99902887     54          2 #> 1633         (Intercept)    effect.power 0.99999993     55          2 #> 1634           brew_temp    effect.power 0.99999992     55          2 #> 1635            altitude    effect.power 0.99999993     55          2 #> 1636            bean_sun    effect.power 0.99972564     55          2 #> 1637  brew_temp:altitude    effect.power 0.99999992     55          2 #> 1638  brew_temp:bean_sun    effect.power 0.99971335     55          2 #> 1639   altitude:bean_sun    effect.power 0.99972568     55          2 #> 1640         (Intercept) parameter.power 0.99999993     55          2 #> 1641           brew_temp parameter.power 0.99999992     55          2 #> 1642            altitude parameter.power 0.99999993     55          2 #> 1643           bean_sun1 parameter.power 0.99909867     55          2 #> 1644           bean_sun2 parameter.power 0.99911443     55          2 #> 1645  brew_temp:altitude parameter.power 0.99999992     55          2 #> 1646 brew_temp:bean_sun1 parameter.power 0.99908207     55          2 #> 1647 brew_temp:bean_sun2 parameter.power 0.99908207     55          2 #> 1648  altitude:bean_sun1 parameter.power 0.99913633     55          2 #> 1649  altitude:bean_sun2 parameter.power 0.99908742     55          2 #> 1650         (Intercept)    effect.power 0.99999995     56          2 #> 1651           brew_temp    effect.power 0.99999995     56          2 #> 1652            altitude    effect.power 0.99999995     56          2 #> 1653            bean_sun    effect.power 0.99980845     56          2 #> 1654  brew_temp:altitude    effect.power 0.99999995     56          2 #> 1655  brew_temp:bean_sun    effect.power 0.99979450     56          2 #> 1656   altitude:bean_sun    effect.power 0.99979450     56          2 #> 1657         (Intercept) parameter.power 0.99999995     56          2 #> 1658           brew_temp parameter.power 0.99999995     56          2 #> 1659            altitude parameter.power 0.99999995     56          2 #> 1660           bean_sun1 parameter.power 0.99922163     56          2 #> 1661           bean_sun2 parameter.power 0.99937532     56          2 #> 1662  brew_temp:altitude parameter.power 0.99999995     56          2 #> 1663 brew_temp:bean_sun1 parameter.power 0.99916641     56          2 #> 1664 brew_temp:bean_sun2 parameter.power 0.99935372     56          2 #> 1665  altitude:bean_sun1 parameter.power 0.99916641     56          2 #> 1666  altitude:bean_sun2 parameter.power 0.99935372     56          2 #> 1667         (Intercept)    effect.power 0.99999997     57          2 #> 1668           brew_temp    effect.power 0.99999997     57          2 #> 1669            altitude    effect.power 0.99999997     57          2 #> 1670            bean_sun    effect.power 0.99985313     57          2 #> 1671  brew_temp:altitude    effect.power 0.99999997     57          2 #> 1672  brew_temp:bean_sun    effect.power 0.99985693     57          2 #> 1673   altitude:bean_sun    effect.power 0.99985313     57          2 #> 1674         (Intercept) parameter.power 0.99999997     57          2 #> 1675           brew_temp parameter.power 0.99999997     57          2 #> 1676            altitude parameter.power 0.99999997     57          2 #> 1677           bean_sun1 parameter.power 0.99940967     57          2 #> 1678           bean_sun2 parameter.power 0.99942201     57          2 #> 1679  brew_temp:altitude parameter.power 0.99999997     57          2 #> 1680 brew_temp:bean_sun1 parameter.power 0.99942607     57          2 #> 1681 brew_temp:bean_sun2 parameter.power 0.99942607     57          2 #> 1682  altitude:bean_sun1 parameter.power 0.99940967     57          2 #> 1683  altitude:bean_sun2 parameter.power 0.99942201     57          2 #> 1684         (Intercept)    effect.power 0.99999998     58          2 #> 1685           brew_temp    effect.power 0.99999998     58          2 #> 1686            altitude    effect.power 0.99999998     58          2 #> 1687            bean_sun    effect.power 0.99985922     58          2 #> 1688  brew_temp:altitude    effect.power 0.99999998     58          2 #> 1689  brew_temp:bean_sun    effect.power 0.99985555     58          2 #> 1690   altitude:bean_sun    effect.power 0.99985555     58          2 #> 1691         (Intercept) parameter.power 0.99999998     58          2 #> 1692           brew_temp parameter.power 0.99999998     58          2 #> 1693            altitude parameter.power 0.99999998     58          2 #> 1694           bean_sun1 parameter.power 0.99947671     58          2 #> 1695           bean_sun2 parameter.power 0.99947671     58          2 #> 1696  brew_temp:altitude parameter.power 0.99999998     58          2 #> 1697 brew_temp:bean_sun1 parameter.power 0.99946927     58          2 #> 1698 brew_temp:bean_sun2 parameter.power 0.99946927     58          2 #> 1699  altitude:bean_sun1 parameter.power 0.99946927     58          2 #> 1700  altitude:bean_sun2 parameter.power 0.99946927     58          2 #> 1701         (Intercept)    effect.power 0.99999999     59          2 #> 1702           brew_temp    effect.power 0.99999999     59          2 #> 1703            altitude    effect.power 0.99999999     59          2 #> 1704            bean_sun    effect.power 0.99989965     59          2 #> 1705  brew_temp:altitude    effect.power 0.99999999     59          2 #> 1706  brew_temp:bean_sun    effect.power 0.99989965     59          2 #> 1707   altitude:bean_sun    effect.power 0.99989965     59          2 #> 1708         (Intercept) parameter.power 0.99999999     59          2 #> 1709           brew_temp parameter.power 0.99999999     59          2 #> 1710            altitude parameter.power 0.99999999     59          2 #> 1711           bean_sun1 parameter.power 0.99952195     59          2 #> 1712           bean_sun2 parameter.power 0.99963846     59          2 #> 1713  brew_temp:altitude parameter.power 0.99999999     59          2 #> 1714 brew_temp:bean_sun1 parameter.power 0.99952195     59          2 #> 1715 brew_temp:bean_sun2 parameter.power 0.99963846     59          2 #> 1716  altitude:bean_sun1 parameter.power 0.99952195     59          2 #> 1717  altitude:bean_sun2 parameter.power 0.99963846     59          2 #> 1718         (Intercept)    effect.power 0.99999999     60          2 #> 1719           brew_temp    effect.power 0.99999999     60          2 #> 1720            altitude    effect.power 0.99999999     60          2 #> 1721            bean_sun    effect.power 0.99993049     60          2 #> 1722  brew_temp:altitude    effect.power 0.99999999     60          2 #> 1723  brew_temp:bean_sun    effect.power 0.99993049     60          2 #> 1724   altitude:bean_sun    effect.power 0.99993049     60          2 #> 1725         (Intercept) parameter.power 0.99999999     60          2 #> 1726           brew_temp parameter.power 0.99999999     60          2 #> 1727            altitude parameter.power 0.99999999     60          2 #> 1728           bean_sun1 parameter.power 0.99967464     60          2 #> 1729           bean_sun2 parameter.power 0.99967464     60          2 #> 1730  brew_temp:altitude parameter.power 0.99999999     60          2 #> 1731 brew_temp:bean_sun1 parameter.power 0.99967464     60          2 #> 1732 brew_temp:bean_sun2 parameter.power 0.99967464     60          2 #> 1733  altitude:bean_sun1 parameter.power 0.99967464     60          2 #> 1734  altitude:bean_sun2 parameter.power 0.99967464     60          2 #>      random_seed #> 18           123 #> 19           123 #> 20           123 #> 21           123 #> 22           123 #> 23           123 #> 24           123 #> 25           123 #> 26           123 #> 27           123 #> 28           123 #> 29           123 #> 30           123 #> 31           123 #> 32           123 #> 33           123 #> 34           123 #> 35           123 #> 36           123 #> 37           123 #> 38           123 #> 39           123 #> 40           123 #> 41           123 #> 42           123 #> 43           123 #> 44           123 #> 45           123 #> 46           123 #> 47           123 #> 48           123 #> 49           123 #> 50           123 #> 51           123 #> 52           123 #> 53           123 #> 54           123 #> 55           123 #> 56           123 #> 57           123 #> 58           123 #> 59           123 #> 60           123 #> 61           123 #> 62           123 #> 63           123 #> 64           123 #> 65           123 #> 66           123 #> 67           123 #> 68           123 #> 69           123 #> 70           123 #> 71           123 #> 72           123 #> 73           123 #> 74           123 #> 75           123 #> 76           123 #> 77           123 #> 78           123 #> 79           123 #> 80           123 #> 81           123 #> 82           123 #> 83           123 #> 84           123 #> 85           123 #> 86           123 #> 87           123 #> 88           123 #> 89           123 #> 90           123 #> 91           123 #> 92           123 #> 93           123 #> 94           123 #> 95           123 #> 96           123 #> 97           123 #> 98           123 #> 99           123 #> 100          123 #> 101          123 #> 102          123 #> 103          123 #> 104          123 #> 105          123 #> 106          123 #> 107          123 #> 108          123 #> 109          123 #> 110          123 #> 111          123 #> 112          123 #> 113          123 #> 114          123 #> 115          123 #> 116          123 #> 117          123 #> 118          123 #> 119          123 #> 120          123 #> 121          123 #> 122          123 #> 123          123 #> 124          123 #> 125          123 #> 126          123 #> 127          123 #> 128          123 #> 129          123 #> 130          123 #> 131          123 #> 132          123 #> 133          123 #> 134          123 #> 135          123 #> 136          123 #> 137          123 #> 138          123 #> 139          123 #> 140          123 #> 141          123 #> 142          123 #> 143          123 #> 144          123 #> 145          123 #> 146          123 #> 147          123 #> 148          123 #> 149          123 #> 150          123 #> 151          123 #> 152          123 #> 153          123 #> 154          123 #> 155          123 #> 156          123 #> 157          123 #> 158          123 #> 159          123 #> 160          123 #> 161          123 #> 162          123 #> 163          123 #> 164          123 #> 165          123 #> 166          123 #> 167          123 #> 168          123 #> 169          123 #> 170          123 #> 171          123 #> 172          123 #> 173          123 #> 174          123 #> 175          123 #> 176          123 #> 177          123 #> 178          123 #> 179          123 #> 180          123 #> 181          123 #> 182          123 #> 183          123 #> 184          123 #> 185          123 #> 186          123 #> 187          123 #> 188          123 #> 189          123 #> 190          123 #> 191          123 #> 192          123 #> 193          123 #> 194          123 #> 195          123 #> 196          123 #> 197          123 #> 198          123 #> 199          123 #> 200          123 #> 201          123 #> 202          123 #> 203          123 #> 204          123 #> 205          123 #> 206          123 #> 207          123 #> 208          123 #> 209          123 #> 210          123 #> 211          123 #> 212          123 #> 213          123 #> 214          123 #> 215          123 #> 216          123 #> 217          123 #> 218          123 #> 219          123 #> 220          123 #> 221          123 #> 222          123 #> 223          123 #> 224          123 #> 225          123 #> 226          123 #> 227          123 #> 228          123 #> 229          123 #> 230          123 #> 231          123 #> 232          123 #> 233          123 #> 234          123 #> 235          123 #> 236          123 #> 237          123 #> 238          123 #> 239          123 #> 240          123 #> 241          123 #> 242          123 #> 243          123 #> 244          123 #> 245          123 #> 246          123 #> 247          123 #> 248          123 #> 249          123 #> 250          123 #> 251          123 #> 252          123 #> 253          123 #> 254          123 #> 255          123 #> 256          123 #> 257          123 #> 258          123 #> 259          123 #> 260          123 #> 261          123 #> 262          123 #> 263          123 #> 264          123 #> 265          123 #> 266          123 #> 267          123 #> 268          123 #> 269          123 #> 270          123 #> 271          123 #> 272          123 #> 273          123 #> 274          123 #> 275          123 #> 276          123 #> 277          123 #> 278          123 #> 279          123 #> 280          123 #> 281          123 #> 282          123 #> 283          123 #> 284          123 #> 285          123 #> 286          123 #> 287          123 #> 288          123 #> 289          123 #> 290          123 #> 291          123 #> 292          123 #> 293          123 #> 294          123 #> 295          123 #> 296          123 #> 297          123 #> 298          123 #> 299          123 #> 300          123 #> 301          123 #> 302          123 #> 303          123 #> 304          123 #> 305          123 #> 306          123 #> 307          123 #> 308          123 #> 309          123 #> 310          123 #> 311          123 #> 312          123 #> 313          123 #> 314          123 #> 315          123 #> 316          123 #> 317          123 #> 318          123 #> 319          123 #> 320          123 #> 321          123 #> 322          123 #> 323          123 #> 324          123 #> 325          123 #> 326          123 #> 327          123 #> 328          123 #> 329          123 #> 330          123 #> 331          123 #> 332          123 #> 333          123 #> 334          123 #> 335          123 #> 336          123 #> 337          123 #> 338          123 #> 339          123 #> 340          123 #> 341          123 #> 342          123 #> 343          123 #> 344          123 #> 345          123 #> 346          123 #> 347          123 #> 348          123 #> 349          123 #> 350          123 #> 351          123 #> 352          123 #> 353          123 #> 354          123 #> 355          123 #> 356          123 #> 357          123 #> 358          123 #> 359          123 #> 360          123 #> 361          123 #> 362          123 #> 363          123 #> 364          123 #> 365          123 #> 366          123 #> 367          123 #> 368          123 #> 369          123 #> 370          123 #> 371          123 #> 372          123 #> 373          123 #> 374          123 #> 375          123 #> 376          123 #> 377          123 #> 378          123 #> 379          123 #> 380          123 #> 381          123 #> 382          123 #> 383          123 #> 384          123 #> 385          123 #> 386          123 #> 387          123 #> 388          123 #> 389          123 #> 390          123 #> 391          123 #> 392          123 #> 393          123 #> 394          123 #> 395          123 #> 396          123 #> 397          123 #> 398          123 #> 399          123 #> 400          123 #> 401          123 #> 402          123 #> 403          123 #> 404          123 #> 405          123 #> 406          123 #> 407          123 #> 408          123 #> 409          123 #> 410          123 #> 411          123 #> 412          123 #> 413          123 #> 414          123 #> 415          123 #> 416          123 #> 417          123 #> 418          123 #> 419          123 #> 420          123 #> 421          123 #> 422          123 #> 423          123 #> 424          123 #> 425          123 #> 426          123 #> 427          123 #> 428          123 #> 429          123 #> 430          123 #> 431          123 #> 432          123 #> 433          123 #> 434          123 #> 435          123 #> 436          123 #> 437          123 #> 438          123 #> 439          123 #> 440          123 #> 441          123 #> 442          123 #> 443          123 #> 444          123 #> 445          123 #> 446          123 #> 447          123 #> 448          123 #> 449          123 #> 450          123 #> 451          123 #> 452          123 #> 453          123 #> 454          123 #> 455          123 #> 456          123 #> 457          123 #> 458          123 #> 459          123 #> 460          123 #> 461          123 #> 462          123 #> 463          123 #> 464          123 #> 465          123 #> 466          123 #> 467          123 #> 468          123 #> 469          123 #> 470          123 #> 471          123 #> 472          123 #> 473          123 #> 474          123 #> 475          123 #> 476          123 #> 477          123 #> 478          123 #> 479          123 #> 480          123 #> 481          123 #> 482          123 #> 483          123 #> 484          123 #> 485          123 #> 486          123 #> 487          123 #> 488          123 #> 489          123 #> 490          123 #> 491          123 #> 492          123 #> 493          123 #> 494          123 #> 495          123 #> 496          123 #> 497          123 #> 498          123 #> 499          123 #> 500          123 #> 501          123 #> 502          123 #> 503          123 #> 504          123 #> 505          123 #> 506          123 #> 507          123 #> 508          123 #> 509          123 #> 510          123 #> 511          123 #> 512          123 #> 513          123 #> 514          123 #> 515          123 #> 516          123 #> 517          123 #> 518          123 #> 519          123 #> 520          123 #> 521          123 #> 522          123 #> 523          123 #> 524          123 #> 525          123 #> 526          123 #> 527          123 #> 528          123 #> 529          123 #> 530          123 #> 531          123 #> 532          123 #> 533          123 #> 534          123 #> 535          123 #> 536          123 #> 537          123 #> 538          123 #> 539          123 #> 540          123 #> 541          123 #> 542          123 #> 543          123 #> 544          123 #> 545          123 #> 546          123 #> 547          123 #> 548          123 #> 549          123 #> 550          123 #> 551          123 #> 552          123 #> 553          123 #> 554          123 #> 555          123 #> 556          123 #> 557          123 #> 558          123 #> 559          123 #> 560          123 #> 561          123 #> 562          123 #> 563          123 #> 564          123 #> 565          123 #> 566          123 #> 567          123 #> 568          123 #> 569          123 #> 570          123 #> 571          123 #> 572          123 #> 573          123 #> 574          123 #> 575          123 #> 576          123 #> 577          123 #> 578          123 #> 579          123 #> 580          123 #> 581          123 #> 582          123 #> 583          123 #> 584          123 #> 585          123 #> 586          123 #> 587          123 #> 588          123 #> 589          123 #> 590          123 #> 591          123 #> 592          123 #> 593          123 #> 594          123 #> 595          123 #> 596          123 #> 597          123 #> 598          123 #> 599          123 #> 600          123 #> 601          123 #> 602          123 #> 603          123 #> 604          123 #> 605          123 #> 606          123 #> 607          123 #> 608          123 #> 609          123 #> 610          123 #> 611          123 #> 612          123 #> 613          123 #> 614          123 #> 615          123 #> 616          123 #> 617          123 #> 618          123 #> 619          123 #> 620          123 #> 621          123 #> 622          123 #> 623          123 #> 624          123 #> 625          123 #> 626          123 #> 627          123 #> 628          123 #> 629          123 #> 630          123 #> 631          123 #> 632          123 #> 633          123 #> 634          123 #> 635          123 #> 636          123 #> 637          123 #> 638          123 #> 639          123 #> 640          123 #> 641          123 #> 642          123 #> 643          123 #> 644          123 #> 645          123 #> 646          123 #> 647          123 #> 648          123 #> 649          123 #> 650          123 #> 651          123 #> 652          123 #> 653          123 #> 654          123 #> 655          123 #> 656          123 #> 657          123 #> 658          123 #> 659          123 #> 660          123 #> 661          123 #> 662          123 #> 663          123 #> 664          123 #> 665          123 #> 666          123 #> 667          123 #> 668          123 #> 669          123 #> 670          123 #> 671          123 #> 672          123 #> 673          123 #> 674          123 #> 675          123 #> 676          123 #> 677          123 #> 678          123 #> 679          123 #> 680          123 #> 681          123 #> 682          123 #> 683          123 #> 684          123 #> 685          123 #> 686          123 #> 687          123 #> 688          123 #> 689          123 #> 690          123 #> 691          123 #> 692          123 #> 693          123 #> 694          123 #> 695          123 #> 696          123 #> 697          123 #> 698          123 #> 699          123 #> 700          123 #> 701          123 #> 702          123 #> 703          123 #> 704          123 #> 705          123 #> 706          123 #> 707          123 #> 708          123 #> 709          123 #> 710          123 #> 711          123 #> 712          123 #> 713          123 #> 714          123 #> 715          123 #> 716          123 #> 717          123 #> 718          123 #> 719          123 #> 720          123 #> 721          123 #> 722          123 #> 723          123 #> 724          123 #> 725          123 #> 726          123 #> 727          123 #> 728          123 #> 729          123 #> 730          123 #> 731          123 #> 732          123 #> 733          123 #> 734          123 #> 735          123 #> 736          123 #> 737          123 #> 738          123 #> 739          123 #> 740          123 #> 741          123 #> 742          123 #> 743          123 #> 744          123 #> 745          123 #> 746          123 #> 747          123 #> 748          123 #> 749          123 #> 750          123 #> 751          123 #> 752          123 #> 753          123 #> 754          123 #> 755          123 #> 756          123 #> 757          123 #> 758          123 #> 759          123 #> 760          123 #> 761          123 #> 762          123 #> 763          123 #> 764          123 #> 765          123 #> 766          123 #> 767          123 #> 768          123 #> 769          123 #> 770          123 #> 771          123 #> 772          123 #> 773          123 #> 774          123 #> 775          123 #> 776          123 #> 777          123 #> 778          123 #> 779          123 #> 780          123 #> 781          123 #> 782          123 #> 783          123 #> 784          123 #> 785          123 #> 786          123 #> 787          123 #> 788          123 #> 789          123 #> 790          123 #> 791          123 #> 792          123 #> 793          123 #> 794          123 #> 795          123 #> 796          123 #> 797          123 #> 798          123 #> 799          123 #> 800          123 #> 801          123 #> 802          123 #> 803          123 #> 804          123 #> 805          123 #> 806          123 #> 807          123 #> 808          123 #> 809          123 #> 810          123 #> 811          123 #> 812          123 #> 813          123 #> 814          123 #> 815          123 #> 816          123 #> 817          123 #> 818          123 #> 819          123 #> 820          123 #> 821          123 #> 822          123 #> 823          123 #> 824          123 #> 825          123 #> 826          123 #> 827          123 #> 828          123 #> 829          123 #> 830          123 #> 831          123 #> 832          123 #> 833          123 #> 834          123 #> 835          123 #> 836          123 #> 837          123 #> 838          123 #> 839          123 #> 840          123 #> 841          123 #> 842          123 #> 843          123 #> 844          123 #> 845          123 #> 846          123 #> 847          123 #> 848          123 #> 849          123 #> 850          123 #> 851          123 #> 852          123 #> 853          123 #> 854          123 #> 855          123 #> 856          123 #> 857          123 #> 858          123 #> 859          123 #> 860          123 #> 861          123 #> 862          123 #> 863          123 #> 864          123 #> 865          123 #> 866          123 #> 867          123 #> 885          123 #> 886          123 #> 887          123 #> 888          123 #> 889          123 #> 890          123 #> 891          123 #> 892          123 #> 893          123 #> 894          123 #> 895          123 #> 896          123 #> 897          123 #> 898          123 #> 899          123 #> 900          123 #> 901          123 #> 902          123 #> 903          123 #> 904          123 #> 905          123 #> 906          123 #> 907          123 #> 908          123 #> 909          123 #> 910          123 #> 911          123 #> 912          123 #> 913          123 #> 914          123 #> 915          123 #> 916          123 #> 917          123 #> 918          123 #> 919          123 #> 920          123 #> 921          123 #> 922          123 #> 923          123 #> 924          123 #> 925          123 #> 926          123 #> 927          123 #> 928          123 #> 929          123 #> 930          123 #> 931          123 #> 932          123 #> 933          123 #> 934          123 #> 935          123 #> 936          123 #> 937          123 #> 938          123 #> 939          123 #> 940          123 #> 941          123 #> 942          123 #> 943          123 #> 944          123 #> 945          123 #> 946          123 #> 947          123 #> 948          123 #> 949          123 #> 950          123 #> 951          123 #> 952          123 #> 953          123 #> 954          123 #> 955          123 #> 956          123 #> 957          123 #> 958          123 #> 959          123 #> 960          123 #> 961          123 #> 962          123 #> 963          123 #> 964          123 #> 965          123 #> 966          123 #> 967          123 #> 968          123 #> 969          123 #> 970          123 #> 971          123 #> 972          123 #> 973          123 #> 974          123 #> 975          123 #> 976          123 #> 977          123 #> 978          123 #> 979          123 #> 980          123 #> 981          123 #> 982          123 #> 983          123 #> 984          123 #> 985          123 #> 986          123 #> 987          123 #> 988          123 #> 989          123 #> 990          123 #> 991          123 #> 992          123 #> 993          123 #> 994          123 #> 995          123 #> 996          123 #> 997          123 #> 998          123 #> 999          123 #> 1000         123 #> 1001         123 #> 1002         123 #> 1003         123 #> 1004         123 #> 1005         123 #> 1006         123 #> 1007         123 #> 1008         123 #> 1009         123 #> 1010         123 #> 1011         123 #> 1012         123 #> 1013         123 #> 1014         123 #> 1015         123 #> 1016         123 #> 1017         123 #> 1018         123 #> 1019         123 #> 1020         123 #> 1021         123 #> 1022         123 #> 1023         123 #> 1024         123 #> 1025         123 #> 1026         123 #> 1027         123 #> 1028         123 #> 1029         123 #> 1030         123 #> 1031         123 #> 1032         123 #> 1033         123 #> 1034         123 #> 1035         123 #> 1036         123 #> 1037         123 #> 1038         123 #> 1039         123 #> 1040         123 #> 1041         123 #> 1042         123 #> 1043         123 #> 1044         123 #> 1045         123 #> 1046         123 #> 1047         123 #> 1048         123 #> 1049         123 #> 1050         123 #> 1051         123 #> 1052         123 #> 1053         123 #> 1054         123 #> 1055         123 #> 1056         123 #> 1057         123 #> 1058         123 #> 1059         123 #> 1060         123 #> 1061         123 #> 1062         123 #> 1063         123 #> 1064         123 #> 1065         123 #> 1066         123 #> 1067         123 #> 1068         123 #> 1069         123 #> 1070         123 #> 1071         123 #> 1072         123 #> 1073         123 #> 1074         123 #> 1075         123 #> 1076         123 #> 1077         123 #> 1078         123 #> 1079         123 #> 1080         123 #> 1081         123 #> 1082         123 #> 1083         123 #> 1084         123 #> 1085         123 #> 1086         123 #> 1087         123 #> 1088         123 #> 1089         123 #> 1090         123 #> 1091         123 #> 1092         123 #> 1093         123 #> 1094         123 #> 1095         123 #> 1096         123 #> 1097         123 #> 1098         123 #> 1099         123 #> 1100         123 #> 1101         123 #> 1102         123 #> 1103         123 #> 1104         123 #> 1105         123 #> 1106         123 #> 1107         123 #> 1108         123 #> 1109         123 #> 1110         123 #> 1111         123 #> 1112         123 #> 1113         123 #> 1114         123 #> 1115         123 #> 1116         123 #> 1117         123 #> 1118         123 #> 1119         123 #> 1120         123 #> 1121         123 #> 1122         123 #> 1123         123 #> 1124         123 #> 1125         123 #> 1126         123 #> 1127         123 #> 1128         123 #> 1129         123 #> 1130         123 #> 1131         123 #> 1132         123 #> 1133         123 #> 1134         123 #> 1135         123 #> 1136         123 #> 1137         123 #> 1138         123 #> 1139         123 #> 1140         123 #> 1141         123 #> 1142         123 #> 1143         123 #> 1144         123 #> 1145         123 #> 1146         123 #> 1147         123 #> 1148         123 #> 1149         123 #> 1150         123 #> 1151         123 #> 1152         123 #> 1153         123 #> 1154         123 #> 1155         123 #> 1156         123 #> 1157         123 #> 1158         123 #> 1159         123 #> 1160         123 #> 1161         123 #> 1162         123 #> 1163         123 #> 1164         123 #> 1165         123 #> 1166         123 #> 1167         123 #> 1168         123 #> 1169         123 #> 1170         123 #> 1171         123 #> 1172         123 #> 1173         123 #> 1174         123 #> 1175         123 #> 1176         123 #> 1177         123 #> 1178         123 #> 1179         123 #> 1180         123 #> 1181         123 #> 1182         123 #> 1183         123 #> 1184         123 #> 1185         123 #> 1186         123 #> 1187         123 #> 1188         123 #> 1189         123 #> 1190         123 #> 1191         123 #> 1192         123 #> 1193         123 #> 1194         123 #> 1195         123 #> 1196         123 #> 1197         123 #> 1198         123 #> 1199         123 #> 1200         123 #> 1201         123 #> 1202         123 #> 1203         123 #> 1204         123 #> 1205         123 #> 1206         123 #> 1207         123 #> 1208         123 #> 1209         123 #> 1210         123 #> 1211         123 #> 1212         123 #> 1213         123 #> 1214         123 #> 1215         123 #> 1216         123 #> 1217         123 #> 1218         123 #> 1219         123 #> 1220         123 #> 1221         123 #> 1222         123 #> 1223         123 #> 1224         123 #> 1225         123 #> 1226         123 #> 1227         123 #> 1228         123 #> 1229         123 #> 1230         123 #> 1231         123 #> 1232         123 #> 1233         123 #> 1234         123 #> 1235         123 #> 1236         123 #> 1237         123 #> 1238         123 #> 1239         123 #> 1240         123 #> 1241         123 #> 1242         123 #> 1243         123 #> 1244         123 #> 1245         123 #> 1246         123 #> 1247         123 #> 1248         123 #> 1249         123 #> 1250         123 #> 1251         123 #> 1252         123 #> 1253         123 #> 1254         123 #> 1255         123 #> 1256         123 #> 1257         123 #> 1258         123 #> 1259         123 #> 1260         123 #> 1261         123 #> 1262         123 #> 1263         123 #> 1264         123 #> 1265         123 #> 1266         123 #> 1267         123 #> 1268         123 #> 1269         123 #> 1270         123 #> 1271         123 #> 1272         123 #> 1273         123 #> 1274         123 #> 1275         123 #> 1276         123 #> 1277         123 #> 1278         123 #> 1279         123 #> 1280         123 #> 1281         123 #> 1282         123 #> 1283         123 #> 1284         123 #> 1285         123 #> 1286         123 #> 1287         123 #> 1288         123 #> 1289         123 #> 1290         123 #> 1291         123 #> 1292         123 #> 1293         123 #> 1294         123 #> 1295         123 #> 1296         123 #> 1297         123 #> 1298         123 #> 1299         123 #> 1300         123 #> 1301         123 #> 1302         123 #> 1303         123 #> 1304         123 #> 1305         123 #> 1306         123 #> 1307         123 #> 1308         123 #> 1309         123 #> 1310         123 #> 1311         123 #> 1312         123 #> 1313         123 #> 1314         123 #> 1315         123 #> 1316         123 #> 1317         123 #> 1318         123 #> 1319         123 #> 1320         123 #> 1321         123 #> 1322         123 #> 1323         123 #> 1324         123 #> 1325         123 #> 1326         123 #> 1327         123 #> 1328         123 #> 1329         123 #> 1330         123 #> 1331         123 #> 1332         123 #> 1333         123 #> 1334         123 #> 1335         123 #> 1336         123 #> 1337         123 #> 1338         123 #> 1339         123 #> 1340         123 #> 1341         123 #> 1342         123 #> 1343         123 #> 1344         123 #> 1345         123 #> 1346         123 #> 1347         123 #> 1348         123 #> 1349         123 #> 1350         123 #> 1351         123 #> 1352         123 #> 1353         123 #> 1354         123 #> 1355         123 #> 1356         123 #> 1357         123 #> 1358         123 #> 1359         123 #> 1360         123 #> 1361         123 #> 1362         123 #> 1363         123 #> 1364         123 #> 1365         123 #> 1366         123 #> 1367         123 #> 1368         123 #> 1369         123 #> 1370         123 #> 1371         123 #> 1372         123 #> 1373         123 #> 1374         123 #> 1375         123 #> 1376         123 #> 1377         123 #> 1378         123 #> 1379         123 #> 1380         123 #> 1381         123 #> 1382         123 #> 1383         123 #> 1384         123 #> 1385         123 #> 1386         123 #> 1387         123 #> 1388         123 #> 1389         123 #> 1390         123 #> 1391         123 #> 1392         123 #> 1393         123 #> 1394         123 #> 1395         123 #> 1396         123 #> 1397         123 #> 1398         123 #> 1399         123 #> 1400         123 #> 1401         123 #> 1402         123 #> 1403         123 #> 1404         123 #> 1405         123 #> 1406         123 #> 1407         123 #> 1408         123 #> 1409         123 #> 1410         123 #> 1411         123 #> 1412         123 #> 1413         123 #> 1414         123 #> 1415         123 #> 1416         123 #> 1417         123 #> 1418         123 #> 1419         123 #> 1420         123 #> 1421         123 #> 1422         123 #> 1423         123 #> 1424         123 #> 1425         123 #> 1426         123 #> 1427         123 #> 1428         123 #> 1429         123 #> 1430         123 #> 1431         123 #> 1432         123 #> 1433         123 #> 1434         123 #> 1435         123 #> 1436         123 #> 1437         123 #> 1438         123 #> 1439         123 #> 1440         123 #> 1441         123 #> 1442         123 #> 1443         123 #> 1444         123 #> 1445         123 #> 1446         123 #> 1447         123 #> 1448         123 #> 1449         123 #> 1450         123 #> 1451         123 #> 1452         123 #> 1453         123 #> 1454         123 #> 1455         123 #> 1456         123 #> 1457         123 #> 1458         123 #> 1459         123 #> 1460         123 #> 1461         123 #> 1462         123 #> 1463         123 #> 1464         123 #> 1465         123 #> 1466         123 #> 1467         123 #> 1468         123 #> 1469         123 #> 1470         123 #> 1471         123 #> 1472         123 #> 1473         123 #> 1474         123 #> 1475         123 #> 1476         123 #> 1477         123 #> 1478         123 #> 1479         123 #> 1480         123 #> 1481         123 #> 1482         123 #> 1483         123 #> 1484         123 #> 1485         123 #> 1486         123 #> 1487         123 #> 1488         123 #> 1489         123 #> 1490         123 #> 1491         123 #> 1492         123 #> 1493         123 #> 1494         123 #> 1495         123 #> 1496         123 #> 1497         123 #> 1498         123 #> 1499         123 #> 1500         123 #> 1501         123 #> 1502         123 #> 1503         123 #> 1504         123 #> 1505         123 #> 1506         123 #> 1507         123 #> 1508         123 #> 1509         123 #> 1510         123 #> 1511         123 #> 1512         123 #> 1513         123 #> 1514         123 #> 1515         123 #> 1516         123 #> 1517         123 #> 1518         123 #> 1519         123 #> 1520         123 #> 1521         123 #> 1522         123 #> 1523         123 #> 1524         123 #> 1525         123 #> 1526         123 #> 1527         123 #> 1528         123 #> 1529         123 #> 1530         123 #> 1531         123 #> 1532         123 #> 1533         123 #> 1534         123 #> 1535         123 #> 1536         123 #> 1537         123 #> 1538         123 #> 1539         123 #> 1540         123 #> 1541         123 #> 1542         123 #> 1543         123 #> 1544         123 #> 1545         123 #> 1546         123 #> 1547         123 #> 1548         123 #> 1549         123 #> 1550         123 #> 1551         123 #> 1552         123 #> 1553         123 #> 1554         123 #> 1555         123 #> 1556         123 #> 1557         123 #> 1558         123 #> 1559         123 #> 1560         123 #> 1561         123 #> 1562         123 #> 1563         123 #> 1564         123 #> 1565         123 #> 1566         123 #> 1567         123 #> 1568         123 #> 1569         123 #> 1570         123 #> 1571         123 #> 1572         123 #> 1573         123 #> 1574         123 #> 1575         123 #> 1576         123 #> 1577         123 #> 1578         123 #> 1579         123 #> 1580         123 #> 1581         123 #> 1582         123 #> 1583         123 #> 1584         123 #> 1585         123 #> 1586         123 #> 1587         123 #> 1588         123 #> 1589         123 #> 1590         123 #> 1591         123 #> 1592         123 #> 1593         123 #> 1594         123 #> 1595         123 #> 1596         123 #> 1597         123 #> 1598         123 #> 1599         123 #> 1600         123 #> 1601         123 #> 1602         123 #> 1603         123 #> 1604         123 #> 1605         123 #> 1606         123 #> 1607         123 #> 1608         123 #> 1609         123 #> 1610         123 #> 1611         123 #> 1612         123 #> 1613         123 #> 1614         123 #> 1615         123 #> 1616         123 #> 1617         123 #> 1618         123 #> 1619         123 #> 1620         123 #> 1621         123 #> 1622         123 #> 1623         123 #> 1624         123 #> 1625         123 #> 1626         123 #> 1627         123 #> 1628         123 #> 1629         123 #> 1630         123 #> 1631         123 #> 1632         123 #> 1633         123 #> 1634         123 #> 1635         123 #> 1636         123 #> 1637         123 #> 1638         123 #> 1639         123 #> 1640         123 #> 1641         123 #> 1642         123 #> 1643         123 #> 1644         123 #> 1645         123 #> 1646         123 #> 1647         123 #> 1648         123 #> 1649         123 #> 1650         123 #> 1651         123 #> 1652         123 #> 1653         123 #> 1654         123 #> 1655         123 #> 1656         123 #> 1657         123 #> 1658         123 #> 1659         123 #> 1660         123 #> 1661         123 #> 1662         123 #> 1663         123 #> 1664         123 #> 1665         123 #> 1666         123 #> 1667         123 #> 1668         123 #> 1669         123 #> 1670         123 #> 1671         123 #> 1672         123 #> 1673         123 #> 1674         123 #> 1675         123 #> 1676         123 #> 1677         123 #> 1678         123 #> 1679         123 #> 1680         123 #> 1681         123 #> 1682         123 #> 1683         123 #> 1684         123 #> 1685         123 #> 1686         123 #> 1687         123 #> 1688         123 #> 1689         123 #> 1690         123 #> 1691         123 #> 1692         123 #> 1693         123 #> 1694         123 #> 1695         123 #> 1696         123 #> 1697         123 #> 1698         123 #> 1699         123 #> 1700         123 #> 1701         123 #> 1702         123 #> 1703         123 #> 1704         123 #> 1705         123 #> 1706         123 #> 1707         123 #> 1708         123 #> 1709         123 #> 1710         123 #> 1711         123 #> 1712         123 #> 1713         123 #> 1714         123 #> 1715         123 #> 1716         123 #> 1717         123 #> 1718         123 #> 1719         123 #> 1720         123 #> 1721         123 #> 1722         123 #> 1723         123 #> 1724         123 #> 1725         123 #> 1726         123 #> 1727         123 #> 1728         123 #> 1729         123 #> 1730         123 #> 1731         123 #> 1732         123 #> 1733         123 #> 1734         123 #> Power curve generation captured the following warning/error messages: #> Function   | Type | N | Message #> Evaluation | Warn | 2 | Message: 'skpr: NA indicates not enough degrees of freedom to estimate power for those terms.' if(skpr:::run_documentation()) { #Generate power curve for a binomial model calculate_power_curves(trials=seq(50,150,by=10),                       candidateset = cand_set,                       model = ~.,                       effectsize = c(0.6,0.9),                       eval_function = \"eval_design_mc\",                       eval_args = list(nsim = 100, glmfamily = \"binomial\")) }  #>      parameter               type power trials effectsize_low effectsize_high #> 1  (Intercept)    effect.power.mc  0.89     50            0.6             0.9 #> 2    brew_temp    effect.power.mc  0.70     50            0.6             0.9 #> 3     altitude    effect.power.mc  0.62     50            0.6             0.9 #> 4     bean_sun    effect.power.mc  0.24     50            0.6             0.9 #> 5  (Intercept) parameter.power.mc  0.89     50            0.6             0.9 #> 6    brew_temp parameter.power.mc  0.70     50            0.6             0.9 #> 7     altitude parameter.power.mc  0.62     50            0.6             0.9 #> 8    bean_sun1 parameter.power.mc  0.22     50            0.6             0.9 #> 9    bean_sun2 parameter.power.mc  0.37     50            0.6             0.9 #> 10 (Intercept)    effect.power.mc  0.93     60            0.6             0.9 #> 11   brew_temp    effect.power.mc  0.74     60            0.6             0.9 #> 12    altitude    effect.power.mc  0.73     60            0.6             0.9 #> 13    bean_sun    effect.power.mc  0.41     60            0.6             0.9 #> 14 (Intercept) parameter.power.mc  0.93     60            0.6             0.9 #> 15   brew_temp parameter.power.mc  0.74     60            0.6             0.9 #> 16    altitude parameter.power.mc  0.73     60            0.6             0.9 #> 17   bean_sun1 parameter.power.mc  0.36     60            0.6             0.9 #> 18   bean_sun2 parameter.power.mc  0.42     60            0.6             0.9 #> 19 (Intercept)    effect.power.mc  0.95     70            0.6             0.9 #> 20   brew_temp    effect.power.mc  0.82     70            0.6             0.9 #> 21    altitude    effect.power.mc  0.87     70            0.6             0.9 #> 22    bean_sun    effect.power.mc  0.45     70            0.6             0.9 #> 23 (Intercept) parameter.power.mc  0.95     70            0.6             0.9 #> 24   brew_temp parameter.power.mc  0.82     70            0.6             0.9 #> 25    altitude parameter.power.mc  0.87     70            0.6             0.9 #> 26   bean_sun1 parameter.power.mc  0.40     70            0.6             0.9 #> 27   bean_sun2 parameter.power.mc  0.56     70            0.6             0.9 #> 28 (Intercept)    effect.power.mc  1.00     80            0.6             0.9 #> 29   brew_temp    effect.power.mc  0.87     80            0.6             0.9 #> 30    altitude    effect.power.mc  0.85     80            0.6             0.9 #> 31    bean_sun    effect.power.mc  0.54     80            0.6             0.9 #> 32 (Intercept) parameter.power.mc  1.00     80            0.6             0.9 #> 33   brew_temp parameter.power.mc  0.87     80            0.6             0.9 #> 34    altitude parameter.power.mc  0.85     80            0.6             0.9 #> 35   bean_sun1 parameter.power.mc  0.51     80            0.6             0.9 #> 36   bean_sun2 parameter.power.mc  0.62     80            0.6             0.9 #> 37 (Intercept)    effect.power.mc  1.00     90            0.6             0.9 #> 38   brew_temp    effect.power.mc  0.89     90            0.6             0.9 #> 39    altitude    effect.power.mc  0.92     90            0.6             0.9 #> 40    bean_sun    effect.power.mc  0.57     90            0.6             0.9 #> 41 (Intercept) parameter.power.mc  1.00     90            0.6             0.9 #> 42   brew_temp parameter.power.mc  0.89     90            0.6             0.9 #> 43    altitude parameter.power.mc  0.92     90            0.6             0.9 #> 44   bean_sun1 parameter.power.mc  0.47     90            0.6             0.9 #> 45   bean_sun2 parameter.power.mc  0.60     90            0.6             0.9 #> 46 (Intercept)    effect.power.mc  1.00    100            0.6             0.9 #> 47   brew_temp    effect.power.mc  0.96    100            0.6             0.9 #> 48    altitude    effect.power.mc  0.93    100            0.6             0.9 #> 49    bean_sun    effect.power.mc  0.67    100            0.6             0.9 #> 50 (Intercept) parameter.power.mc  1.00    100            0.6             0.9 #> 51   brew_temp parameter.power.mc  0.96    100            0.6             0.9 #> 52    altitude parameter.power.mc  0.93    100            0.6             0.9 #> 53   bean_sun1 parameter.power.mc  0.62    100            0.6             0.9 #> 54   bean_sun2 parameter.power.mc  0.77    100            0.6             0.9 #> 55 (Intercept)    effect.power.mc  1.00    110            0.6             0.9 #> 56   brew_temp    effect.power.mc  0.98    110            0.6             0.9 #> 57    altitude    effect.power.mc  0.96    110            0.6             0.9 #> 58    bean_sun    effect.power.mc  0.79    110            0.6             0.9 #> 59 (Intercept) parameter.power.mc  1.00    110            0.6             0.9 #> 60   brew_temp parameter.power.mc  0.98    110            0.6             0.9 #> 61    altitude parameter.power.mc  0.96    110            0.6             0.9 #> 62   bean_sun1 parameter.power.mc  0.75    110            0.6             0.9 #> 63   bean_sun2 parameter.power.mc  0.79    110            0.6             0.9 #> 64 (Intercept)    effect.power.mc  1.00    120            0.6             0.9 #> 65   brew_temp    effect.power.mc  0.98    120            0.6             0.9 #> 66    altitude    effect.power.mc  0.97    120            0.6             0.9 #> 67    bean_sun    effect.power.mc  0.82    120            0.6             0.9 #> 68 (Intercept) parameter.power.mc  1.00    120            0.6             0.9 #> 69   brew_temp parameter.power.mc  0.98    120            0.6             0.9 #> 70    altitude parameter.power.mc  0.97    120            0.6             0.9 #> 71   bean_sun1 parameter.power.mc  0.69    120            0.6             0.9 #> 72   bean_sun2 parameter.power.mc  0.77    120            0.6             0.9 #> 73 (Intercept)    effect.power.mc  1.00    130            0.6             0.9 #> 74   brew_temp    effect.power.mc  0.97    130            0.6             0.9 #> 75    altitude    effect.power.mc  0.98    130            0.6             0.9 #> 76    bean_sun    effect.power.mc  0.78    130            0.6             0.9 #> 77 (Intercept) parameter.power.mc  1.00    130            0.6             0.9 #> 78   brew_temp parameter.power.mc  0.97    130            0.6             0.9 #> 79    altitude parameter.power.mc  0.98    130            0.6             0.9 #> 80   bean_sun1 parameter.power.mc  0.69    130            0.6             0.9 #> 81   bean_sun2 parameter.power.mc  0.82    130            0.6             0.9 #> 82 (Intercept)    effect.power.mc  1.00    140            0.6             0.9 #> 83   brew_temp    effect.power.mc  0.99    140            0.6             0.9 #> 84    altitude    effect.power.mc  0.97    140            0.6             0.9 #> 85    bean_sun    effect.power.mc  0.88    140            0.6             0.9 #> 86 (Intercept) parameter.power.mc  1.00    140            0.6             0.9 #> 87   brew_temp parameter.power.mc  0.99    140            0.6             0.9 #> 88    altitude parameter.power.mc  0.97    140            0.6             0.9 #> 89   bean_sun1 parameter.power.mc  0.80    140            0.6             0.9 #> 90   bean_sun2 parameter.power.mc  0.91    140            0.6             0.9 #> 91 (Intercept)    effect.power.mc  1.00    150            0.6             0.9 #> 92   brew_temp    effect.power.mc  0.99    150            0.6             0.9 #> 93    altitude    effect.power.mc  1.00    150            0.6             0.9 #> 94    bean_sun    effect.power.mc  0.87    150            0.6             0.9 #> 95 (Intercept) parameter.power.mc  1.00    150            0.6             0.9 #> 96   brew_temp parameter.power.mc  0.99    150            0.6             0.9 #> 97    altitude parameter.power.mc  1.00    150            0.6             0.9 #> 98   bean_sun1 parameter.power.mc  0.83    150            0.6             0.9 #> 99   bean_sun2 parameter.power.mc  0.87    150            0.6             0.9 #>    random_seed #> 1          123 #> 2          123 #> 3          123 #> 4          123 #> 5          123 #> 6          123 #> 7          123 #> 8          123 #> 9          123 #> 10         123 #> 11         123 #> 12         123 #> 13         123 #> 14         123 #> 15         123 #> 16         123 #> 17         123 #> 18         123 #> 19         123 #> 20         123 #> 21         123 #> 22         123 #> 23         123 #> 24         123 #> 25         123 #> 26         123 #> 27         123 #> 28         123 #> 29         123 #> 30         123 #> 31         123 #> 32         123 #> 33         123 #> 34         123 #> 35         123 #> 36         123 #> 37         123 #> 38         123 #> 39         123 #> 40         123 #> 41         123 #> 42         123 #> 43         123 #> 44         123 #> 45         123 #> 46         123 #> 47         123 #> 48         123 #> 49         123 #> 50         123 #> 51         123 #> 52         123 #> 53         123 #> 54         123 #> 55         123 #> 56         123 #> 57         123 #> 58         123 #> 59         123 #> 60         123 #> 61         123 #> 62         123 #> 63         123 #> 64         123 #> 65         123 #> 66         123 #> 67         123 #> 68         123 #> 69         123 #> 70         123 #> 71         123 #> 72         123 #> 73         123 #> 74         123 #> 75         123 #> 76         123 #> 77         123 #> 78         123 #> 79         123 #> 80         123 #> 81         123 #> 82         123 #> 83         123 #> 84         123 #> 85         123 #> 86         123 #> 87         123 #> 88         123 #> 89         123 #> 90         123 #> 91         123 #> 92         123 #> 93         123 #> 94         123 #> 95         123 #> 96         123 #> 97         123 #> 98         123 #> 99         123 #> Power curve generation captured the following warning/error messages: #> Function   | Type | N | Message #> Evaluation | Warn | 1 | Message: 'skpr: Partial or complete separation likely detected in the binomial Monte Carlo simulation. Increase the number of runs in the design or decrease the number of model parameters to improve power.' if(skpr:::run_documentation()) { #Generate power curve for a binomial model and multiple effect sizes calculate_power_curves(trials=seq(50,150,by=10),                       candidateset = cand_set,                       model = ~.,                       effectsize = list(c(0.5,0.9),c(0.6,0.9)),                       eval_function = \"eval_design_mc\",                       eval_args = list(nsim = 100, glmfamily = \"binomial\")) }  #>       parameter               type power trials effectsize_low effectsize_high #> 1   (Intercept)    effect.power.mc  0.72     50            0.5             0.9 #> 2     brew_temp    effect.power.mc  0.81     50            0.5             0.9 #> 3      altitude    effect.power.mc  0.80     50            0.5             0.9 #> 4      bean_sun    effect.power.mc  0.42     50            0.5             0.9 #> 5   (Intercept) parameter.power.mc  0.72     50            0.5             0.9 #> 6     brew_temp parameter.power.mc  0.81     50            0.5             0.9 #> 7      altitude parameter.power.mc  0.80     50            0.5             0.9 #> 8     bean_sun1 parameter.power.mc  0.42     50            0.5             0.9 #> 9     bean_sun2 parameter.power.mc  0.63     50            0.5             0.9 #> 10  (Intercept)    effect.power.mc  0.80     60            0.5             0.9 #> 11    brew_temp    effect.power.mc  0.89     60            0.5             0.9 #> 12     altitude    effect.power.mc  0.87     60            0.5             0.9 #> 13     bean_sun    effect.power.mc  0.46     60            0.5             0.9 #> 14  (Intercept) parameter.power.mc  0.80     60            0.5             0.9 #> 15    brew_temp parameter.power.mc  0.89     60            0.5             0.9 #> 16     altitude parameter.power.mc  0.87     60            0.5             0.9 #> 17    bean_sun1 parameter.power.mc  0.54     60            0.5             0.9 #> 18    bean_sun2 parameter.power.mc  0.51     60            0.5             0.9 #> 19  (Intercept)    effect.power.mc  0.96     70            0.5             0.9 #> 20    brew_temp    effect.power.mc  0.92     70            0.5             0.9 #> 21     altitude    effect.power.mc  0.93     70            0.5             0.9 #> 22     bean_sun    effect.power.mc  0.63     70            0.5             0.9 #> 23  (Intercept) parameter.power.mc  0.96     70            0.5             0.9 #> 24    brew_temp parameter.power.mc  0.92     70            0.5             0.9 #> 25     altitude parameter.power.mc  0.93     70            0.5             0.9 #> 26    bean_sun1 parameter.power.mc  0.56     70            0.5             0.9 #> 27    bean_sun2 parameter.power.mc  0.67     70            0.5             0.9 #> 28  (Intercept)    effect.power.mc  0.96     80            0.5             0.9 #> 29    brew_temp    effect.power.mc  0.95     80            0.5             0.9 #> 30     altitude    effect.power.mc  0.95     80            0.5             0.9 #> 31     bean_sun    effect.power.mc  0.68     80            0.5             0.9 #> 32  (Intercept) parameter.power.mc  0.96     80            0.5             0.9 #> 33    brew_temp parameter.power.mc  0.95     80            0.5             0.9 #> 34     altitude parameter.power.mc  0.95     80            0.5             0.9 #> 35    bean_sun1 parameter.power.mc  0.69     80            0.5             0.9 #> 36    bean_sun2 parameter.power.mc  0.76     80            0.5             0.9 #> 37  (Intercept)    effect.power.mc  0.95     90            0.5             0.9 #> 38    brew_temp    effect.power.mc  0.97     90            0.5             0.9 #> 39     altitude    effect.power.mc  0.99     90            0.5             0.9 #> 40     bean_sun    effect.power.mc  0.81     90            0.5             0.9 #> 41  (Intercept) parameter.power.mc  0.95     90            0.5             0.9 #> 42    brew_temp parameter.power.mc  0.97     90            0.5             0.9 #> 43     altitude parameter.power.mc  0.99     90            0.5             0.9 #> 44    bean_sun1 parameter.power.mc  0.76     90            0.5             0.9 #> 45    bean_sun2 parameter.power.mc  0.85     90            0.5             0.9 #> 46  (Intercept)    effect.power.mc  0.99    100            0.5             0.9 #> 47    brew_temp    effect.power.mc  0.99    100            0.5             0.9 #> 48     altitude    effect.power.mc  1.00    100            0.5             0.9 #> 49     bean_sun    effect.power.mc  0.87    100            0.5             0.9 #> 50  (Intercept) parameter.power.mc  0.99    100            0.5             0.9 #> 51    brew_temp parameter.power.mc  0.99    100            0.5             0.9 #> 52     altitude parameter.power.mc  1.00    100            0.5             0.9 #> 53    bean_sun1 parameter.power.mc  0.84    100            0.5             0.9 #> 54    bean_sun2 parameter.power.mc  0.93    100            0.5             0.9 #> 55  (Intercept)    effect.power.mc  0.99    110            0.5             0.9 #> 56    brew_temp    effect.power.mc  0.99    110            0.5             0.9 #> 57     altitude    effect.power.mc  0.99    110            0.5             0.9 #> 58     bean_sun    effect.power.mc  0.91    110            0.5             0.9 #> 59  (Intercept) parameter.power.mc  0.99    110            0.5             0.9 #> 60    brew_temp parameter.power.mc  0.99    110            0.5             0.9 #> 61     altitude parameter.power.mc  0.99    110            0.5             0.9 #> 62    bean_sun1 parameter.power.mc  0.86    110            0.5             0.9 #> 63    bean_sun2 parameter.power.mc  0.91    110            0.5             0.9 #> 64  (Intercept)    effect.power.mc  1.00    120            0.5             0.9 #> 65    brew_temp    effect.power.mc  1.00    120            0.5             0.9 #> 66     altitude    effect.power.mc  0.99    120            0.5             0.9 #> 67     bean_sun    effect.power.mc  0.93    120            0.5             0.9 #> 68  (Intercept) parameter.power.mc  1.00    120            0.5             0.9 #> 69    brew_temp parameter.power.mc  1.00    120            0.5             0.9 #> 70     altitude parameter.power.mc  0.99    120            0.5             0.9 #> 71    bean_sun1 parameter.power.mc  0.85    120            0.5             0.9 #> 72    bean_sun2 parameter.power.mc  0.93    120            0.5             0.9 #> 73  (Intercept)    effect.power.mc  1.00    130            0.5             0.9 #> 74    brew_temp    effect.power.mc  1.00    130            0.5             0.9 #> 75     altitude    effect.power.mc  1.00    130            0.5             0.9 #> 76     bean_sun    effect.power.mc  0.96    130            0.5             0.9 #> 77  (Intercept) parameter.power.mc  1.00    130            0.5             0.9 #> 78    brew_temp parameter.power.mc  1.00    130            0.5             0.9 #> 79     altitude parameter.power.mc  1.00    130            0.5             0.9 #> 80    bean_sun1 parameter.power.mc  0.85    130            0.5             0.9 #> 81    bean_sun2 parameter.power.mc  0.95    130            0.5             0.9 #> 82  (Intercept)    effect.power.mc  1.00    140            0.5             0.9 #> 83    brew_temp    effect.power.mc  1.00    140            0.5             0.9 #> 84     altitude    effect.power.mc  1.00    140            0.5             0.9 #> 85     bean_sun    effect.power.mc  0.97    140            0.5             0.9 #> 86  (Intercept) parameter.power.mc  1.00    140            0.5             0.9 #> 87    brew_temp parameter.power.mc  1.00    140            0.5             0.9 #> 88     altitude parameter.power.mc  1.00    140            0.5             0.9 #> 89    bean_sun1 parameter.power.mc  0.91    140            0.5             0.9 #> 90    bean_sun2 parameter.power.mc  0.98    140            0.5             0.9 #> 91  (Intercept)    effect.power.mc  1.00    150            0.5             0.9 #> 92    brew_temp    effect.power.mc  1.00    150            0.5             0.9 #> 93     altitude    effect.power.mc  1.00    150            0.5             0.9 #> 94     bean_sun    effect.power.mc  0.99    150            0.5             0.9 #> 95  (Intercept) parameter.power.mc  1.00    150            0.5             0.9 #> 96    brew_temp parameter.power.mc  1.00    150            0.5             0.9 #> 97     altitude parameter.power.mc  1.00    150            0.5             0.9 #> 98    bean_sun1 parameter.power.mc  0.97    150            0.5             0.9 #> 99    bean_sun2 parameter.power.mc  0.98    150            0.5             0.9 #> 100 (Intercept)    effect.power.mc  0.89     50            0.6             0.9 #> 101   brew_temp    effect.power.mc  0.70     50            0.6             0.9 #> 102    altitude    effect.power.mc  0.62     50            0.6             0.9 #> 103    bean_sun    effect.power.mc  0.24     50            0.6             0.9 #> 104 (Intercept) parameter.power.mc  0.89     50            0.6             0.9 #> 105   brew_temp parameter.power.mc  0.70     50            0.6             0.9 #> 106    altitude parameter.power.mc  0.62     50            0.6             0.9 #> 107   bean_sun1 parameter.power.mc  0.22     50            0.6             0.9 #> 108   bean_sun2 parameter.power.mc  0.37     50            0.6             0.9 #> 109 (Intercept)    effect.power.mc  0.93     60            0.6             0.9 #> 110   brew_temp    effect.power.mc  0.74     60            0.6             0.9 #> 111    altitude    effect.power.mc  0.73     60            0.6             0.9 #> 112    bean_sun    effect.power.mc  0.41     60            0.6             0.9 #> 113 (Intercept) parameter.power.mc  0.93     60            0.6             0.9 #> 114   brew_temp parameter.power.mc  0.74     60            0.6             0.9 #> 115    altitude parameter.power.mc  0.73     60            0.6             0.9 #> 116   bean_sun1 parameter.power.mc  0.36     60            0.6             0.9 #> 117   bean_sun2 parameter.power.mc  0.42     60            0.6             0.9 #> 118 (Intercept)    effect.power.mc  0.95     70            0.6             0.9 #> 119   brew_temp    effect.power.mc  0.82     70            0.6             0.9 #> 120    altitude    effect.power.mc  0.87     70            0.6             0.9 #> 121    bean_sun    effect.power.mc  0.45     70            0.6             0.9 #> 122 (Intercept) parameter.power.mc  0.95     70            0.6             0.9 #> 123   brew_temp parameter.power.mc  0.82     70            0.6             0.9 #> 124    altitude parameter.power.mc  0.87     70            0.6             0.9 #> 125   bean_sun1 parameter.power.mc  0.40     70            0.6             0.9 #> 126   bean_sun2 parameter.power.mc  0.56     70            0.6             0.9 #> 127 (Intercept)    effect.power.mc  1.00     80            0.6             0.9 #> 128   brew_temp    effect.power.mc  0.87     80            0.6             0.9 #> 129    altitude    effect.power.mc  0.85     80            0.6             0.9 #> 130    bean_sun    effect.power.mc  0.54     80            0.6             0.9 #> 131 (Intercept) parameter.power.mc  1.00     80            0.6             0.9 #> 132   brew_temp parameter.power.mc  0.87     80            0.6             0.9 #> 133    altitude parameter.power.mc  0.85     80            0.6             0.9 #> 134   bean_sun1 parameter.power.mc  0.51     80            0.6             0.9 #> 135   bean_sun2 parameter.power.mc  0.62     80            0.6             0.9 #> 136 (Intercept)    effect.power.mc  1.00     90            0.6             0.9 #> 137   brew_temp    effect.power.mc  0.89     90            0.6             0.9 #> 138    altitude    effect.power.mc  0.92     90            0.6             0.9 #> 139    bean_sun    effect.power.mc  0.57     90            0.6             0.9 #> 140 (Intercept) parameter.power.mc  1.00     90            0.6             0.9 #> 141   brew_temp parameter.power.mc  0.89     90            0.6             0.9 #> 142    altitude parameter.power.mc  0.92     90            0.6             0.9 #> 143   bean_sun1 parameter.power.mc  0.47     90            0.6             0.9 #> 144   bean_sun2 parameter.power.mc  0.60     90            0.6             0.9 #> 145 (Intercept)    effect.power.mc  1.00    100            0.6             0.9 #> 146   brew_temp    effect.power.mc  0.96    100            0.6             0.9 #> 147    altitude    effect.power.mc  0.93    100            0.6             0.9 #> 148    bean_sun    effect.power.mc  0.67    100            0.6             0.9 #> 149 (Intercept) parameter.power.mc  1.00    100            0.6             0.9 #> 150   brew_temp parameter.power.mc  0.96    100            0.6             0.9 #> 151    altitude parameter.power.mc  0.93    100            0.6             0.9 #> 152   bean_sun1 parameter.power.mc  0.62    100            0.6             0.9 #> 153   bean_sun2 parameter.power.mc  0.77    100            0.6             0.9 #> 154 (Intercept)    effect.power.mc  1.00    110            0.6             0.9 #> 155   brew_temp    effect.power.mc  0.98    110            0.6             0.9 #> 156    altitude    effect.power.mc  0.96    110            0.6             0.9 #> 157    bean_sun    effect.power.mc  0.79    110            0.6             0.9 #> 158 (Intercept) parameter.power.mc  1.00    110            0.6             0.9 #> 159   brew_temp parameter.power.mc  0.98    110            0.6             0.9 #> 160    altitude parameter.power.mc  0.96    110            0.6             0.9 #> 161   bean_sun1 parameter.power.mc  0.75    110            0.6             0.9 #> 162   bean_sun2 parameter.power.mc  0.79    110            0.6             0.9 #> 163 (Intercept)    effect.power.mc  1.00    120            0.6             0.9 #> 164   brew_temp    effect.power.mc  0.98    120            0.6             0.9 #> 165    altitude    effect.power.mc  0.97    120            0.6             0.9 #> 166    bean_sun    effect.power.mc  0.82    120            0.6             0.9 #> 167 (Intercept) parameter.power.mc  1.00    120            0.6             0.9 #> 168   brew_temp parameter.power.mc  0.98    120            0.6             0.9 #> 169    altitude parameter.power.mc  0.97    120            0.6             0.9 #> 170   bean_sun1 parameter.power.mc  0.69    120            0.6             0.9 #> 171   bean_sun2 parameter.power.mc  0.77    120            0.6             0.9 #> 172 (Intercept)    effect.power.mc  1.00    130            0.6             0.9 #> 173   brew_temp    effect.power.mc  0.97    130            0.6             0.9 #> 174    altitude    effect.power.mc  0.98    130            0.6             0.9 #> 175    bean_sun    effect.power.mc  0.78    130            0.6             0.9 #> 176 (Intercept) parameter.power.mc  1.00    130            0.6             0.9 #> 177   brew_temp parameter.power.mc  0.97    130            0.6             0.9 #> 178    altitude parameter.power.mc  0.98    130            0.6             0.9 #> 179   bean_sun1 parameter.power.mc  0.69    130            0.6             0.9 #> 180   bean_sun2 parameter.power.mc  0.82    130            0.6             0.9 #> 181 (Intercept)    effect.power.mc  1.00    140            0.6             0.9 #> 182   brew_temp    effect.power.mc  0.99    140            0.6             0.9 #> 183    altitude    effect.power.mc  0.97    140            0.6             0.9 #> 184    bean_sun    effect.power.mc  0.88    140            0.6             0.9 #> 185 (Intercept) parameter.power.mc  1.00    140            0.6             0.9 #> 186   brew_temp parameter.power.mc  0.99    140            0.6             0.9 #> 187    altitude parameter.power.mc  0.97    140            0.6             0.9 #> 188   bean_sun1 parameter.power.mc  0.80    140            0.6             0.9 #> 189   bean_sun2 parameter.power.mc  0.91    140            0.6             0.9 #> 190 (Intercept)    effect.power.mc  1.00    150            0.6             0.9 #> 191   brew_temp    effect.power.mc  0.99    150            0.6             0.9 #> 192    altitude    effect.power.mc  1.00    150            0.6             0.9 #> 193    bean_sun    effect.power.mc  0.87    150            0.6             0.9 #> 194 (Intercept) parameter.power.mc  1.00    150            0.6             0.9 #> 195   brew_temp parameter.power.mc  0.99    150            0.6             0.9 #> 196    altitude parameter.power.mc  1.00    150            0.6             0.9 #> 197   bean_sun1 parameter.power.mc  0.83    150            0.6             0.9 #> 198   bean_sun2 parameter.power.mc  0.87    150            0.6             0.9 #>     random_seed #> 1           123 #> 2           123 #> 3           123 #> 4           123 #> 5           123 #> 6           123 #> 7           123 #> 8           123 #> 9           123 #> 10          123 #> 11          123 #> 12          123 #> 13          123 #> 14          123 #> 15          123 #> 16          123 #> 17          123 #> 18          123 #> 19          123 #> 20          123 #> 21          123 #> 22          123 #> 23          123 #> 24          123 #> 25          123 #> 26          123 #> 27          123 #> 28          123 #> 29          123 #> 30          123 #> 31          123 #> 32          123 #> 33          123 #> 34          123 #> 35          123 #> 36          123 #> 37          123 #> 38          123 #> 39          123 #> 40          123 #> 41          123 #> 42          123 #> 43          123 #> 44          123 #> 45          123 #> 46          123 #> 47          123 #> 48          123 #> 49          123 #> 50          123 #> 51          123 #> 52          123 #> 53          123 #> 54          123 #> 55          123 #> 56          123 #> 57          123 #> 58          123 #> 59          123 #> 60          123 #> 61          123 #> 62          123 #> 63          123 #> 64          123 #> 65          123 #> 66          123 #> 67          123 #> 68          123 #> 69          123 #> 70          123 #> 71          123 #> 72          123 #> 73          123 #> 74          123 #> 75          123 #> 76          123 #> 77          123 #> 78          123 #> 79          123 #> 80          123 #> 81          123 #> 82          123 #> 83          123 #> 84          123 #> 85          123 #> 86          123 #> 87          123 #> 88          123 #> 89          123 #> 90          123 #> 91          123 #> 92          123 #> 93          123 #> 94          123 #> 95          123 #> 96          123 #> 97          123 #> 98          123 #> 99          123 #> 100         123 #> 101         123 #> 102         123 #> 103         123 #> 104         123 #> 105         123 #> 106         123 #> 107         123 #> 108         123 #> 109         123 #> 110         123 #> 111         123 #> 112         123 #> 113         123 #> 114         123 #> 115         123 #> 116         123 #> 117         123 #> 118         123 #> 119         123 #> 120         123 #> 121         123 #> 122         123 #> 123         123 #> 124         123 #> 125         123 #> 126         123 #> 127         123 #> 128         123 #> 129         123 #> 130         123 #> 131         123 #> 132         123 #> 133         123 #> 134         123 #> 135         123 #> 136         123 #> 137         123 #> 138         123 #> 139         123 #> 140         123 #> 141         123 #> 142         123 #> 143         123 #> 144         123 #> 145         123 #> 146         123 #> 147         123 #> 148         123 #> 149         123 #> 150         123 #> 151         123 #> 152         123 #> 153         123 #> 154         123 #> 155         123 #> 156         123 #> 157         123 #> 158         123 #> 159         123 #> 160         123 #> 161         123 #> 162         123 #> 163         123 #> 164         123 #> 165         123 #> 166         123 #> 167         123 #> 168         123 #> 169         123 #> 170         123 #> 171         123 #> 172         123 #> 173         123 #> 174         123 #> 175         123 #> 176         123 #> 177         123 #> 178         123 #> 179         123 #> 180         123 #> 181         123 #> 182         123 #> 183         123 #> 184         123 #> 185         123 #> 186         123 #> 187         123 #> 188         123 #> 189         123 #> 190         123 #> 191         123 #> 192         123 #> 193         123 #> 194         123 #> 195         123 #> 196         123 #> 197         123 #> 198         123 #> Power curve generation captured the following warning/error messages: #> Function   | Type | N | Message #> Evaluation | Warn | 3 | Message: 'skpr: Partial or complete separation likely detected in the binomial Monte Carlo simulation. Increase the number of runs in the design or decrease the number of model parameters to improve power.'"},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_split_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Split Plot Columns — calculate_split_columns","title":"Calculate Split Plot Columns — calculate_split_columns","text":"Calculates columns correspond layers randomization restriction","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_split_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Split Plot Columns — calculate_split_columns","text":"","code":"calculate_split_columns(run_matrix_processed, blockgroups)"},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_split_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Split Plot Columns — calculate_split_columns","text":"run_matrix_processed design","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calculate_split_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Split Plot Columns — calculate_split_columns","text":"Vector numbers indicating split plot layers","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calculatepower.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Power — calculatepower","title":"Calculate Power — calculatepower","text":"Calculates power model given non-centrality parameter","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calculatepower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Power — calculatepower","text":"","code":"calculatepower(X, L, lambda, alpha, degrees_of_freedom)"},{"path":"https://tylermorganwall.github.io/skpr/reference/calculatepower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Power — calculatepower","text":"X model matrix L parameter matrix/vector lambda non-centrality parameter F test alpha specified type-error degrees_of_freedom number degrees freedom.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/calculatepower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Power — calculatepower","text":"power given parameter L, given ","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/check_for_suggest_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"check_for_suggest_packages — check_for_suggest_packages","title":"check_for_suggest_packages — check_for_suggest_packages","text":"checks suggests","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/check_for_suggest_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check_for_suggest_packages — check_for_suggest_packages","text":"","code":"check_for_suggest_packages(packages)"},{"path":"https://tylermorganwall.github.io/skpr/reference/check_for_suggest_packages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check_for_suggest_packages — check_for_suggest_packages","text":"none","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/check_model_validity.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Model Formula Validity — check_model_validity","title":"Check Model Formula Validity — check_model_validity","text":"Check Model Formula Validity","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/check_model_validity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Model Formula Validity — check_model_validity","text":"","code":"check_model_validity(model)"},{"path":"https://tylermorganwall.github.io/skpr/reference/constructRunMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct Run Matrix given rows — constructRunMatrix","title":"Construct Run Matrix given rows — constructRunMatrix","text":"Returns number levels prior parameter","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/constructRunMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct Run Matrix given rows — constructRunMatrix","text":"","code":"constructRunMatrix(rowIndices, candidateList, augment = NULL)"},{"path":"https://tylermorganwall.github.io/skpr/reference/constructRunMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct Run Matrix given rows — constructRunMatrix","text":"Returns vector consisting number levels preceeding parameter (including intercept)","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/contr.simplex.html","id":null,"dir":"Reference","previous_headings":"","what":"Orthonormal Contrast Generator — contr.simplex","title":"Orthonormal Contrast Generator — contr.simplex","text":"Generates orthonormal (orthogonal normalized) contrasts. row vertex N-dimensional simplex. exception contrasts 2-level case, return 1 -1.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/contr.simplex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orthonormal Contrast Generator — contr.simplex","text":"","code":"contr.simplex(n, size = NULL)"},{"path":"https://tylermorganwall.github.io/skpr/reference/contr.simplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orthonormal Contrast Generator — contr.simplex","text":"n number levels catagorical variable. factor character vector, `n` `length(n)` size Default `1`. length simplex vector.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/contr.simplex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Orthonormal Contrast Generator — contr.simplex","text":"matrix Orthonormal contrasts.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/contr.simplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orthonormal Contrast Generator — contr.simplex","text":"","code":"contr.simplex(4) #>            [,1]       [,2]      [,3] #> [1,]  1.7320508  0.0000000  0.000000 #> [2,] -0.5773503  1.6329932  0.000000 #> [3,] -0.5773503 -0.8164966  1.414214 #> [4,] -0.5773503 -0.8164966 -1.414214"},{"path":"https://tylermorganwall.github.io/skpr/reference/convert_blockcolumn_rownames.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Block Column to Rownames — convert_blockcolumn_rownames","title":"Convert Block Column to Rownames — convert_blockcolumn_rownames","text":"Detect externally generated blocking columns convert rownames","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/convert_blockcolumn_rownames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Block Column to Rownames — convert_blockcolumn_rownames","text":"","code":"convert_blockcolumn_rownames(   RunMatrix,   blocking,   varianceratios,   verbose = FALSE )"},{"path":"https://tylermorganwall.github.io/skpr/reference/convert_blockcolumn_rownames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Block Column to Rownames — convert_blockcolumn_rownames","text":"RunMatrix run matrix blocking Whether random effects included. varianceratios vector variance ratios level restricted randomization","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/convert_blockcolumn_rownames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Block Column to Rownames — convert_blockcolumn_rownames","text":"Row-name encoded blocked run matrix","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/convert_model_dots.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts dot operator to terms — convert_model_dots","title":"Converts dot operator to terms — convert_model_dots","text":"Converts dot operator `.` formula linear terms model. Includes interactions (e.g. .*.)","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/convert_model_dots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts dot operator to terms — convert_model_dots","text":"","code":"convert_model_dots(design, model, splitplotdesign = NULL)"},{"path":"https://tylermorganwall.github.io/skpr/reference/convert_model_dots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts dot operator to terms — convert_model_dots","text":"design design model Base model splitplotdesign split plot design data.frame","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/convert_model_dots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts dot operator to terms — convert_model_dots","text":"New model dot operator replaced","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/convert_rownames_to_covariance.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts dot operator to terms — convert_rownames_to_covariance","title":"Converts dot operator to terms — convert_rownames_to_covariance","text":"Converts row names variance-covariance matrix (using user-supplied variance ratio)","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/convert_rownames_to_covariance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts dot operator to terms — convert_rownames_to_covariance","text":"","code":"convert_rownames_to_covariance(   run_matrix_processed,   varianceratios,   user_specified_varianceratio )"},{"path":"https://tylermorganwall.github.io/skpr/reference/convert_rownames_to_covariance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts dot operator to terms — convert_rownames_to_covariance","text":"run_matrix_processed design","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/convert_rownames_to_covariance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts dot operator to terms — convert_rownames_to_covariance","text":"Variance-covariance matrix V","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/disallowed_combinations.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect and list disallowed combinations in candidate set — disallowed_combinations","title":"Detect and list disallowed combinations in candidate set — disallowed_combinations","text":"Detects list disallowed combinations candidate set","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/disallowed_combinations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect and list disallowed combinations in candidate set — disallowed_combinations","text":"","code":"disallowed_combinations(candidateset)"},{"path":"https://tylermorganwall.github.io/skpr/reference/disallowed_combinations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect and list disallowed combinations in candidate set — disallowed_combinations","text":"candidateset Block list","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/disallowed_combinations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect and list disallowed combinations in candidate set — disallowed_combinations","text":"Returns list disallowed combinations","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/effectpower.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Effect Power — effectpower","title":"Calculate Effect Power — effectpower","text":"Calculates effect power given anticipated coefficients type-error","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/effectpower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Effect Power — effectpower","text":"","code":"effectpower(   RunMatrix,   levelvector,   anticoef,   alpha,   vinv = NULL,   degrees = NULL )"},{"path":"https://tylermorganwall.github.io/skpr/reference/effectpower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Effect Power — effectpower","text":"RunMatrix model matrix levelvector number levels parameter (1st always intercept) anticoef anticipated coefficients alpha specified type-error vinv V inverse matrix degrees Degrees freedom","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/effectpower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Effect Power — effectpower","text":"effect power parameters","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/effectpowermc.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Anova for Effect Power Calculation in Monte Carlo — effectpowermc","title":"Fit Anova for Effect Power Calculation in Monte Carlo — effectpowermc","text":"Calculates p-values effect power calculation Monte Carlo","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/effectpowermc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Anova for Effect Power Calculation in Monte Carlo — effectpowermc","text":"","code":"effectpowermc(   fit,   type = \"III\",   test = \"Pr(>Chisq)\",   model_formula = NULL,   firth = FALSE,   glmfamily = \"gaussian\",   effect_terms = NULL,   RunMatrixReduced = NULL,   method = NULL,   contrastslist = contrastslist,   effect_anova = FALSE,   ... )"},{"path":"https://tylermorganwall.github.io/skpr/reference/effectpowermc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Anova for Effect Power Calculation in Monte Carlo — effectpowermc","text":"fit Fit regression type Default `III` test Default `Pr(>Chisq)`. ... Additional arguments pass car::Anova","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/effectpowermc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Anova for Effect Power Calculation in Monte Carlo — effectpowermc","text":"p-values","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Power of an Experimental Design — eval_design","title":"Calculate Power of an Experimental Design — eval_design","text":"Evaluates power experimental design, normal response variables, given design's run matrix statistical model fit data. Returns data frame parameter effect powers. Designs can consist continuous categorical factors. default, eval_design assumes signal--noise ratio 2, can changed effectsize anticoef parameters.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Power of an Experimental Design — eval_design","text":"","code":"eval_design(   design,   model = NULL,   alpha = 0.05,   blocking = NULL,   anticoef = NULL,   effectsize = 2,   varianceratios = NULL,   contrasts = contr.sum,   conservative = FALSE,   reorder_factors = FALSE,   detailedoutput = FALSE,   advancedoptions = NULL,   ... )"},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Power of an Experimental Design — eval_design","text":"design experimental design. Internally, eval_design rescales numeric column range [-1, 1], need scaling manually. model model used evaluating design. missing design generated skpr, generating model used. can subset model used generate design, include higher order effects original design generation. include factors present experimental design. alpha Default `0.05`. specified type-error. blocking Default `NULL`. `TRUE`, eval_design look rownames (blocking columns) determine blocking structure. Default FALSE. anticoef anticipated coefficients calculating power. missing, coefficients automatically generated based effectsize argument. effectsize Default `2`. signal--noise ratio. continuous factors, specifies difference response highest lowest levels factor (-1 +1 eval_design normalizes input data), assuming root mean square error 1. specify anticoef, anticipated coefficients half effectsize. specify anticoef, effectsize ignored. varianceratios Default `NULL`. ratio whole plot variance run--run variance. specified design generation, default 1. designs one subplot ratio can vector specifying variance ratio subplot (comparing run--run variance). Otherwise, use single value strata. contrasts Default contr.sum. function use encode categorical factors model matrix. user specified contrasts categorical factor using contrasts function, used. Otherwise, skpr use `contr.sum`. conservative Specifies whether default method generating anticipated coefficents conservative . `TRUE` give conservative estimate power setting one (multiple equally low) level categorical factor's anticipated coefficients zero. Default `FALSE`. reorder_factors Default `FALSE`. `TRUE`, levels reordered generate conservative calculation effect power. function searches possible reference levels given factor chooses one results lowest effect power. reordering presenting output `detailedoutput = TRUE`. detailedoutput `TRUE``, return additional information evaluation results. Default FALSE. advancedoptions Default `NULL`. named list parameters specify additional attributes calculate. Options: `aliaspower` gives degree Alias matrix calculated. ... Additional arguments.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Power of an Experimental Design — eval_design","text":"data frame parameters model, type power analysis, power. Several design diagnostics stored attributes data frame. particular, modelmatrix attribute contains model matrix used power evaluation. especially useful want specify anticipated coefficients use power evaluation. model matrix provides order model coefficients, well encoding used categorical factors.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Power of an Experimental Design — eval_design","text":"function evaluates power experimental designs. design blocking restrictions randomization, model assumed : \\(y = X \\beta + \\epsilon\\). design split-plot design, model follows: \\(y = X \\beta + Z b\\)+ \\(\\epsilon\\)ij, , \\(y\\) vector experimental responses, \\(X\\) model matrix, \\(\\beta\\) vector model coefficients, \\(Z_{}\\) blocking indicator, \\(b_{}\\) random variable associated \\(\\)th block, \\(\\epsilon\\) random variable normally distributed zero mean unit variance (root-mean-square error 1.0). eval_design calculates parameter power well effect power, defined follows: 1) Parameter power probability rejecting hypothesis \\(H_0 : \\beta_i = 0\\), \\(\\beta_i\\) single parameter model 2) Effect power probability rejecting hypothesis \\(H_0 : \\beta_{1} = \\beta_{2} = ... = \\beta_{n} 0\\) \\(n\\) coefficients categorical factor. two power types equivalent continuous factors two-level categorical factors, differ categorical factors three levels. split-plot designs, degrees freedom allocated term according algorithm given \"Mixed-Effects Models S S-PLUS\" (Pinheiro Bates, pp. 91). using conservative = TRUE, eval_design first evaluates power default (given) coefficients. , multi-level categorical, sets coefficients zero except level produced lowest power, re-evaluates power modified set anticipated coefficients. two equal power values multi-level categorical, two lowest equal terms given opposite sign anticipated coefficients rest (categorical factor) set zero.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Power of an Experimental Design — eval_design","text":"","code":"#Generating a simple 2x3 factorial to feed into our optimal design generation #of an 11-run design. factorial = expand.grid(A = c(1, -1), B = c(1, -1), C = c(1, -1))  optdesign = gen_design(candidateset = factorial,                       model= ~A + B + C, trials = 11, optimality = \"D\", repeats = 100)  #Now evaluating that design (with default anticipated coefficients and a effectsize of 2): eval_design(design = optdesign, model= ~A + B + C, alpha = 0.2) #>     parameter            type     power #> 1 (Intercept)    effect.power 0.9622638 #> 2           A    effect.power 0.9622638 #> 3           B    effect.power 0.9622638 #> 4           C    effect.power 0.9622638 #> 5 (Intercept) parameter.power 0.9622638 #> 6           A parameter.power 0.9622638 #> 7           B parameter.power 0.9622638 #> 8           C parameter.power 0.9622638 #> ============Evaluation Info============ #> • Alpha = 0.2 • Trials = 11 • Blocked = FALSE  #> • Evaluating Model = ~A + B + C  #> • Anticipated Coefficients = c(1, 1, 1, 1)  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = `lm(...)`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`   #Evaluating a subset of the design (which changes the power due to a different number of #degrees of freedom) eval_design(design = optdesign, model= ~A + C, alpha = 0.2) #>     parameter            type     power #> 1 (Intercept)    effect.power 0.9659328 #> 2           A    effect.power 0.9659328 #> 3           C    effect.power 0.9659328 #> 4 (Intercept) parameter.power 0.9659328 #> 5           A parameter.power 0.9659328 #> 6           C parameter.power 0.9659328 #> ============Evaluation Info============ #> • Alpha = 0.2 • Trials = 11 • Blocked = FALSE  #> • Evaluating Model = ~A + C  #> • Anticipated Coefficients = c(1, 1, 1)  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = `lm(...)`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`   #We do not have to input the model if it's the same as the model used #During design generation. Here, we also use the default value for alpha (`0.05`) eval_design(optdesign) #>     parameter            type     power #> 1 (Intercept)    effect.power 0.7991116 #> 2           A    effect.power 0.7991116 #> 3           B    effect.power 0.7991116 #> 4           C    effect.power 0.7991116 #> 5 (Intercept) parameter.power 0.7991116 #> 6           A parameter.power 0.7991116 #> 7           B parameter.power 0.7991116 #> 8           C parameter.power 0.7991116 #> ============Evaluation Info============ #> • Alpha = 0.05 • Trials = 11 • Blocked = FALSE  #> • Evaluating Model = ~A + B + C  #> • Anticipated Coefficients = c(1, 1, 1, 1)  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = `lm(...)`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`   #Halving the signal-to-noise ratio by setting a different effectsize (default is 2): eval_design(design = optdesign, model= ~A + B + C, alpha = 0.2, effectsize = 1) #>     parameter            type     power #> 1 (Intercept)    effect.power 0.6021367 #> 2           A    effect.power 0.6021367 #> 3           B    effect.power 0.6021367 #> 4           C    effect.power 0.6021367 #> 5 (Intercept) parameter.power 0.6021367 #> 6           A parameter.power 0.6021367 #> 7           B parameter.power 0.6021367 #> 8           C parameter.power 0.6021367 #> ============Evaluation Info============ #> • Alpha = 0.2 • Trials = 11 • Blocked = FALSE  #> • Evaluating Model = ~A + B + C  #> • Anticipated Coefficients = c(0.500, 0.500, 0.500, 0.500)  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = `lm(...)`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`   #With 3+ level categorical factors, the choice of anticipated coefficients directly changes the #final power calculation. For the most conservative power calculation, that involves #setting all anticipated coefficients in a factor to zero except for one. We can specify this #option with the \"conservative\" argument.  factorialcoffee = expand.grid(cost = c(1, 2),                               type = as.factor(c(\"Kona\", \"Colombian\", \"Ethiopian\", \"Sumatra\")),                               size = as.factor(c(\"Short\", \"Grande\", \"Venti\")))  designcoffee = gen_design(factorialcoffee,                          ~cost + size + type, trials = 29, optimality = \"D\", repeats = 100)  #Evaluate the design, with default anticipated coefficients (conservative is FALSE by default). eval_design(designcoffee) #>      parameter            type     power #> 1  (Intercept)    effect.power 0.9990689 #> 2         cost    effect.power 0.9991530 #> 3         size    effect.power 0.9522717 #> 4         type    effect.power 0.9907584 #> 5  (Intercept) parameter.power 0.9990689 #> 6         cost parameter.power 0.9991530 #> 7        size1 parameter.power 0.9443775 #> 8        size2 parameter.power 0.9443775 #> 9        type1 parameter.power 0.8339422 #> 10       type2 parameter.power 0.8339422 #> 11       type3 parameter.power 0.8339422 #> ============Evaluation Info============= #> • Alpha = 0.05 • Trials = 29 • Blocked = FALSE  #> • Evaluating Model = ~cost + size + type  #> • Anticipated Coefficients = c(1, 1, 1, -1, 1, -1, 1)  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = `lm(...)`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`   #Evaluate the design, with conservative anticipated coefficients: eval_design(designcoffee, conservative = TRUE) #>      parameter            type     power #> 1  (Intercept)    effect.power 0.9990689 #> 2         cost    effect.power 0.9991530 #> 3         size    effect.power 0.9522717 #> 4         type    effect.power 0.8300151 #> 5  (Intercept) parameter.power 0.9990689 #> 6         cost parameter.power 0.9991530 #> 7        size1 parameter.power 0.0500000 #> 8        size2 parameter.power 0.9443775 #> 9        type1 parameter.power 0.0500000 #> 10       type2 parameter.power 0.8339422 #> 11       type3 parameter.power 0.8339422 #> ============Evaluation Info============= #> • Alpha = 0.05 • Trials = 29 • Blocked = FALSE  #> • Evaluating Model = ~cost + size + type  #> • Anticipated Coefficients = c(1, 1, 0, 1, 0, 1, -1)  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = `lm(...)`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`   #which is the same as the following, but now explicitly entering the coefficients: eval_design(designcoffee, anticoef = c(1, 1, 1, 0, 0, 1, 0)) #>      parameter            type     power #> 1  (Intercept)    effect.power 0.9990689 #> 2         cost    effect.power 0.9991530 #> 3         size    effect.power 0.9654778 #> 4         type    effect.power 0.8478953 #> 5  (Intercept) parameter.power 0.9990689 #> 6         cost parameter.power 0.9991530 #> 7        size1 parameter.power 0.9443775 #> 8        size2 parameter.power 0.0500000 #> 9        type1 parameter.power 0.0500000 #> 10       type2 parameter.power 0.8339422 #> 11       type3 parameter.power 0.0500000 #> ============Evaluation Info============= #> • Alpha = 0.05 • Trials = 29 • Blocked = FALSE  #> • Evaluating Model = ~cost + size + type  #> • Anticipated Coefficients = c(1, 1, 1, 0, 0, 1, 0)  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = `lm(...)`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`   #You can also evaluate the design with higher order effects, even if they were not #used in design generation: eval_design(designcoffee, model = ~cost + size + type + cost * type) #>      parameter            type     power #> 1  (Intercept)    effect.power 0.9989226 #> 2         cost    effect.power 0.9989944 #> 3         size    effect.power 0.9476843 #> 4         type    effect.power 0.9879203 #> 5    cost:type    effect.power 0.9859502 #> 6  (Intercept) parameter.power 0.9989226 #> 7         cost parameter.power 0.9989944 #> 8        size1 parameter.power 0.9361224 #> 9        size2 parameter.power 0.9361224 #> 10       type1 parameter.power 0.8215540 #> 11       type2 parameter.power 0.8215540 #> 12       type3 parameter.power 0.8215540 #> 13  cost:type1 parameter.power 0.8185524 #> 14  cost:type2 parameter.power 0.8185524 #> 15  cost:type3 parameter.power 0.8185524 #> ============Evaluation Info============= #> • Alpha = 0.05 • Trials = 29 • Blocked = FALSE  #> • Evaluating Model = ~cost + size + type + cost:type  #> • Anticipated Coefficients = c(1, 1, 1, -1, 1, -1, 1, 1, -1, 1)  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = `lm(...)`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`    #Generating and evaluating a split plot design: splitfactorialcoffee = expand.grid(caffeine = c(1, -1),                                   cost = c(1, 2),                                   type = as.factor(c(\"Kona\", \"Colombian\", \"Ethiopian\", \"Sumatra\")),                                   size = as.factor(c(\"Short\", \"Grande\", \"Venti\")))  coffeeblockdesign = gen_design(splitfactorialcoffee, ~caffeine, trials = 12) coffeefinaldesign = gen_design(splitfactorialcoffee,                               model = ~caffeine + cost + size + type, trials = 36,                               splitplotdesign = coffeeblockdesign, blocksizes = 3)  #Evaluating design (blocking is automatically detected) eval_design(coffeefinaldesign, 0.2, blocking = TRUE) #>      parameter            type     power #> 1  (Intercept)    effect.power 0.9439701 #> 2     caffeine    effect.power 0.9434218 #> 3         cost    effect.power 0.9999919 #> 4         size    effect.power 0.9988575 #> 5         type    effect.power 0.9997703 #> 6  (Intercept) parameter.power 0.9439701 #> 7     caffeine parameter.power 0.9434218 #> 8         cost parameter.power 0.9999919 #> 9        size1 parameter.power 0.9978819 #> 10       size2 parameter.power 0.9978819 #> 11       type1 parameter.power 0.9746858 #> 12       type2 parameter.power 0.9746858 #> 13       type3 parameter.power 0.9744501 #> ============Evaluation Info============= #> • Alpha = 0.2 • Trials = 36 • Blocked = TRUE  #> • Evaluating Model = ~caffeine + cost + size + type  #> • Anticipated Coefficients = c(1, 1, 1, 1, -1, 1, -1, 1)  #> • Number of Blocks = Level 1: 12  #> • Variance Ratios  = Level 1: 1, Level 2: 1  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = `lmerTest::lmer(...)`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`   #Manually turn blocking off to see completely randomized design power eval_design(coffeefinaldesign, 0.2, blocking = FALSE) #>      parameter            type     power #> 1  (Intercept)    effect.power 0.9999981 #> 2     caffeine    effect.power 0.9999978 #> 3         cost    effect.power 0.9999978 #> 4         size    effect.power 0.9991258 #> 5         type    effect.power 0.9999460 #> 6  (Intercept) parameter.power 0.9999981 #> 7     caffeine parameter.power 0.9999978 #> 8         cost parameter.power 0.9999978 #> 9        size1 parameter.power 0.9981168 #> 10       size2 parameter.power 0.9981168 #> 11       type1 parameter.power 0.9828414 #> 12       type2 parameter.power 0.9828414 #> 13       type3 parameter.power 0.9828414 #> ============Evaluation Info============= #> • Alpha = 0.2 • Trials = 36 • Blocked = FALSE  #> • Evaluating Model = ~caffeine + cost + size + type  #> • Anticipated Coefficients = c(1, 1, 1, 1, -1, 1, -1, 1)  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = `lm(...)`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`   #We can also evaluate the design with a custom ratio between the whole plot error to #the run-to-run error. eval_design(coffeefinaldesign, 0.2, varianceratios = 2) #>      parameter            type     power #> 1  (Intercept)    effect.power 0.8134670 #> 2     caffeine    effect.power 0.8128997 #> 3         cost    effect.power 0.9999905 #> 4         size    effect.power 0.9988575 #> 5         type    effect.power 0.9997387 #> 6  (Intercept) parameter.power 0.8134670 #> 7     caffeine parameter.power 0.8128997 #> 8         cost parameter.power 0.9999905 #> 9        size1 parameter.power 0.9978819 #> 10       size2 parameter.power 0.9978819 #> 11       type1 parameter.power 0.9734835 #> 12       type2 parameter.power 0.9734835 #> 13       type3 parameter.power 0.9732389 #> ============Evaluation Info============= #> • Alpha = 0.2 • Trials = 36 • Blocked = TRUE  #> • Evaluating Model = ~caffeine + cost + size + type  #> • Anticipated Coefficients = c(1, 1, 1, 1, -1, 1, -1, 1)  #> • Number of Blocks = Level 1: 12  #> • Variance Ratios  = Level 1: 2  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = `lmerTest::lmer(...)`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`   #If the design was generated outside of skpr and thus the row names do not have the #blocking structure encoded already, the user can add these manually. For a 12-run #design with 4 blocks, here is a vector indicated the blocks:  blockcolumn = c(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4)  #If we wanted to add this blocking structure to the design coffeeblockdesign, we would #add a column with the format \"Block1\", \"Block2\", \"Block3\" ... and each one will be treated #as a separate blocking layer.  coffeeblockdesign$Block1 = blockcolumn  #By default, skpr will throw out the blocking columns unless the user specifies `blocking = TRUE`. eval_design(coffeeblockdesign, blocking=TRUE) #>     parameter            type     power #> 1 (Intercept)    effect.power 0.1792554 #> 2    caffeine    effect.power 0.1792554 #> 3 (Intercept) parameter.power 0.1792554 #> 4    caffeine parameter.power 0.1792554 #> ============Evaluation Info============ #> • Alpha = 0.05 • Trials = 12 • Blocked = TRUE  #> • Evaluating Model = ~caffeine  #> • Anticipated Coefficients = c(1, 1)  #> • Number of Blocks = Level 1: 4  #> • Variance Ratios  = Level 1: 1  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = `lmerTest::lmer(...)`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`"},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design_custom_mc.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo power evaluation for experimental designs with user-supplied libraries — eval_design_custom_mc","title":"Monte Carlo power evaluation for experimental designs with user-supplied libraries — eval_design_custom_mc","text":"Evaluates power experimental design, given run matrix statistical model fit data, using monte carlo simulation. Simulated data fit using user-supplied fitting library power estimated fraction times parameter significant. Returns data frame parameter powers.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design_custom_mc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo power evaluation for experimental designs with user-supplied libraries — eval_design_custom_mc","text":"","code":"eval_design_custom_mc(   design,   model = NULL,   alpha = 0.05,   nsim,   rfunction,   fitfunction,   pvalfunction,   anticoef,   effectsize = 2,   contrasts = contr.sum,   coef_function = coef,   calceffect = FALSE,   parameternames = NULL,   advancedoptions = NULL,   progress = TRUE,   parallel = FALSE,   parallel_pkgs = NULL,   ... )"},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design_custom_mc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo power evaluation for experimental designs with user-supplied libraries — eval_design_custom_mc","text":"design experimental design. Internally, eval_design_custom_mc rescales numeric column range [-1, 1]. model model used evaluating design. missing design generated skpr, generating model used. can subset model used generate design, include higher order effects original design generation. include factors present experimental design. alpha Default `0.05`. type-error. p-values less counted significant. nsim number simulations. rfunction Random number generator function. function form f(X, b), X model matrix b anticipated coefficients. fitfunction Function used fit data. form f(formula, X, contrasts) X model matrix. contrasts need specified user supplied library, argument can ignored. pvalfunction Function returns vector p-values object returned fitfunction. anticoef anticipated coefficients calculating power. missing, coefficients automatically generated based effectsize. effectsize signal--noise ratio. Default 2. gaussian model, continuous factors, specifies difference response highest lowest levels factor (+1 -1 normalization). precisely: specify anticoef, anticipated coefficients half effectsize. specify anticoef, effectsize ignored. contrasts Default contr.sum. Function used generate contrasts encoding categorical variables. user specified contrasts categorical factor using contrasts function, used. Otherwise, skpr use contr.sum. coef_function Function , applied fitfunction return object, returns estimated coefficients. calceffect Default `FALSE`. Calculates effect power Type-III Anova (using car package) using Wald test. ratio can vector specifying variance ratio subplot. Otherwise, use single value strata. work, fit returned `fitfunction` must method compatable car package. parameternames Vector parameter names coefficients correspond simply columns model matrix (e.g. coefficients MLE fit). advancedoptions Default `NULL`. Named list advanced options. `advancedoptions$anovatype` specifies Anova type car package (default type `III`), user can change type `II`). `advancedoptions$anovatest` specifies test statistic user want `Wald` test--options likelyhood-ratio `LR` F-test `F`. `advancedoptions$progressBarUpdater` function called non-parallel simulations can used update external progress bar.`advancedoptions$GUI` turns warning messages GUI. `advancedoptions$save_simulated_responses = TRUE`, dataframe attribute `simulated_responses` contains simulated responses power evaluation. progress Default `TRUE`. Whether include progress bar. parallel Default `FALSE`. `TRUE`, power simulation use one available cores. user wants set number cores manually, can setting `options(\"cores\")` desired number (e.g. `options(\"cores\" = parallel::detectCores())`). NOTE: installed BLAS libraries include multicore support (e.g. Intel MKL comes Microsoft R Open), turning parallel result reduced performance. parallel_pkgs vector strings listing external packages included parallel worker. ... Additional arguments.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design_custom_mc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo power evaluation for experimental designs with user-supplied libraries — eval_design_custom_mc","text":"data frame consisting parameters powers. parameter estimates simulations stored 'estimates' attribute.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design_custom_mc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo power evaluation for experimental designs with user-supplied libraries — eval_design_custom_mc","text":"","code":"#To demonstrate how a user can use their own libraries for Monte Carlo power generation, #We will recreate eval_design_survival_mc using the eval_design_custom_mc framework.  #To begin, first let us generate the same design and random generation function shown in the #eval_design_survival_mc examples:  basicdesign = expand.grid(a = c(-1, 1), b = c(\"a\",\"b\",\"c\")) design = gen_design(candidateset = basicdesign, model = ~a + b + a:b, trials = 100,                          optimality = \"D\", repeats = 100)  #Random number generating function  rsurvival = function(X, b) {  Y = rexp(n = nrow(X), rate = exp(-(X %*% b)))  censored = Y > 1  Y[censored] = 1  return(survival::Surv(time = Y, event = !censored, type = \"right\")) }  #We now need to tell the package how we want to fit our data, #given the formula and the model matrix X (and, if needed, the list of contrasts). #If the contrasts aren't required, \"contrastslist\" should be set to NULL. #This should return some type of fit object.  fitsurv = function(formula, X, contrastslist = NULL) {  return(survival::survreg(formula, data = X, dist = \"exponential\")) }   #We now need to tell the package how to extract the p-values from the fit object returned #from the fit function. This is how to extract the p-values from the survreg fit object:  pvalsurv = function(fit) {  return(summary(fit)$table[, 4]) }  #And now we evaluate the design, passing the fitting function and p-value extracting function #in along with the standard inputs for eval_design_mc. #This has the exact same behavior as eval_design_survival_mc for the exponential distribution. eval_design_custom_mc(design = design, model = ~a + b + a:b,                      alpha = 0.05, nsim = 100,                      fitfunction = fitsurv, pvalfunction = pvalsurv,                      rfunction = rsurvival, effectsize = 1) #>     parameter                      type power #> 1 (Intercept) custom.parameter.power.mc  0.83 #> 2           a custom.parameter.power.mc  0.77 #> 3          b1 custom.parameter.power.mc  0.27 #> 4          b2 custom.parameter.power.mc  0.64 #> 5        a:b1 custom.parameter.power.mc  0.26 #> 6        a:b2 custom.parameter.power.mc  0.54 #> ===============Evaluation Info=============== #> • Alpha = 0.05 • Trials = 100 • Blocked = FALSE  #> • Evaluating Model = ~a + b + a:b  #> • Anticipated Coefficients = c(0.500, 0.500, 0.500, -0.500, 0.500, -0.500)  #We can also use skpr's framework for parallel computation to automatically parallelize this #to speed up computation if (FALSE) eval_design_custom_mc(design = design, model = ~a + b + a:b,                          alpha = 0.05, nsim = 1000,                          fitfunction = fitsurv, pvalfunction = pvalsurv,                          rfunction = rsurvival, effectsize = 1,                          parallel = TRUE, parallel_pkgs = \"survival\")"},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design_mc.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Power Evaluation for Experimental Designs — eval_design_mc","title":"Monte Carlo Power Evaluation for Experimental Designs — eval_design_mc","text":"Evaluates power experimental design, given run matrix statistical model fit data, using monte carlo simulation. Simulated data fit using generalized linear model power estimated fraction times parameter significant. Returns data frame parameter powers.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design_mc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Power Evaluation for Experimental Designs — eval_design_mc","text":"","code":"eval_design_mc(   design,   model = NULL,   alpha = 0.05,   blocking = NULL,   nsim = 1000,   glmfamily = \"gaussian\",   calceffect = TRUE,   effect_anova = TRUE,   varianceratios = NULL,   rfunction = NULL,   anticoef = NULL,   firth = FALSE,   effectsize = 2,   contrasts = contr.sum,   parallel = FALSE,   adjust_alpha_inflation = FALSE,   detailedoutput = FALSE,   progress = TRUE,   advancedoptions = NULL,   ... )"},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design_mc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Power Evaluation for Experimental Designs — eval_design_mc","text":"design experimental design. Internally, eval_design_mc rescales numeric column range [-1, 1]. model model used evaluating design. missing design generated skpr, generating model used. can subset model used generate design, include higher order effects original design generation. include factors present experimental design. alpha Default `0.05`. type-error. p-values less counted significant. blocking Default `NULL`. `TRUE`, eval_design_mc look rownames (blocking columns) determine blocking structure. Default FALSE. nsim Default `1000`. number Monte Carlo simulations perform. glmfamily Default `gaussian`. String indicating family distribution `glm` function (\"gaussian\", \"binomial\", \"poisson\", \"exponential\"). calceffect Default `TRUE`. Whether calculate effect power. calculation expensive parameter power, turned (needed) can greatly speed calculation time. effect_anova Default `TRUE`, whether Type-III Anova likelihood ratio test calculate effect power. `TRUE`, effect power calculated using Type-III Anova (using car package) Wald test. `FALSE`, likelihood ratio test (using reduced model effect) performed using `lmtest` package. `firth = TRUE`, set `FALSE` automatically. varianceratios Default `NULL`. ratio whole plot variance run--run variance. specified design generation, default 1. designs one subplot ratio can vector specifying variance ratio subplot (comparing run--run variance). Otherwise, use single value strata. rfunction Default `NULL`.Random number generator function response variable. function form f(X, b, delta), X model matrix, b anticipated coefficients, delta vector blocking errors. Typically something like rnorm(nrow(X), X * b + delta, 1). need specify like default behavior described . anticoef Default `NULL`.anticipated coefficients calculating power. missing, coefficients automatically generated based effectsize argument. firth Default `FALSE`. Whether apply firth correction (via `mbest` package) logistic regression. setting also automatically sets `effect_lr = TRUE`. effectsize Helper argument generate anticipated coefficients. See details info. specify anticoef, effectsize ignored. contrasts Default contr.sum. contrasts use categorical factors. user specified contrasts categorical factor using contrasts function, used. Otherwise, skpr use contr.sum. user wants set number cores manually, can setting `options(\"cores\")` desired number (e.g. `options(\"cores\" = parallel::detectCores())`). NOTE: installed BLAS libraries include multicore support (e.g. Intel MKL comes Microsoft R Open), turning parallel result reduced performance. parallel Default `FALSE`. `TRUE`, Monte Carlo power calculation use one available cores. user wants set number cores manually, can setting `options(\"cores\")` desired number (e.g. `options(\"cores\" = parallel::detectCores())`). NOTE: installed BLAS libraries include multicore support (e.g. Intel MKL comes Microsoft R Open), turning parallel result reduced performance. adjust_alpha_inflation Default `FALSE`. `TRUE`, run simulation twice: first calculate empirical distribution p-values null hypothesis find true Type-error cutoff corresponds desired Type-error rate, given effect size calculate power values. detailedoutput Default `FALSE`. `TRUE`, return additional information evaluation results. progress Default `TRUE`. Whether include progress bar. advancedoptions Default `NULL`. Named list advanced options. `advancedoptions$anovatype` specifies Anova type car package (default type `III`), user can change type `II`). `advancedoptions$anovatest` specifies test statistic user want `Wald` test--options likelyhood-ratio `LR` F-test `F`. `advancedoptions$progressBarUpdater` function called non-parallel simulations can used update external progress bar.`advancedoptions$GUI` turns warning messages GUI. `advancedoptions$save_simulated_responses = TRUE`, dataframe attribute `simulated_responses` contains simulated responses power evaluation. ... Additional arguments.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design_mc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Power Evaluation for Experimental Designs — eval_design_mc","text":"data frame consisting parameters powers, supplementary information stored data frame's attributes. parameter estimates simulations stored \"estimates\" attribute. \"modelmatrix\" attribute contains model matrix used power evaluation, also provides encoding used categorical factors. want specify anticipated coefficients manually, order parameters appear model matrix.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design_mc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Power Evaluation for Experimental Designs — eval_design_mc","text":"Evaluates power design Monte Carlo simulation. Data simulated fit generalized linear model, fraction simulations parameter significant (p-value, according fit function used, less specified alpha) estimate power parameter. First, blocking = TURE, random noise blocking generated rnorm. block gets single sample Gaussian random noise, variance specified varianceratios, sample copied run block. , rfunction called generate simulated response run design, data fit using appropriate fitting function. functions used simulate data fit determined glmfamily blocking arguments follows. , X model matrix, b anticipated coefficients, d vector blocking noise (blocking = FALSE d = 0): Note exponential random generator uses \"rate\" parameter, skpr glm use mean value parameterization (= 1 / rate), hence minus sign . Also note gaussian model assumes root-mean-square error 1. Power dependent anticipated coefficients. can specify directly anticoef argument, can use effectsize argument specify effect size skpr auto-generate . can provide either length-1 length-2 vector. provide length-1 vector, anticipated coefficients half effectsize; equivalent saying linear predictor (gaussian model, mean response; binomial model, log odds ratio; exponential model, log mean value; poisson model, log expected response) changes effectsize continuous factor goes lowest level highest level. provide length-2 vector, anticipated coefficients set mean response (gaussian model, mean response; binomial model, probability; exponential model, mean response; poisson model, expected response) changes effectsize[1] effectsize[2] factor goes lowest level highest level, assuming factors inactive (x-values zero). effect length-2 effectsize depends glmfamily argument follows: glmfamily = 'gaussian', coefficients set (effectsize[2] - effectsize[1]) / 2. glmfamily = 'binomial', intercept 1/2 * log(effectsize[1] * effectsize[2] / (1 - effectsize[1]) / (1 - effectsize[2])), coefficients 1/2 * log(effectsize[2] * (1 - effectsize[1]) / (1 - effectsize[2]) / effectsize[1]). glmfamily = 'exponential' 'poisson', intercept 1 / 2 * (log(effectsize[2]) + log(effectsize[1])), coefficients 1 / 2 * (log(effectsize[2]) - log(effectsize[1])).","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design_mc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Power Evaluation for Experimental Designs — eval_design_mc","text":"","code":"#We first generate a full factorial design using expand.grid: factorialcoffee = expand.grid(cost = c(-1, 1),                               type = as.factor(c(\"Kona\", \"Colombian\", \"Ethiopian\", \"Sumatra\")),                               size = as.factor(c(\"Short\", \"Grande\", \"Venti\"))) if(skpr:::run_documentation()) { #And then generate the 21-run D-optimal design using gen_design. designcoffee = gen_design(factorialcoffee,                          model = ~cost + type + size, trials = 21, optimality = \"D\") } if(skpr:::run_documentation()) { #To evaluate this design using a normal approximation, we just use eval_design #(here using the default settings for contrasts, effectsize, and the anticipated coefficients):  eval_design(design = designcoffee, model = ~cost + type + size, 0.05) } #>      parameter            type     power #> 1  (Intercept)    effect.power 0.9871086 #> 2         cost    effect.power 0.9871086 #> 3         type    effect.power 0.9239395 #> 4         size    effect.power 0.8484877 #> 5  (Intercept) parameter.power 0.9871086 #> 6         cost parameter.power 0.9871086 #> 7        type1 parameter.power 0.6652414 #> 8        type2 parameter.power 0.6652414 #> 9        type3 parameter.power 0.6652414 #> 10       size1 parameter.power 0.8434093 #> 11       size2 parameter.power 0.8434093 #> ============Evaluation Info============= #> • Alpha = 0.05 • Trials = 21 • Blocked = FALSE  #> • Evaluating Model = ~cost + type + size  #> • Anticipated Coefficients = c(1, 1, 1, -1, 1, 1, -1)  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = `lm(...)`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`  if(skpr:::run_documentation()) { #To evaluate this design with a Monte Carlo method, we enter the same information #used in eval_design, with the addition of the number of simulations \"nsim\" and the distribution #family used in fitting for the glm \"glmfamily\". For gaussian, binomial, exponential, and poisson #families, a default random generating function (rfunction) will be supplied. If another glm #family is used or the default random generating function is not adequate, a custom generating #function can be supplied by the user. Like in `eval_design()`, if the model isn't entered, the #model used in generating the design will be used.  eval_design_mc(designcoffee, nsim = 100, glmfamily = \"gaussian\") } #>      parameter               type power #> 1  (Intercept)    effect.power.mc  0.99 #> 2         cost    effect.power.mc  0.98 #> 3         type    effect.power.mc  0.94 #> 4         size    effect.power.mc  0.84 #> 5  (Intercept) parameter.power.mc  0.99 #> 6         cost parameter.power.mc  0.98 #> 7        type1 parameter.power.mc  0.71 #> 8        type2 parameter.power.mc  0.68 #> 9        type3 parameter.power.mc  0.61 #> 10       size1 parameter.power.mc  0.82 #> 11       size2 parameter.power.mc  0.80 #> ============Evaluation Info============ #> • Alpha = 0.05 • Trials = 21 • Blocked = FALSE  #> • Evaluating Model = ~cost + type + size  #> • Anticipated Coefficients = c(1, 1, 1, -1, 1, 1, -1)  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = `lm(...)`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`  if(skpr:::run_documentation()) { #We see here we generate approximately the same parameter powers as we do #using the normal approximation in eval_design. Like eval_design, we can also change #effectsize to produce a different signal-to-noise ratio:  eval_design_mc(design = designcoffee, nsim = 100,                        glmfamily = \"gaussian\", effectsize = 1) } #>      parameter               type power #> 1  (Intercept)    effect.power.mc  0.51 #> 2         cost    effect.power.mc  0.56 #> 3         type    effect.power.mc  0.36 #> 4         size    effect.power.mc  0.32 #> 5  (Intercept) parameter.power.mc  0.51 #> 6         cost parameter.power.mc  0.56 #> 7        type1 parameter.power.mc  0.20 #> 8        type2 parameter.power.mc  0.27 #> 9        type3 parameter.power.mc  0.25 #> 10       size1 parameter.power.mc  0.31 #> 11       size2 parameter.power.mc  0.33 #> ============Evaluation Info============ #> • Alpha = 0.05 • Trials = 21 • Blocked = FALSE  #> • Evaluating Model = ~cost + type + size  #> • Anticipated Coefficients = c(0.500, 0.500, 0.500, -0.500, 0.500, 0.500, -0.500)  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = `lm(...)`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`  if(skpr:::run_documentation()) { #Like eval_design, we can also evaluate the design with a different model than #the one that generated the design. eval_design_mc(design = designcoffee, model = ~cost + type, alpha = 0.05,               nsim = 100, glmfamily = \"gaussian\") } #>     parameter               type power #> 1 (Intercept)    effect.power.mc  0.98 #> 2        cost    effect.power.mc  0.99 #> 3        type    effect.power.mc  0.93 #> 4 (Intercept) parameter.power.mc  0.98 #> 5        cost parameter.power.mc  0.99 #> 6       type1 parameter.power.mc  0.62 #> 7       type2 parameter.power.mc  0.70 #> 8       type3 parameter.power.mc  0.70 #> ===========Evaluation Info============ #> • Alpha = 0.05 • Trials = 21 • Blocked = FALSE  #> • Evaluating Model = ~cost + type  #> • Anticipated Coefficients = c(1, 1, 1, -1, 1)  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = `lm(...)`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`  if(skpr:::run_documentation()) { #And here it is evaluated with additional interactions included: eval_design_mc(design = designcoffee, model = ~cost + type + size + cost * type, 0.05,               nsim = 100, glmfamily = \"gaussian\") } #>      parameter               type power #> 1  (Intercept)    effect.power.mc  1.00 #> 2         cost    effect.power.mc  0.97 #> 3         type    effect.power.mc  0.90 #> 4         size    effect.power.mc  0.72 #> 5    cost:type    effect.power.mc  0.87 #> 6  (Intercept) parameter.power.mc  1.00 #> 7         cost parameter.power.mc  0.97 #> 8        type1 parameter.power.mc  0.60 #> 9        type2 parameter.power.mc  0.56 #> 10       type3 parameter.power.mc  0.67 #> 11       size1 parameter.power.mc  0.77 #> 12       size2 parameter.power.mc  0.76 #> 13  cost:type1 parameter.power.mc  0.67 #> 14  cost:type2 parameter.power.mc  0.62 #> 15  cost:type3 parameter.power.mc  0.66 #> ============Evaluation Info============ #> • Alpha = 0.05 • Trials = 21 • Blocked = FALSE  #> • Evaluating Model = ~cost + type + size + cost:type  #> • Anticipated Coefficients = c(1, 1, 1, -1, 1, 1, -1, 1, -1, 1)  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = `lm(...)`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`  if(skpr:::run_documentation()) { #We can also set \"parallel = TRUE\" to use all the cores available to speed up #computation. eval_design_mc(design = designcoffee, nsim = 10000,                        glmfamily = \"gaussian\", parallel = TRUE) } #> Error in globalCallingHandlers(condition = global_progression_handler): should not be called with handlers on the stack if(skpr:::run_documentation()) { #We can also evaluate split-plot designs. First, let us generate the split-plot design:  factorialcoffee2 = expand.grid(Temp = c(1, -1),                                Store = as.factor(c(\"A\", \"B\")),                                cost = c(-1, 1),                                type = as.factor(c(\"Kona\", \"Colombian\", \"Ethiopian\", \"Sumatra\")),                                size = as.factor(c(\"Short\", \"Grande\", \"Venti\")))  vhtcdesign = gen_design(factorialcoffee2,                        model = ~Store, trials = 6, varianceratio = 1) htcdesign = gen_design(factorialcoffee2, model = ~Store + Temp, trials = 18,                        splitplotdesign = vhtcdesign, blocksizes = rep(3, 6), varianceratio = 1) splitplotdesign = gen_design(factorialcoffee2,                             model = ~Store + Temp + cost + type + size, trials = 54,                             splitplotdesign = htcdesign, blocksizes = rep(3, 18),                             varianceratio = 1)  #Each block has an additional noise term associated with it in addition to the normal error #term in the model. This is specified by a vector specifying the additional variance for #each split-plot level. This is equivalent to specifying a variance ratio of one between #the whole plots and the run-to-run variance for gaussian models.  #Evaluate the design. Note the decreased power for the blocking factors. eval_design_mc(splitplotdesign, blocking = TRUE, nsim = 100,                        glmfamily = \"gaussian\", varianceratios = c(1, 1, 1)) } #> Error in initializePtr(): function 'cholmod_factor_ldetA' not provided by package 'Matrix' if(skpr:::run_documentation()) { #We can also use this method to evaluate designs that cannot be easily #evaluated using normal approximations. Here, we evaluate a design with a binomial response and see #whether we can detect the difference between each factor changing whether an event occurs #70% of the time or 90% of the time.  factorialbinom = expand.grid(a = c(-1, 1), b = c(-1, 1)) designbinom = gen_design(factorialbinom, model = ~a + b, trials = 90, optimality = \"D\")  eval_design_mc(designbinom, ~a + b, alpha = 0.2, nsim = 100, effectsize = c(0.7, 0.9),               glmfamily = \"binomial\") } #>     parameter               type power #> 1 (Intercept)    effect.power.mc  0.99 #> 2           a    effect.power.mc  0.88 #> 3           b    effect.power.mc  0.94 #> 4 (Intercept) parameter.power.mc  0.99 #> 5           a parameter.power.mc  0.88 #> 6           b parameter.power.mc  0.94 #> ===========Evaluation Info============ #> • Alpha = 0.2 • Trials = 90 • Blocked = FALSE  #> • Evaluating Model = ~a + b  #> • Anticipated Coefficients = c(1.522, 0.675, 0.675)  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = glm(..., family = \"binomial\")`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`  if(skpr:::run_documentation()) { #We can also use this method to determine power for poisson response variables. #Generate the design:  factorialpois = expand.grid(a = as.numeric(c(-1, 0, 1)), b = c(-1, 0, 1)) designpois = gen_design(factorialpois, ~a + b, trials = 70, optimality = \"D\")  #Evaluate the power:  eval_design_mc(designpois, ~a + b, 0.05, nsim = 100, glmfamily = \"poisson\",                anticoef = log(c(0.2, 2, 2))) } #>     parameter               type power #> 1 (Intercept)    effect.power.mc  0.99 #> 2           a    effect.power.mc  0.84 #> 3           b    effect.power.mc  0.78 #> 4 (Intercept) parameter.power.mc  0.99 #> 5           a parameter.power.mc  0.84 #> 6           b parameter.power.mc  0.78 #> ===========Evaluation Info============ #> • Alpha = 0.05 • Trials = 70 • Blocked = FALSE  #> • Evaluating Model = ~a + b  #> • Anticipated Coefficients = c(-1.609, 0.693, 0.693)  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = `glm(..., family = \"poisson\")`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`   #The coefficients above set the nominal value -- that is, the expected count #when all inputs = 0 -- to 0.2 (from the intercept), and say that each factor #changes this count by a factor of 4 (multiplied by 2 when x= +1, and divided by 2 when x = -1). #Note the use of log() in the anticipated coefficients."},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design_survival_mc.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Power for Survival Design — eval_design_survival_mc","title":"Evaluate Power for Survival Design — eval_design_survival_mc","text":"Evaluates power experimental design response variable may right- left-censored. Power evaluated Monte Carlo simulation, using survival package survreg fit data. Split-plot designs supported.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design_survival_mc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Power for Survival Design — eval_design_survival_mc","text":"","code":"eval_design_survival_mc(   design,   model = NULL,   alpha = 0.05,   nsim = 1000,   distribution = \"gaussian\",   censorpoint = NA,   censortype = \"right\",   rfunctionsurv = NULL,   anticoef = NULL,   effectsize = 2,   contrasts = contr.sum,   parallel = FALSE,   detailedoutput = FALSE,   progress = TRUE,   advancedoptions = NULL,   ... )"},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design_survival_mc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Power for Survival Design — eval_design_survival_mc","text":"design experimental design. Internally, numeric columns rescaled [-1, +1]. model model used evaluating design. missing design generated skpr, generating model used. can subset model used generate design, include higher order effects original design generation. include factors present experimental design. alpha Default `0.05`. type-error. p-values less counted significant. nsim number simulations. Default 1000. distribution Distribution survival function use fitting data. Valid choices described documentation survreg. Supported options \"exponential\", \"lognormal\", \"gaussian\". Default \"gaussian\". censorpoint point /(right-censored left-censored data, respectively) data labelled censored. Default NA censoring. argument used internal random number generators; supply function rfunctionsurv parameter, parameter ignored. censortype type censoring (either \"left\" \"right\"). Default \"right\". rfunctionsurv Random number generator function. function form f(X, b), X model matrix b anticipated coefficients. function return Surv object survival package. need provide argument distribution one supported choices satisfied default behavior described . anticoef anticipated coefficients calculating power. missing, coefficients automatically generated based effectsize argument. effectsize Helper argument generate anticipated coefficients. See details info. specify anticoef, effectsize ignored. contrasts Default contr.sum. Function used encode categorical variables model matrix. user specified contrasts categorical factor using contrasts function, used. Otherwise, skpr use contr.sum. parallel Default `FALSE`. `TRUE`, power simulation use one available cores. user wants set number cores manually, can setting `options(\"cores\")` desired number (e.g. `options(\"cores\" = parallel::detectCores())`). NOTE: installed BLAS libraries include multicore support (e.g. Intel MKL comes Microsoft R Open), turning parallel result reduced performance. detailedoutput Default `FALSE`. `TRUE`, return additional information evaluation results. progress Default `TRUE`. Whether include progress bar. advancedoptions Default NULL. Named list advanced options. Pass `progressBarUpdater` include function called non-parallel simulations can used update external progress bar. ... additional arguments passed survreg function fitting.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design_survival_mc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Power for Survival Design — eval_design_survival_mc","text":"data frame consisting parameters powers. parameter estimates simulations stored 'estimates' attribute. 'modelmatrix' attribute contains model matrix encoding used categorical factors. manually specify anticipated coefficients, order model matrix.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design_survival_mc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate Power for Survival Design — eval_design_survival_mc","text":"Evaluates power design Monte Carlo simulation. Data simulated fit survival model (survival::survreg), fraction simulations parameter significant (p-value less specified alpha) estimate power parameter. supplied user, rfunctionsurv generated based distribution argument follows: case, simulated data point past censorpoint (greater right-censored, less left-censored) marked censored. See examples construct function. Power dependent anticipated coefficients. can specify directly anticoef argument, can use effectsize argument specify effect size skpr auto-generate . can provide either length-1 length-2 vector. provide length-1 vector, anticipated coefficients half effectsize; equivalent saying linear predictor (gaussian model, mean response; exponential model lognormal model, log mean value) changes effectsize continuous factor goes lowest level highest level. provide length-2 vector, anticipated coefficients set mean response changes effectsize[1] effectsize[2] factor goes lowest level highest level, assuming factors inactive (x-values zero). effect length-2 effectsize depends distribution argument follows: distribution = 'gaussian', coefficients set (effectsize[2] - effectsize[1]) / 2. distribution = 'exponential' 'lognormal', intercept 1 / 2 * (log(effectsize[2]) + log(effectsize[1])), coefficients 1 / 2 * (log(effectsize[2]) - log(effectsize[1])).","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/eval_design_survival_mc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Power for Survival Design — eval_design_survival_mc","text":"","code":"#These examples focus on the survival analysis case and assume familiarity #with the basic functionality of eval_design_mc.  #We first generate a simple 2-level design using expand.grid: basicdesign = expand.grid(a = c(-1, 1)) design = gen_design(candidateset = basicdesign, model = ~a, trials = 15)  #We can then evaluate the power of the design in the same way as eval_design_mc, #now including the type of censoring (either right or left) and the point at which #the data should be censored:  eval_design_survival_mc(design = design, model = ~a, alpha = 0.05,                         nsim = 100, distribution = \"exponential\",                         censorpoint = 5, censortype = \"right\") #> Warning: default or length 1 delta used with distribution == 'exponential'. This can lead to unrealistic effect sizes - make sure the generated anticipated coeffcients are appropriate. #>     parameter               type power #> 1 (Intercept) parameter.power.mc  0.91 #> 2           a parameter.power.mc  0.97 #> ===========Evaluation Info============ #> • Alpha = 0.05 • Trials = 15 • Blocked = FALSE  #> • Evaluating Model =   #> • Anticipated Coefficients = c(1, 1)   #Built-in Monte Carlo random generating functions are included for the gaussian, exponential, #and lognormal distributions.  #We can also evaluate different censored distributions by specifying a custom #random generating function and changing the distribution argument.  rlognorm = function(X, b) {   Y = rlnorm(n = nrow(X), meanlog = X %*% b, sdlog = 0.4)   censored = Y > 1.2   Y[censored] = 1.2   return(survival::Surv(time = Y, event = !censored, type = \"right\")) }  #Any additional arguments are passed into the survreg function call.  As an example, you #might want to fix the \"scale\" argument to survreg, when fitting a lognormal:  eval_design_survival_mc(design = design, model = ~a, alpha = 0.2, nsim = 100,                         distribution = \"lognormal\", rfunctionsurv = rlognorm,                         anticoef = c(0.184, 0.101), scale = 0.4) #>     parameter               type power #> 1 (Intercept) parameter.power.mc  0.63 #> 2           a parameter.power.mc  0.40 #> ===========Evaluation Info============ #> • Alpha = 0.2 • Trials = 15 • Blocked = FALSE  #> • Evaluating Model =   #> • Anticipated Coefficients = c(0.184, 0.101)"},{"path":"https://tylermorganwall.github.io/skpr/reference/extractPvalues.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract p-values from a model object — extractPvalues","title":"Extract p-values from a model object — extractPvalues","text":"Extract p-values model object. Currently works lm, glm, lme4, glmer, survreg model objects. possible, uses p-values reported summary(model_fit).","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/extractPvalues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract p-values from a model object — extractPvalues","text":"","code":"extractPvalues(model_fit, glmfamily = \"gaussian\")"},{"path":"https://tylermorganwall.github.io/skpr/reference/extractPvalues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract p-values from a model object — extractPvalues","text":"model_fit model object extract.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/extractPvalues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract p-values from a model object — extractPvalues","text":"Returns vector p-values. model_fit supported model type, returns NULL.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_anticoef.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates Anticipated Coefficients — gen_anticoef","title":"Generates Anticipated Coefficients — gen_anticoef","text":"Generates Anticipated Coefficients","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_anticoef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates Anticipated Coefficients — gen_anticoef","text":"","code":"gen_anticoef(RunMatrix, model, nointercept)"},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_anticoef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates Anticipated Coefficients — gen_anticoef","text":"RunMatrix run matrix model model nointercept TRUE intercept model","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_anticoef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates Anticipated Coefficients — gen_anticoef","text":"Anticipated coefficients.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_binomial_anticoef.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates Binomial Anticipated Coefficients — gen_binomial_anticoef","title":"Generates Binomial Anticipated Coefficients — gen_binomial_anticoef","text":"Generates Binomial Anticipated Coefficients Solves logistic function log(p / (1-p)) = beta0 + beta1 * x p = lowprob x = -1, p = highprob x = +1. Equivalently, solves set equations beta0 beta1: log(lowprob / (1 - lowprob)) = beta0 - beta1 log(highprob / (1 - highprob)) = beta0 + beta1","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_binomial_anticoef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates Binomial Anticipated Coefficients — gen_binomial_anticoef","text":"","code":"gen_binomial_anticoef(anticoef, lowprob, highprob)"},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_binomial_anticoef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates Binomial Anticipated Coefficients — gen_binomial_anticoef","text":"anticoef Anticipated coefficients lowprob Default 0.50. base probability highprob Default 0.80. high probability","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_binomial_anticoef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates Binomial Anticipated Coefficients — gen_binomial_anticoef","text":"Anticipated coefficients.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate optimal experimental designs — gen_design","title":"Generate optimal experimental designs — gen_design","text":"Creates experimental design given model, desired number runs, data frame candidate test points. gen_design chooses points candidate set returns design optimal given statistical model.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate optimal experimental designs — gen_design","text":"","code":"gen_design(   candidateset,   model,   trials,   splitplotdesign = NULL,   blocksizes = NULL,   optimality = \"D\",   augmentdesign = NULL,   repeats = 20,   custom_v = NULL,   varianceratio = 1,   contrast = contr.simplex,   aliaspower = 2,   minDopt = 0.8,   k = NA,   parallel = FALSE,   progress = TRUE,   add_blocking_columns = FALSE,   randomized = TRUE,   advancedoptions = NULL,   timer = NULL )"},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate optimal experimental designs — gen_design","text":"candidateset data frame candidate test points; run optimal design chosen (replacement) candidate set. row data frame candidate test point. row unique. Usually full factorial test matrix generated factors model unless disallowed combinations runs. Factors present candidate set present model stripped , duplicate entries candidate set removed. Disallowed combinations can specified simply removing candidate set. Disallowed combinations hard--change easy--change factor detected comparing internal candidate set generated unique levels present candidate set split plot design. points excluded search. factor continuous, column type numeric. factor categorical, column type factor character. model statistical model used generate test design. trials number runs design. splitplotdesign `NULL`, fully randomized design generated. NULL, split-plot design generated, argument specifies design factors harder change current set factors. row corresponds block harder change factors held constant. row splitplotdesign replicated specified blocksizes, optimal design found factors given model argument, taking consideration fixed replicated hard--change factors. blocksizes missing, `gen_design` attempt allocate runs balanced design possible, given number blocks given argument `splitplotdesign` total number `trials`. blocksizes Default `NULL`. Specifies block size(s) design generation. one number passed, `gen_design()` create blocks specified size, total number run specified `trials` divisible number, `gen_design()` attempt allocate runs balanced design possible. list passed, entry list specify additional layer blocking. `splitplotdesign` `NULL`, argument specifies number subplots within whole plot (whole plot corresponding row `splitplotdesign` data.frame). optimality Default `D`. optimality criterion used generating design. Full list supported criteria: \"D\", \"\", \"\", \"ALIAS\", \"G\", \"T\", \"E\", \"CUSTOM\". \"CUSTOM\", user must also define function model matrix named `customOpt` namespace returns single value, algorithm attempt optimize. `CUSTOM` optimality split-plot designs, user must instead define `customBlockedOpt`, function model matrix variance-covariance matrix. information algorithm behind Alias-optimal designs, see Jones Nachtsheim. \"Efficient Designs Minimal Aliasing.\" Technometrics, vol. 53, . 1, 2011, pp. 62-71. augmentdesign Default NULL. `data.frame` runs fixed optimal search process. columns `augmentdesign` must match candidate set. search algorithm search optimal `trials` - `nrow(augmentdesign)` remaining runs. repeats Default `20`. number times repeat search best optimal design. custom_v Default `NULL`. user can pass custom variance-covariance matrix used blocked design generation. varianceratio Default `1`. ratio block run--run variance given stratum split plot/blocked design. requires design passed `splitplotdesign`, overridden `1` split plot design entered. contrast Default `contr.simplex`, orthonormal sum contrast. Function used generate encoding categorical variables. aliaspower Default `2`. Degree interactions used calculating alias matrix alias optimal designs. minDopt Default `0.8`. Minimum value D-Optimality design searching Alias-optimal designs. k Default `NA`. D-optimal designs, changes search k-exchange algorithm Johnson Nachtsheim. \"Guidelines Constructing Exact D-Optimal Designs Convex Design Spaces.\" Technometrics, vol. 25, 1983, pp. 271-277. exchanges k lowest variance runs design search iteration. Lower numbers can result faster search, less likely tofind optimal design. Values `k >= n/4` shown empirically generate similar designs full search. `k == trials`, results default modified Federov's algorithm. `k` 1 form Wynn's algorithm Wynn. \"Results Theory Construction D-Optimum Experimental Designs,\" Journal Royal Statistical Society, Ser. B,vol. 34, 1972, pp. 133-14. parallel Default `FALSE`. `TRUE`, optimal design search use one available cores. can lead substantial speed-search complex designs. user wants set number cores manually, can setting `options(\"cores\")` desired number (e.g. `options(\"cores\" = parallel::detectCores())`). NOTE: installed BLAS libraries include multicore support (e.g. Intel MKL comes Microsoft R Open), turning parallel result reduced performance. progress Default `TRUE`. Whether include progress bar. add_blocking_columns Default `FALSE`. blocking structure design indicated row names returned design. `TRUE`, design also extra columns indicate blocking structure. blocking detected, columns added. randomized Default `TRUE`, due intrinsic randomization design search algorithm. `FALSE`, randomized design re-ordered left right. advancedoptions Default `NULL`. named list advanced users want adjust optimal design algorithm parameters. Advanced option names `design_search_tolerance` (smallest fractional increase design search terminates), `alias_tie_power` (degree aliasing matrix calculating optimality tie-breakers), `alias_tie_tolerance` (smallest absolute difference optimality criterion designs considered equal considering aliasing structure),  `alias_compare`` (set FALSE turns alias tie breaking completely), `aliasmodel` (provided user want calculate Alias-optimality using `aliaspower` interaction terms), `progressBarUpdater`` (function called non-parallel optimal searches can used update external progress bar). Finally, `g_efficiency_method`, sets method used calculate G-efficiency (default \"random\" random Monte Carlo sampling design space, \"optim\" use simulated annealing, \"custom\" explicitly define points design space, fastest method way calculate prediction variance disallowed combinations). , also `g_efficiency_samples`, specifies number random samples  (default 1000 `g_efficiency_method = \"random\"`), attempts simulated annealing (default 1 `g_efficiency_method = \"optim\"`), data.frame defining exact points design space `g_efficiency_method = \"custom\"`. timer Deprecated: Use `progress` instead.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate optimal experimental designs — gen_design","text":"data frame containing run matrix optimal design. returned data frame contains supplementary information attributes, can accessed `get_attributes()` `get_optimality()` functions.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate optimal experimental designs — gen_design","text":"Split-plot designs can generated repeated applications gen_design; see examples details.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate optimal experimental designs — gen_design","text":"","code":"#Generate the basic factorial candidate set with expand.grid. #Generating a basic 2 factor candidate set: basic_candidates = expand.grid(x1 = c(-1, 1), x2 = c(-1, 1))  #This candidate set is used as an input in the optimal design generation for a #D-optimal design with 11 runs. design = gen_design(candidateset = basic_candidates, model = ~x1 + x2, trials = 11)  #We can also use the dot formula to automatically use all of the terms in the model: design = gen_design(candidateset = basic_candidates, model = ~., trials = 11)  #Here we add categorical factors, specified by using \"as.factor\" in expand.grid: categorical_candidates = expand.grid(a = c(-1, 1),                                      b = as.factor(c(\"A\", \"B\")),                                      c = as.factor(c(\"High\", \"Med\", \"Low\")))  #This candidate set is used as an input in the optimal design generation. design2 = gen_design(candidateset = categorical_candidates, model = ~a + b + c, trials = 19)  #We can also increase the number of times the algorithm repeats #the search to increase the probability that the globally optimal design was found. design2 = gen_design(candidateset = categorical_candidates,                     model = ~a + b + c, trials = 19, repeats = 100)  #We can perform a k-exchange algorithm instead of a full search to help speed up #the search process, although this can lead to less optimal designs. Here, we only #exchange the 10 lowest variance runs in each search iteration. if(skpr:::run_documentation()) { design_k = gen_design(candidateset = categorical_candidates,                     model = ~a + b + c, trials = 19, repeats = 100, k = 10) }  #To speed up the design search, you can turn on multicore support with the parallel option. #You can also customize the number of cores used by setting the cores option. By default, #all cores are used. if(skpr:::run_documentation()) { options(cores = 2) design2 = gen_design(categorical_candidates,                     model = ~a + b + c, trials = 19, repeats = 1000, parallel = TRUE) } #> Loading required package: foreach #> Loading required package: future  #You can also use a higher order model when generating the design: design2 = gen_design(categorical_candidates,                     model = ~a + b + c + a * b * c, trials = 12, repeats = 10)  #To evaluate a response surface design, include center points #in the candidate set and include quadratic effects (but not for the categorical factors).  quad_candidates = expand.grid(a = c(1, 0, -1), b = c(-1, 0, 1), c = c(\"A\", \"B\", \"C\"))  gen_design(quad_candidates, ~a + b + I(a^2) + I(b^2) + a * b * c, 20) #>     a  b c #> 1  -1 -1 A #> 2   1 -1 A #> 3   1  1 A #> 4   1 -1 B #> 5   1 -1 C #> 6   1  1 B #> 7  -1 -1 C #> 8   0  0 B #> 9   1  0 C #> 10 -1 -1 B #> 11 -1  1 B #> 12  0 -1 C #> 13 -1  1 C #> 14  1  1 A #> 15  1 -1 A #> 16 -1  1 A #> 17  0  1 C #> 18 -1  0 C #> 19  1  1 C #> 20 -1  1 A  #The optimality criterion can also be changed: gen_design(quad_candidates, ~a + b + I(a^2) + I(b^2) + a * b * c, 20,           optimality = \"I\", repeats = 10) #>     a  b c #> 1   1  1 B #> 2   1  1 A #> 3  -1 -1 A #> 4   0  0 A #> 5  -1 -1 B #> 6  -1 -1 C #> 7   0  0 B #> 8   1  1 C #> 9   1 -1 B #> 10  0  0 B #> 11 -1  1 A #> 12 -1  1 C #> 13 -1  1 B #> 14  1 -1 A #> 15  0  0 A #> 16  0  1 C #> 17 -1  0 C #> 18  0 -1 C #> 19  1 -1 C #> 20  1  0 C gen_design(quad_candidates, ~a + b + I(a^2) + I(b^2) + a * b * c, 20,           optimality = \"A\", repeats = 10) #>     a  b c #> 1   1  1 B #> 2   1 -1 A #> 3   1  1 A #> 4  -1 -1 C #> 5   0  0 C #> 6  -1  0 A #> 7   0  0 B #> 8  -1  1 B #> 9   0  1 A #> 10  1 -1 B #> 11  0 -1 A #> 12 -1 -1 B #> 13  0  0 C #> 14 -1 -1 A #> 15  1 -1 C #> 16 -1  1 C #> 17 -1  0 B #> 18  1  0 A #> 19 -1  1 A #> 20  1  1 C  #A blocked design can be generated by specifying the `blocksizes` argument. Passing a single #number will create designs with blocks of that size, while passing multiple values in a list #will specify multiple layers of blocking.  #Specify a single layer gen_design(quad_candidates, ~a + b + c, 21, blocksizes=3, add_blocking_column=TRUE) #>    Block1  a  b c #> 1       1 -1  1 B #> 2       1  1 -1 C #> 3       1  1  1 A #> 4       2  1  1 C #> 5       2 -1 -1 A #> 6       2  1  1 B #> 7       3 -1  1 B #> 8       3  1  1 A #> 9       3  1 -1 C #> 10      4 -1  1 A #> 11      4 -1  1 C #> 12      4  1 -1 B #> 13      5  1  1 A #> 14      5 -1 -1 B #> 15      5  1  1 C #> 16      6  1 -1 B #> 17      6 -1 -1 A #> 18      6 -1  1 C #> 19      7  1 -1 A #> 20      7 -1 -1 C #> 21      7  1  1 B  #Manually specify the block sizes for a single layer, must add to `trials`` gen_design(quad_candidates, ~a + b + c, 21, blocksizes=c(4,3,2,3,3,3,3),           add_blocking_column=TRUE) #>    Block1  a  b c #> 1       1  1  1 A #> 2       1 -1  1 B #> 3       1 -1 -1 A #> 4       1  1 -1 C #> 5       2  1  1 B #> 6       2 -1 -1 C #> 7       2  1 -1 A #> 8       3 -1  1 C #> 9       3  1 -1 B #> 10      4  1  1 A #> 11      4 -1 -1 B #> 12      4 -1  1 C #> 13      5 -1 -1 B #> 14      5 -1  1 A #> 15      5  1  1 C #> 16      6 -1 -1 A #> 17      6  1  1 B #> 18      6 -1  1 C #> 19      7 -1  1 A #> 20      7  1 -1 C #> 21      7 -1  1 B  #Multiple layers of blocking gen_design(quad_candidates, ~a + b + c, 21, blocksizes=list(7,3),           add_blocking_column=TRUE) #>    Block1 b  c NA NA #> 1       1 1 -1  1  B #> 2       1 1  1 -1  A #> 3       1 1  1  1  C #> 4       1 2 -1 -1  A #> 5       1 2  1 -1  C #> 6       1 2  1  1  B #> 7       1 3 -1  1  C #> 8       2 3 -1  1  A #> 9       2 3  1 -1  B #> 10      2 4  1  1  C #> 11      2 4 -1 -1  B #> 12      2 4  1  1  A #> 13      2 5  1  1  B #> 14      2 5 -1 -1  C #> 15      3 5  1 -1  A #> 16      3 6  1  1  B #> 17      3 6 -1  1  A #> 18      3 6  1 -1  C #> 19      3 7 -1  1  C #> 20      3 7  1  1  A #> 21      3 7 -1 -1  B  #Multiple layers of blocking, specified individually gen_design(quad_candidates, ~a + b + c, 21, blocksizes=list(7,c(4,3,2,3,3,3,3)),           add_blocking_column=TRUE) #>    Block1 b  c NA NA #> 1       1 1  1  1  C #> 2       1 1 -1  1  A #> 3       1 1  1 -1  C #> 4       1 1 -1 -1  B #> 5       1 2 -1  1  C #> 6       1 2  1 -1  A #> 7       1 2  1  1  B #> 8       2 3 -1 -1  B #> 9       2 3  1  1  A #> 10      2 4 -1  1  A #> 11      2 4  1 -1  B #> 12      2 4  1  1  C #> 13      2 5 -1  1  C #> 14      2 5  1 -1  A #> 15      3 5  1  1  B #> 16      3 6 -1  1  B #> 17      3 6  1  1  A #> 18      3 6  1 -1  C #> 19      3 7 -1 -1  A #> 20      3 7  1  1  B #> 21      3 7 -1 -1  C  #A split-plot design can be generated by first generating an optimal blocking design using the #hard-to-change factors and then using that as the input for the split-plot design. #This generates an optimal subplot design that accounts for the existing split-plot settings.  splitplotcandidateset = expand.grid(Altitude = c(-1, 1),                                     Range = as.factor(c(\"Close\", \"Medium\", \"Far\")),                                     Power = c(1, -1)) hardtochangedesign = gen_design(splitplotcandidateset, model = ~Altitude,                                trials = 11, repeats = 10)  #Now we can use the D-optimal blocked design as an input to our full design.  #Here, we add the easy to change factors from the candidate set to the model, #and input the hard-to-change design along with the new number of trials. `gen_design` will #automatically allocate the runs in the blocks in the most balanced way possible.  designsplitplot = gen_design(splitplotcandidateset, ~Altitude + Range + Power, trials = 33,                              splitplotdesign = hardtochangedesign, repeats = 10)  #If we want to allocate the blocks manually, we can do that with the argument `blocksizes`. This #vector must sum to the number of `trials` specified.  #Putting this all together: designsplitplot = gen_design(splitplotcandidateset, ~Altitude + Range + Power, trials = 33,                              splitplotdesign = hardtochangedesign,                              blocksizes = c(4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2), repeats = 10)  #The split-plot structure is encoded into the row names, with a period #demarcating the blocking level. This process can be repeated for arbitrary #levels of blocking (i.e. a split-plot design can be entered in as the hard-to-change #to produce a split-split-plot design, which can be passed as another #hard-to-change design to produce a split-split-split plot design, etc). #In the following, note that the model builds up as we build up split plot strata.  splitplotcandidateset2 = expand.grid(Location = as.factor(c(\"East\", \"West\")),                                      Climate = as.factor(c(\"Dry\", \"Wet\", \"Arid\")),                                      Vineyard = as.factor(c(\"A\", \"B\", \"C\", \"D\")),                                      Age = c(1, -1)) #6 blocks of Location: temp = gen_design(splitplotcandidateset2, ~Location, trials = 6, varianceratio = 2, repeats = 10) #> Warning: varianceratio cannot be set when split-plot design is not null.  #Each Location block has 2 blocks of Climate: temp = gen_design(splitplotcandidateset2, ~Location + Climate,                   trials = 12, splitplotdesign = temp, blocksizes = 2,                   varianceratio = 1, repeats = 10)  #Each Climate block has 4 blocks of Vineyard: temp = gen_design(splitplotcandidateset2, ~Location + Climate + Vineyard,                   trials = 48, splitplotdesign = temp, blocksizes = 4,                   varianceratio = 1, repeats = 10)  #Each Vineyard block has 4 runs with different Age: if(skpr:::run_documentation()) { splitsplitsplitplotdesign = gen_design(splitplotcandidateset2, ~Location + Climate + Vineyard + Age,                                        trials = 192, splitplotdesign = temp, blocksizes = 4,                                        varianceratio = 1, add_blocking_columns = TRUE) } #gen_design also supports user-defined optimality criterion. The user defines a function #of the model matrix named customOpt, and gen_design will attempt to generate a design #that maximizes that function. This function needs to be in the global environment, and be #named either customOpt or customBlockedOpt, depending on whether a split-plot design is being #generated. customBlockedOpt should be a function of the model matrix as well as the #variance-covariance matrix, vInv. Due to the underlying C + + code having to call back to the R #environment repeatedly, this criterion will be significantly slower than the built-in algorithms. #It does, however, offer the user a great deal of flexibility in generating their designs.  #We are going to write our own D-optimal search algorithm using base R functions. Here, write #a function that calculates the determinant of the information matrix. gen_design will search #for a design that maximizes this function.  customOpt = function(currentDesign) {  return(det(t(currentDesign) %*% currentDesign)) }  #Generate the whole plots for our split-plot design, using the custom criterion.  candlistcustom = expand.grid(Altitude = c(10000, 20000),                             Range = as.factor(c(\"Close\", \"Medium\", \"Far\")),                             Power = c(50, 100)) htcdesign = gen_design(candlistcustom, model = ~Altitude + Range,                       trials = 11, optimality = \"CUSTOM\", repeats = 10) #> Error: Cannot convert object to a function: [type=NULL; target=CLOSXP, SPECIALSXP, or BUILTINSXP].  #Now define a function that is a function of both the model matrix, #as well as the variance-covariance matrix vInv. This takes the blocking structure into account #when calculating our determinant.  customBlockedOpt = function(currentDesign, vInv) {  return(det(t(currentDesign) %*% vInv %*% currentDesign)) }  #And finally, calculate the design. This (likely) results in the same design had we chosen the #\"D\" criterion.  design = gen_design(candlistcustom,                    ~Altitude + Range + Power, trials = 33,                    splitplotdesign = htcdesign, blocksizes = 3,                    optimality = \"CUSTOM\", repeats = 10) #> Error in eval(expr, envir, enclos): object 'htcdesign' not found  #gen_design can also augment an existing design. Input a dataframe of pre-existing runs #to the `augmentdesign` argument. Those runs in the new design will be fixed, and gen_design #will perform a search for the remaining `trials - nrow(augmentdesign)` runs.  candidateset = expand.grid(height = c(10, 20), weight = c(45, 55, 65), range = c(1, 2, 3))  design_to_augment = gen_design(candidateset, ~height + weight + range, 5)  #As long as the columns in the augmented design match the columns in the candidate set, #this design can be augmented.  augmented_design = gen_design(candidateset,                              ~height + weight + range, 16, augmentdesign = design_to_augment)  #A design's diagnostics can be accessed via the `get_optimality()` function:  get_optimality(augmented_design) #>     D     I   A            G  T  E    Alias #> 1 100 0.125 100 Not Computed 64 16 92111.39  #And design attributes can be accessed with the `get_attribute()` function:  get_attribute(design) #> $model.matrix #>       (Intercept) x1 x2 #>  [1,]           1  1 -1 #>  [2,]           1  1  1 #>  [3,]           1 -1  1 #>  [4,]           1 -1  1 #>  [5,]           1 -1 -1 #>  [6,]           1 -1 -1 #>  [7,]           1 -1 -1 #>  [8,]           1  1  1 #>  [9,]           1 -1  1 #> [10,]           1  1  1 #> [11,]           1  1 -1 #>  #> $moments.matrix #>             (Intercept)        x1        x2 #> (Intercept)           1 0.0000000 0.0000000 #> x1                    0 0.3333333 0.0000000 #> x2                    0 0.0000000 0.3333333 #>  #> $variance.matrix #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] #>  [1,]    1    0    0    0    0    0    0    0    0     0     0 #>  [2,]    0    1    0    0    0    0    0    0    0     0     0 #>  [3,]    0    0    1    0    0    0    0    0    0     0     0 #>  [4,]    0    0    0    1    0    0    0    0    0     0     0 #>  [5,]    0    0    0    0    1    0    0    0    0     0     0 #>  [6,]    0    0    0    0    0    1    0    0    0     0     0 #>  [7,]    0    0    0    0    0    0    1    0    0     0     0 #>  [8,]    0    0    0    0    0    0    0    1    0     0     0 #>  [9,]    0    0    0    0    0    0    0    0    1     0     0 #> [10,]    0    0    0    0    0    0    0    0    0     1     0 #> [11,]    0    0    0    0    0    0    0    0    0     0     1 #>  #> $alias.matrix #>             x1 x2      x1:x2 #> (Intercept)  0  0  0.1111111 #> x1           1  0  0.1111111 #> x2           0  1 -0.1111111 #>  #> $correlation.matrix #>            x1         x2 #> x1 1.00000000 0.09090909 #> x2 0.09090909 1.00000000 #>  #> $model #> ~x1 + x2 #> <environment: 0x55c3b4c2ee70> #>   #A correlation color map can be produced by calling the plot_correlation command with the output #of gen_design()  if(skpr:::run_documentation()) { plot_correlations(design2) }   #A fraction of design space plot can be produced by calling the plot_fds command if(skpr:::run_documentation()) { plot_fds(design2) }   #Evaluating the design for power can be done with eval_design, eval_design_mc (Monte Carlo) #eval_design_survival_mc (Monte Carlo survival analysis), and #eval_design_custom_mc (Custom Library Monte Carlo)"},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_exponential_anticoef.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates Exponential Anticipated Coefficients — gen_exponential_anticoef","title":"Generates Exponential Anticipated Coefficients — gen_exponential_anticoef","text":"Generates Exponential Anticipated Coefficients Solves exponential link function mean = exp(beta0 + beta1 * x) mean = mean_low x = -1, mean = mean_high x = +1. Equivalently, solves set equations beta0 beta1: mean_low = exp(beta0 - beta1) mean_high = exp(beta0 + beta1)","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_exponential_anticoef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates Exponential Anticipated Coefficients — gen_exponential_anticoef","text":"","code":"gen_exponential_anticoef(anticoef, mean_low, mean_high)"},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_exponential_anticoef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates Exponential Anticipated Coefficients — gen_exponential_anticoef","text":"anticoef input anticipated coefficeints mean_low low value mean value (= 1/rate) mean_high high value mean value (= 1/rate)","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_exponential_anticoef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates Exponential Anticipated Coefficients — gen_exponential_anticoef","text":"Anticipated coefficients.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_momentsmatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates the moment matrix — gen_momentsmatrix","title":"Generates the moment matrix — gen_momentsmatrix","text":"Returns number levels prior parameter","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_momentsmatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates the moment matrix — gen_momentsmatrix","text":"","code":"gen_momentsmatrix(modelfactors, levelvector, classvector)"},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_momentsmatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates the moment matrix — gen_momentsmatrix","text":"Returns vector consisting number levels preceeding parameter (including intercept)","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_poisson_anticoef.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates Poisson Anticipated Coefficients — gen_poisson_anticoef","title":"Generates Poisson Anticipated Coefficients — gen_poisson_anticoef","text":"Generates Poisson Anticipated Coefficients Solves Poisson link function mean = exp(beta0 + beta1 * x) mean = mean_low x = -1, mean = mean_high x = +1. Equivalently, solves set equations beta0 beta1: mean_low = exp(beta0 - beta1) mean_high = exp(beta0 + beta1)","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_poisson_anticoef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates Poisson Anticipated Coefficients — gen_poisson_anticoef","text":"","code":"gen_poisson_anticoef(anticoef, mean_low, mean_high)"},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_poisson_anticoef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates Poisson Anticipated Coefficients — gen_poisson_anticoef","text":"anticoef input anticipated coefficients proper length model matrix mean_low low value mean value mean_high high value mean value","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/gen_poisson_anticoef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates Poisson Anticipated Coefficients — gen_poisson_anticoef","text":"Anticipated coefficients.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/generate_block_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Block Panel — generate_block_panel","title":"Generate Block Panel — generate_block_panel","text":"Generate Block Panel","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/generate_block_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Block Panel — generate_block_panel","text":"","code":"generate_block_panel(any_htc)"},{"path":"https://tylermorganwall.github.io/skpr/reference/generate_block_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Block Panel — generate_block_panel","text":"any_htc Factor number","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/generate_block_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Block Panel — generate_block_panel","text":"Shiny UI","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/generate_factor_input_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Factor Input Panel — generate_factor_input_panel","title":"Generate Factor Input Panel — generate_factor_input_panel","text":"Generate Factor Input Panel","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/generate_factor_input_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Factor Input Panel — generate_factor_input_panel","text":"","code":"generate_factor_input_panel(factor_n = 1, factor_input_cache = NULL)"},{"path":"https://tylermorganwall.github.io/skpr/reference/generate_factor_input_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Factor Input Panel — generate_factor_input_panel","text":"factor_n Factor number","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/generate_factor_input_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Factor Input Panel — generate_factor_input_panel","text":"Shiny UI","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/generate_noise_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Noise Block — generate_noise_block","title":"Generate Noise Block — generate_noise_block","text":"Generates noise added REML power calculation","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/generate_noise_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Noise Block — generate_noise_block","text":"","code":"generate_noise_block(noise, groups)"},{"path":"https://tylermorganwall.github.io/skpr/reference/generate_noise_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Noise Block — generate_noise_block","text":"Noise vector","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/generate_optimality_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Optimality Results — generate_optimality_results","title":"Generate Optimality Results — generate_optimality_results","text":"Generate Optimality Results","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/generate_optimality_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Optimality Results — generate_optimality_results","text":"","code":"generate_optimality_results(any_htc)"},{"path":"https://tylermorganwall.github.io/skpr/reference/generate_optimality_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Optimality Results — generate_optimality_results","text":"any_htc Factor number","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/generate_optimality_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Optimality Results — generate_optimality_results","text":"Shiny UI","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/genhypmatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Hypothesis Matrix — genhypmatrix","title":"Generate Hypothesis Matrix — genhypmatrix","text":"Generates hypothesis matrix power calculation","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/genhypmatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Hypothesis Matrix — genhypmatrix","text":"","code":"genhypmatrix(parameters, levels, g)"},{"path":"https://tylermorganwall.github.io/skpr/reference/genhypmatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Hypothesis Matrix — genhypmatrix","text":"parameters Number parameters total model levels Number levels parameter interest g Number levels/parameters preceding parameter interest","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/genhypmatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Hypothesis Matrix — genhypmatrix","text":"parameter matrix L isolating levels parameter interest","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/genparammatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Parameter Matrix — genparammatrix","title":"Generate Parameter Matrix — genparammatrix","text":"Generates parameter matrix L isolate levels interest calculation power","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/genparammatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Parameter Matrix — genparammatrix","text":"","code":"genparammatrix(parameters, levels, g)"},{"path":"https://tylermorganwall.github.io/skpr/reference/genparammatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Parameter Matrix — genparammatrix","text":"parameters Number parameters total model. levels Number levels parameter interest g Number levels/parameters preceeding parameter interest","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/genparammatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Parameter Matrix — genparammatrix","text":"parameter vector Q isolating levels parameter interest","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/get_attribute.html","id":null,"dir":"Reference","previous_headings":"","what":"Get attribute values — get_attribute","title":"Get attribute values — get_attribute","text":"Returns one underlying attributes used design generation/evaluation","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/get_attribute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get attribute values — get_attribute","text":"","code":"get_attribute(output, attr = NULL, round = TRUE)"},{"path":"https://tylermorganwall.github.io/skpr/reference/get_attribute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get attribute values — get_attribute","text":"output output either `gen_design()` `eval_design()`/`eval_design_mc()`` attr Default `NULL`. Return just specific value requested. Potential values `model.matrix` model used, `moments.matrix`, `variance.matrix`, `alias.matrix`, `correlation.matrix`, `model` model used evaluation/generation design. round Default `TRUE`. Rounds values smaller magnitude `1e-15`` `correlation.matrix` `alias.matrix` matrix attributes.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/get_attribute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get attribute values — get_attribute","text":"list attributes.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/get_attribute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get attribute values — get_attribute","text":"","code":"# We can extract the attributes of a design from either the output of `gen_design()` # or the output of `eval_design()`  factorialcoffee = expand.grid(cost = c(1, 2),                              type = as.factor(c(\"Kona\", \"Colombian\", \"Ethiopian\", \"Sumatra\")),                              size = as.factor(c(\"Short\", \"Grande\", \"Venti\")))  designcoffee = gen_design(factorialcoffee, ~cost + size + type, trials = 29,                          optimality = \"D\", repeats = 100)  #Extract a list of all attributes get_attribute(designcoffee) #> $model.matrix #>       (Intercept) cost      size1     size2      type1      type2     type3 #>  [1,]           1    1 -0.7071068  1.224745  1.7320508  0.0000000  0.000000 #>  [2,]           1   -1 -0.7071068 -1.224745 -0.5773503 -0.8164966 -1.414214 #>  [3,]           1    1 -0.7071068 -1.224745  1.7320508  0.0000000  0.000000 #>  [4,]           1    1 -0.7071068  1.224745 -0.5773503 -0.8164966  1.414214 #>  [5,]           1   -1 -0.7071068  1.224745 -0.5773503 -0.8164966 -1.414214 #>  [6,]           1    1  1.4142136  0.000000 -0.5773503 -0.8164966  1.414214 #>  [7,]           1   -1  1.4142136  0.000000 -0.5773503 -0.8164966 -1.414214 #>  [8,]           1   -1  1.4142136  0.000000  1.7320508  0.0000000  0.000000 #>  [9,]           1    1 -0.7071068 -1.224745 -0.5773503 -0.8164966  1.414214 #> [10,]           1   -1 -0.7071068 -1.224745 -0.5773503 -0.8164966  1.414214 #> [11,]           1    1 -0.7071068 -1.224745 -0.5773503  1.6329932  0.000000 #> [12,]           1   -1 -0.7071068  1.224745  1.7320508  0.0000000  0.000000 #> [13,]           1    1 -0.7071068 -1.224745 -0.5773503 -0.8164966 -1.414214 #> [14,]           1   -1 -0.7071068 -1.224745 -0.5773503 -0.8164966  1.414214 #> [15,]           1    1  1.4142136  0.000000  1.7320508  0.0000000  0.000000 #> [16,]           1    1  1.4142136  0.000000 -0.5773503  1.6329932  0.000000 #> [17,]           1   -1 -0.7071068  1.224745 -0.5773503  1.6329932  0.000000 #> [18,]           1   -1 -0.7071068  1.224745 -0.5773503  1.6329932  0.000000 #> [19,]           1   -1 -0.7071068 -1.224745 -0.5773503  1.6329932  0.000000 #> [20,]           1   -1  1.4142136  0.000000 -0.5773503 -0.8164966  1.414214 #> [21,]           1   -1 -0.7071068  1.224745 -0.5773503 -0.8164966 -1.414214 #> [22,]           1    1  1.4142136  0.000000 -0.5773503 -0.8164966 -1.414214 #> [23,]           1    1 -0.7071068  1.224745 -0.5773503 -0.8164966  1.414214 #> [24,]           1   -1 -0.7071068  1.224745  1.7320508  0.0000000  0.000000 #> [25,]           1    1 -0.7071068  1.224745 -0.5773503 -0.8164966 -1.414214 #> [26,]           1   -1 -0.7071068 -1.224745  1.7320508  0.0000000  0.000000 #> [27,]           1   -1  1.4142136  0.000000 -0.5773503 -0.8164966  1.414214 #> [28,]           1   -1  1.4142136  0.000000 -0.5773503  1.6329932  0.000000 #> [29,]           1    1 -0.7071068  1.224745 -0.5773503  1.6329932  0.000000 #>  #> $moments.matrix #>             (Intercept)      cost size1 size2 type1 type2 type3 #> (Intercept)           1 0.0000000     0     0     0     0     0 #> cost                  0 0.3333333     0     0     0     0     0 #> size1                 0 0.0000000     1     0     0     0     0 #> size2                 0 0.0000000     0     1     0     0     0 #> type1                 0 0.0000000     0     0     1     0     0 #> type2                 0 0.0000000     0     0     0     1     0 #> type3                 0 0.0000000     0     0     0     0     1 #>  #> $variance.matrix #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]    1    0    0    0    0    0    0    0    0     0     0     0     0 #>  [2,]    0    1    0    0    0    0    0    0    0     0     0     0     0 #>  [3,]    0    0    1    0    0    0    0    0    0     0     0     0     0 #>  [4,]    0    0    0    1    0    0    0    0    0     0     0     0     0 #>  [5,]    0    0    0    0    1    0    0    0    0     0     0     0     0 #>  [6,]    0    0    0    0    0    1    0    0    0     0     0     0     0 #>  [7,]    0    0    0    0    0    0    1    0    0     0     0     0     0 #>  [8,]    0    0    0    0    0    0    0    1    0     0     0     0     0 #>  [9,]    0    0    0    0    0    0    0    0    1     0     0     0     0 #> [10,]    0    0    0    0    0    0    0    0    0     1     0     0     0 #> [11,]    0    0    0    0    0    0    0    0    0     0     1     0     0 #> [12,]    0    0    0    0    0    0    0    0    0     0     0     1     0 #> [13,]    0    0    0    0    0    0    0    0    0     0     0     0     1 #> [14,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [15,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [16,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [17,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [18,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [19,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [20,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [21,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [22,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [23,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [24,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [25,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [26,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [27,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [28,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [29,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] #>  [1,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [2,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [3,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [4,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [5,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [6,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [7,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [8,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [9,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [10,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [11,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [12,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [13,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [14,]     1     0     0     0     0     0     0     0     0     0     0     0 #> [15,]     0     1     0     0     0     0     0     0     0     0     0     0 #> [16,]     0     0     1     0     0     0     0     0     0     0     0     0 #> [17,]     0     0     0     1     0     0     0     0     0     0     0     0 #> [18,]     0     0     0     0     1     0     0     0     0     0     0     0 #> [19,]     0     0     0     0     0     1     0     0     0     0     0     0 #> [20,]     0     0     0     0     0     0     1     0     0     0     0     0 #> [21,]     0     0     0     0     0     0     0     1     0     0     0     0 #> [22,]     0     0     0     0     0     0     0     0     1     0     0     0 #> [23,]     0     0     0     0     0     0     0     0     0     1     0     0 #> [24,]     0     0     0     0     0     0     0     0     0     0     1     0 #> [25,]     0     0     0     0     0     0     0     0     0     0     0     1 #> [26,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [27,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [28,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [29,]     0     0     0     0     0     0     0     0     0     0     0     0 #>       [,26] [,27] [,28] [,29] #>  [1,]     0     0     0     0 #>  [2,]     0     0     0     0 #>  [3,]     0     0     0     0 #>  [4,]     0     0     0     0 #>  [5,]     0     0     0     0 #>  [6,]     0     0     0     0 #>  [7,]     0     0     0     0 #>  [8,]     0     0     0     0 #>  [9,]     0     0     0     0 #> [10,]     0     0     0     0 #> [11,]     0     0     0     0 #> [12,]     0     0     0     0 #> [13,]     0     0     0     0 #> [14,]     0     0     0     0 #> [15,]     0     0     0     0 #> [16,]     0     0     0     0 #> [17,]     0     0     0     0 #> [18,]     0     0     0     0 #> [19,]     0     0     0     0 #> [20,]     0     0     0     0 #> [21,]     0     0     0     0 #> [22,]     0     0     0     0 #> [23,]     0     0     0     0 #> [24,]     0     0     0     0 #> [25,]     0     0     0     0 #> [26,]     1     0     0     0 #> [27,]     0     1     0     0 #> [28,]     0     0     1     0 #> [29,]     0     0     0     1 #>  #> $alias.matrix #>             cost size1 size2 type1 type2 type3  cost:size1   cost:size2 #> (Intercept)    0     0     0     0     0     0  0.00266230 -0.004611238 #> cost           1     0     0     0     0     0 -0.03940203  0.068246326 #> size1          0     1     0     0     0     0 -0.09538153 -0.027244440 #> size2          0     0     1     0     0     0 -0.02724444 -0.063922356 #> type1          0     0     0     1     0     0  0.05072362 -0.087855888 #> type2          0     0     0     0     1     0  0.07173403 -0.124246988 #> type3          0     0     0     0     0     1 -0.12424699  0.215202096 #>              cost:type1  cost:type2  cost:type3 size1:type1  size2:type1 #> (Intercept) -0.01159338 -0.01639551  0.02839786 -0.02028945  0.035142355 #> cost        -0.02086808 -0.02951192  0.05111615  0.05533486 -0.095842787 #> size1        0.05246564  0.07419762 -0.12851406 -0.04289550 -0.036813922 #> size2       -0.09087316 -0.12851406  0.22259287 -0.03681392 -0.000386446 #> type1       -0.12564544  0.02434103 -0.04215989 -0.08352014  0.144661130 #> type2        0.02434103 -0.10843373 -0.05962309  0.02474182 -0.042854097 #> type3       -0.04215989 -0.05962309 -0.03958692 -0.04285410  0.074225473 #>             size1:type2   size2:type2  size1:type3   size2:type3 #> (Intercept) -0.02869361  0.0496987952  0.049698795 -0.0860808383 #> cost         0.07825531 -0.1355421687 -0.135542169  0.2347659227 #> size1       -0.06066340 -0.0520627483  0.105072092  0.0901753252 #> size2       -0.05206275 -0.0005465171  0.090175325  0.0009465954 #> type1        0.02474182 -0.0428540970 -0.042854097  0.0742254733 #> type2       -0.06602503  0.1143587079 -0.060604845  0.1049706710 #> type3       -0.06060485  0.1049706710  0.003955417 -0.0068509825 #>  #> $correlation.matrix #>             cost      size1      size2      type1      type2      type3 #> cost  1.00000000 0.00000000 0.00000000 0.02014149 0.02831827 0.04794633 #> size1 0.00000000 1.00000000 0.05976143 0.02898855 0.04075696 0.06900656 #> size2 0.00000000 0.05976143 1.00000000 0.04850713 0.06819943 0.11547005 #> type1 0.02014149 0.02898855 0.04850713 1.00000000 0.01654079 0.02800560 #> type2 0.02831827 0.04075696 0.06819943 0.01654079 1.00000000 0.03937496 #> type3 0.04794633 0.06900656 0.11547005 0.02800560 0.03937496 1.00000000 #>  #> $model #> ~cost + size + type #> <environment: 0x55c3b540c140> #>   #Get just one attribute get_attribute(designcoffee,\"model.matrix\") #>       (Intercept) cost      size1     size2      type1      type2     type3 #>  [1,]           1    1 -0.7071068  1.224745  1.7320508  0.0000000  0.000000 #>  [2,]           1   -1 -0.7071068 -1.224745 -0.5773503 -0.8164966 -1.414214 #>  [3,]           1    1 -0.7071068 -1.224745  1.7320508  0.0000000  0.000000 #>  [4,]           1    1 -0.7071068  1.224745 -0.5773503 -0.8164966  1.414214 #>  [5,]           1   -1 -0.7071068  1.224745 -0.5773503 -0.8164966 -1.414214 #>  [6,]           1    1  1.4142136  0.000000 -0.5773503 -0.8164966  1.414214 #>  [7,]           1   -1  1.4142136  0.000000 -0.5773503 -0.8164966 -1.414214 #>  [8,]           1   -1  1.4142136  0.000000  1.7320508  0.0000000  0.000000 #>  [9,]           1    1 -0.7071068 -1.224745 -0.5773503 -0.8164966  1.414214 #> [10,]           1   -1 -0.7071068 -1.224745 -0.5773503 -0.8164966  1.414214 #> [11,]           1    1 -0.7071068 -1.224745 -0.5773503  1.6329932  0.000000 #> [12,]           1   -1 -0.7071068  1.224745  1.7320508  0.0000000  0.000000 #> [13,]           1    1 -0.7071068 -1.224745 -0.5773503 -0.8164966 -1.414214 #> [14,]           1   -1 -0.7071068 -1.224745 -0.5773503 -0.8164966  1.414214 #> [15,]           1    1  1.4142136  0.000000  1.7320508  0.0000000  0.000000 #> [16,]           1    1  1.4142136  0.000000 -0.5773503  1.6329932  0.000000 #> [17,]           1   -1 -0.7071068  1.224745 -0.5773503  1.6329932  0.000000 #> [18,]           1   -1 -0.7071068  1.224745 -0.5773503  1.6329932  0.000000 #> [19,]           1   -1 -0.7071068 -1.224745 -0.5773503  1.6329932  0.000000 #> [20,]           1   -1  1.4142136  0.000000 -0.5773503 -0.8164966  1.414214 #> [21,]           1   -1 -0.7071068  1.224745 -0.5773503 -0.8164966 -1.414214 #> [22,]           1    1  1.4142136  0.000000 -0.5773503 -0.8164966 -1.414214 #> [23,]           1    1 -0.7071068  1.224745 -0.5773503 -0.8164966  1.414214 #> [24,]           1   -1 -0.7071068  1.224745  1.7320508  0.0000000  0.000000 #> [25,]           1    1 -0.7071068  1.224745 -0.5773503 -0.8164966 -1.414214 #> [26,]           1   -1 -0.7071068 -1.224745  1.7320508  0.0000000  0.000000 #> [27,]           1   -1  1.4142136  0.000000 -0.5773503 -0.8164966  1.414214 #> [28,]           1   -1  1.4142136  0.000000 -0.5773503  1.6329932  0.000000 #> [29,]           1    1 -0.7071068  1.224745 -0.5773503  1.6329932  0.000000  # Extract from `eval_design()` output power_output = eval_design(designcoffee, model = ~cost + size + type,                           alpha = 0.05, detailedoutput = TRUE)  get_attribute(power_output,\"correlation.matrix\") #>             cost      size1      size2      type1      type2      type3 #> cost  1.00000000 0.00997807 0.01772574 0.02159185 0.03064609 0.05386824 #> size1 0.00997807 1.00000000 0.04386345 0.02576107 0.03656362 0.06426979 #> size2 0.01772574 0.04386345 1.00000000 0.04576376 0.06495416 0.11417333 #> type1 0.02159185 0.02576107 0.04576376 1.00000000 0.01022654 0.01797572 #> type2 0.03064609 0.03656362 0.06495416 0.01022654 1.00000000 0.02551359 #> type3 0.05386824 0.06426979 0.11417333 0.01797572 0.02551359 1.00000000"},{"path":"https://tylermorganwall.github.io/skpr/reference/get_optimality.html","id":null,"dir":"Reference","previous_headings":"","what":"Get optimality values — get_optimality","title":"Get optimality values — get_optimality","text":"Returns list optimality values (one value particular). Note: choice contrast effect `G` efficiency value, `gen_design()` `eval_design()` default set different contrasts (`contr.simplex` vs `contr.sum`).","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/get_optimality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get optimality values — get_optimality","text":"","code":"get_optimality(output, optimality = NULL, calc_g = FALSE)"},{"path":"https://tylermorganwall.github.io/skpr/reference/get_optimality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get optimality values — get_optimality","text":"output output either gen_design eval_design/eval_design_mc. optimality Default `NULL`. Return just specific optimality requested. calc_g Default `FALSE`. Whether calculate g-efficiency.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/get_optimality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get optimality values — get_optimality","text":"dataframe optimality conditions. `D`, ``, `G` efficiencies (value 100). `T` trace information matrix, `E` minimum eigenvalue information matrix, `` average prediction variance, `Alias` trace alias matrix.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/get_optimality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get optimality values — get_optimality","text":"","code":"# We can extract the optimality of a design from either the output of `gen_design()` # or the output of `eval_design()`  factorialcoffee = expand.grid(cost = c(1, 2),                              type = as.factor(c(\"Kona\", \"Colombian\", \"Ethiopian\", \"Sumatra\")),                              size = as.factor(c(\"Short\", \"Grande\", \"Venti\")))  designcoffee = gen_design(factorialcoffee, ~cost + size + type, trials = 29,                          optimality = \"D\", repeats = 100)  #Extract a list of all attributes get_optimality(designcoffee) #>          D         I        A            G   T        E    Alias #> 1 99.09996 0.2224214 98.21557 Not Computed 203 22.79472 6.519097  #Get just one attribute get_optimality(designcoffee,\"D\") #>          D #> 1 99.09996  # Extract from `eval_design()` output power_output = eval_design(designcoffee, model = ~cost + size + type,                           alpha = 0.05, detailedoutput = TRUE)  get_optimality(power_output) #>          D         I        A        G   T        E    Alias #> 1 99.09996 0.2224214 98.21557 98.39373 203 22.79472 19.72452"},{"path":"https://tylermorganwall.github.io/skpr/reference/get_power_curve_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Power Curve Warnings and Errors — get_power_curve_output","title":"Get Power Curve Warnings and Errors — get_power_curve_output","text":"Gets warnings errors `calculate_power_curves()` output.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/get_power_curve_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Power Curve Warnings and Errors — get_power_curve_output","text":"","code":"get_power_curve_output(power_curve)"},{"path":"https://tylermorganwall.github.io/skpr/reference/get_power_curve_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Power Curve Warnings and Errors — get_power_curve_output","text":"power_curve output `calculate_power_curves()`","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/get_power_curve_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Power Curve Warnings and Errors — get_power_curve_output","text":"list data.frames containing warning/error information","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/get_power_curve_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Power Curve Warnings and Errors — get_power_curve_output","text":"","code":"#Generate sample if(skpr:::run_documentation()) { calculate_power_curves(trials=seq(50,150,by=20),                       candidateset = expand.grid(x=c(-1,1),y=c(-1,1)),                       model = ~.,                       effectsize = list(c(0.5,0.9),c(0.6,0.9)),                       eval_function = eval_design_mc,                       eval_args = list(nsim = 100, glmfamily = \"binomial\")) }  #>      parameter               type power trials effectsize_low effectsize_high #> 1  (Intercept)    effect.power.mc  0.81     50            0.5             0.9 #> 2            x    effect.power.mc  0.84     50            0.5             0.9 #> 3            y    effect.power.mc  0.77     50            0.5             0.9 #> 4  (Intercept) parameter.power.mc  0.81     50            0.5             0.9 #> 5            x parameter.power.mc  0.84     50            0.5             0.9 #> 6            y parameter.power.mc  0.77     50            0.5             0.9 #> 7  (Intercept)    effect.power.mc  0.95     70            0.5             0.9 #> 8            x    effect.power.mc  0.95     70            0.5             0.9 #> 9            y    effect.power.mc  0.93     70            0.5             0.9 #> 10 (Intercept) parameter.power.mc  0.95     70            0.5             0.9 #> 11           x parameter.power.mc  0.95     70            0.5             0.9 #> 12           y parameter.power.mc  0.93     70            0.5             0.9 #> 13 (Intercept)    effect.power.mc  0.97     90            0.5             0.9 #> 14           x    effect.power.mc  0.99     90            0.5             0.9 #> 15           y    effect.power.mc  0.99     90            0.5             0.9 #> 16 (Intercept) parameter.power.mc  0.97     90            0.5             0.9 #> 17           x parameter.power.mc  0.99     90            0.5             0.9 #> 18           y parameter.power.mc  0.99     90            0.5             0.9 #> 19 (Intercept)    effect.power.mc  0.99    110            0.5             0.9 #> 20           x    effect.power.mc  1.00    110            0.5             0.9 #> 21           y    effect.power.mc  1.00    110            0.5             0.9 #> 22 (Intercept) parameter.power.mc  0.99    110            0.5             0.9 #> 23           x parameter.power.mc  1.00    110            0.5             0.9 #> 24           y parameter.power.mc  1.00    110            0.5             0.9 #> 25 (Intercept)    effect.power.mc  1.00    130            0.5             0.9 #> 26           x    effect.power.mc  1.00    130            0.5             0.9 #> 27           y    effect.power.mc  1.00    130            0.5             0.9 #> 28 (Intercept) parameter.power.mc  1.00    130            0.5             0.9 #> 29           x parameter.power.mc  1.00    130            0.5             0.9 #> 30           y parameter.power.mc  1.00    130            0.5             0.9 #> 31 (Intercept)    effect.power.mc  1.00    150            0.5             0.9 #> 32           x    effect.power.mc  1.00    150            0.5             0.9 #> 33           y    effect.power.mc  1.00    150            0.5             0.9 #> 34 (Intercept) parameter.power.mc  1.00    150            0.5             0.9 #> 35           x parameter.power.mc  1.00    150            0.5             0.9 #> 36           y parameter.power.mc  1.00    150            0.5             0.9 #> 37 (Intercept)    effect.power.mc  0.87     50            0.6             0.9 #> 38           x    effect.power.mc  0.65     50            0.6             0.9 #> 39           y    effect.power.mc  0.60     50            0.6             0.9 #> 40 (Intercept) parameter.power.mc  0.87     50            0.6             0.9 #> 41           x parameter.power.mc  0.65     50            0.6             0.9 #> 42           y parameter.power.mc  0.60     50            0.6             0.9 #> 43 (Intercept)    effect.power.mc  0.98     70            0.6             0.9 #> 44           x    effect.power.mc  0.76     70            0.6             0.9 #> 45           y    effect.power.mc  0.82     70            0.6             0.9 #> 46 (Intercept) parameter.power.mc  0.98     70            0.6             0.9 #> 47           x parameter.power.mc  0.76     70            0.6             0.9 #> 48           y parameter.power.mc  0.82     70            0.6             0.9 #> 49 (Intercept)    effect.power.mc  1.00     90            0.6             0.9 #> 50           x    effect.power.mc  0.92     90            0.6             0.9 #> 51           y    effect.power.mc  0.92     90            0.6             0.9 #> 52 (Intercept) parameter.power.mc  1.00     90            0.6             0.9 #> 53           x parameter.power.mc  0.92     90            0.6             0.9 #> 54           y parameter.power.mc  0.92     90            0.6             0.9 #> 55 (Intercept)    effect.power.mc  1.00    110            0.6             0.9 #> 56           x    effect.power.mc  0.99    110            0.6             0.9 #> 57           y    effect.power.mc  0.98    110            0.6             0.9 #> 58 (Intercept) parameter.power.mc  1.00    110            0.6             0.9 #> 59           x parameter.power.mc  0.99    110            0.6             0.9 #> 60           y parameter.power.mc  0.98    110            0.6             0.9 #> 61 (Intercept)    effect.power.mc  1.00    130            0.6             0.9 #> 62           x    effect.power.mc  0.99    130            0.6             0.9 #> 63           y    effect.power.mc  0.98    130            0.6             0.9 #> 64 (Intercept) parameter.power.mc  1.00    130            0.6             0.9 #> 65           x parameter.power.mc  0.99    130            0.6             0.9 #> 66           y parameter.power.mc  0.98    130            0.6             0.9 #> 67 (Intercept)    effect.power.mc  1.00    150            0.6             0.9 #> 68           x    effect.power.mc  0.99    150            0.6             0.9 #> 69           y    effect.power.mc  0.97    150            0.6             0.9 #> 70 (Intercept) parameter.power.mc  1.00    150            0.6             0.9 #> 71           x parameter.power.mc  0.99    150            0.6             0.9 #> 72           y parameter.power.mc  0.97    150            0.6             0.9 #>    random_seed #> 1          123 #> 2          123 #> 3          123 #> 4          123 #> 5          123 #> 6          123 #> 7          123 #> 8          123 #> 9          123 #> 10         123 #> 11         123 #> 12         123 #> 13         123 #> 14         123 #> 15         123 #> 16         123 #> 17         123 #> 18         123 #> 19         123 #> 20         123 #> 21         123 #> 22         123 #> 23         123 #> 24         123 #> 25         123 #> 26         123 #> 27         123 #> 28         123 #> 29         123 #> 30         123 #> 31         123 #> 32         123 #> 33         123 #> 34         123 #> 35         123 #> 36         123 #> 37         123 #> 38         123 #> 39         123 #> 40         123 #> 41         123 #> 42         123 #> 43         123 #> 44         123 #> 45         123 #> 46         123 #> 47         123 #> 48         123 #> 49         123 #> 50         123 #> 51         123 #> 52         123 #> 53         123 #> 54         123 #> 55         123 #> 56         123 #> 57         123 #> 58         123 #> 59         123 #> 60         123 #> 61         123 #> 62         123 #> 63         123 #> 64         123 #> 65         123 #> 66         123 #> 67         123 #> 68         123 #> 69         123 #> 70         123 #> 71         123 #> 72         123 #> Power curve generation captured the following warning/error messages: #> Function   | Type | N | Message #> Evaluation | Warn | 2 | Message: 'skpr: Partial or complete separation likely detected in the binomial Monte Carlo simulation. Increase the number of runs in the design or decrease the number of model parameters to improve power.'"},{"path":"https://tylermorganwall.github.io/skpr/reference/is_intralayer_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer Interaction — is_intralayer_interaction","title":"Layer Interaction — is_intralayer_interaction","text":"Determines factor intra-layer interaction","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/is_intralayer_interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer Interaction — is_intralayer_interaction","text":"","code":"is_intralayer_interaction(design, model, split_layers)"},{"path":"https://tylermorganwall.github.io/skpr/reference/is_intralayer_interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer Interaction — is_intralayer_interaction","text":"design design matrix model model split_layers layer split plots main effect term","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/is_intralayer_interaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer Interaction — is_intralayer_interaction","text":"List booleans subplot strata layer","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/is_rendering_in_knitr.html","id":null,"dir":"Reference","previous_headings":"","what":"Determines if rendering in knitr — is_rendering_in_knitr","title":"Determines if rendering in knitr — is_rendering_in_knitr","text":"Determines rendering knitr","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/is_rendering_in_knitr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determines if rendering in knitr — is_rendering_in_knitr","text":"","code":"is_rendering_in_knitr()"},{"path":"https://tylermorganwall.github.io/skpr/reference/is_rendering_in_knitr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determines if rendering in knitr — is_rendering_in_knitr","text":"boolean","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/normalize_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Design — normalize_design","title":"Normalize Design — normalize_design","text":"Normalizes numeric columns design -1 1. important model interaction polynomial terms, terms can introduce multi-collinearity standardizing numeric columns can reduce problem. Normalizes numeric columns design -1 1. important model interaction polynomial terms, terms can introduce multi-collinearity standardizing numeric columns can reduce problem.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/normalize_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Design — normalize_design","text":"","code":"normalize_design(design, augmented = NULL)  normalize_design(design, augmented = NULL)"},{"path":"https://tylermorganwall.github.io/skpr/reference/normalize_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Design — normalize_design","text":"design design matrix. augmented Default `NULL`. ","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/normalize_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Design — normalize_design","text":"Normalized design matrix Normalized run matrix","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/normalize_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize Design — normalize_design","text":"","code":"#Normalize a design if(skpr:::run_documentation()) { cand_set = expand.grid(temp = c(100,300,500),                       altitude = c(10000,20000),                       offset = seq(-10,-5,by=1),                       type = c(\"A\",\"B\", \"C\")) design = gen_design(cand_set, ~., 24)  #Un-normalized design design } #>    temp altitude offset type #> 1   100    10000    -10    C #> 2   500    20000     -5    A #> 3   500    20000    -10    C #> 4   100    10000     -5    C #> 5   500    10000     -5    A #> 6   500    20000    -10    B #> 7   500    20000     -5    C #> 8   100    20000     -5    A #> 9   100    20000    -10    C #> 10  500    20000     -5    B #> 11  100    20000     -5    C #> 12  500    10000    -10    C #> 13  100    10000    -10    B #> 14  100    10000     -5    A #> 15  100    20000    -10    A #> 16  500    10000     -5    C #> 17  500    10000    -10    B #> 18  500    20000    -10    A #> 19  100    10000    -10    A #> 20  100    20000     -5    B #> 21  500    10000    -10    A #> 22  100    20000    -10    B #> 23  100    10000     -5    B #> 24  500    10000     -5    B if(skpr:::run_documentation()) { #Normalized design normalize_design(design) } #>    temp altitude offset type #> 1    -1       -1     -1    C #> 2     1        1      1    A #> 3     1        1     -1    C #> 4    -1       -1      1    C #> 5     1       -1      1    A #> 6     1        1     -1    B #> 7     1        1      1    C #> 8    -1        1      1    A #> 9    -1        1     -1    C #> 10    1        1      1    B #> 11   -1        1      1    C #> 12    1       -1     -1    C #> 13   -1       -1     -1    B #> 14   -1       -1      1    A #> 15   -1        1     -1    A #> 16    1       -1      1    C #> 17    1       -1     -1    B #> 18    1        1     -1    A #> 19   -1       -1     -1    A #> 20   -1        1      1    B #> 21    1       -1     -1    A #> 22   -1        1     -1    B #> 23   -1       -1      1    B #> 24    1       -1      1    B"},{"path":"https://tylermorganwall.github.io/skpr/reference/parameterpower.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates parameter power — parameterpower","title":"Calculates parameter power — parameterpower","text":"Calculates parameter power","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/parameterpower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates parameter power — parameterpower","text":"","code":"parameterpower(   RunMatrix,   levelvector = NULL,   anticoef,   alpha,   vinv = NULL,   degrees = NULL,   parameter_names )"},{"path":"https://tylermorganwall.github.io/skpr/reference/parameterpower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates parameter power — parameterpower","text":"RunMatrix run matrix levelvector number levels parameter (1st always intercept) anticoef anticipated coefficients alpha specified type-error vinv V inverse matrix","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/parameterpower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates parameter power — parameterpower","text":"parameter power parameters","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/permutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutations — permutations","title":"Permutations — permutations","text":"Return permutations","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/permutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutations — permutations","text":"","code":"permutations(n)"},{"path":"https://tylermorganwall.github.io/skpr/reference/permutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutations — permutations","text":"n Number elements permute","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/permutations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutations — permutations","text":"Matrix permuted element ids","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"re-export magrittr pipe operator — %>%","title":"re-export magrittr pipe operator — %>%","text":"re-export magrittr pipe operator","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/plot_correlations.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots design diagnostics — plot_correlations","title":"Plots design diagnostics — plot_correlations","text":"Plots design diagnostics","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/plot_correlations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots design diagnostics — plot_correlations","text":"","code":"plot_correlations(   genoutput,   model = NULL,   customcolors = NULL,   pow = 2,   custompar = NULL,   standardize = TRUE,   plot = TRUE )"},{"path":"https://tylermorganwall.github.io/skpr/reference/plot_correlations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots design diagnostics — plot_correlations","text":"genoutput output either gen_design eval_design/eval_design_mc model Default `NULL`. Defaults model used generating/evaluating design, augmented 2-factor interactions. specified, override default model used generate/evaluate design. customcolors vector colors customizing appearance colormap pow Default 2. interaction level correlation map showing. custompar Default NULL. Custom parameters pass `par` function base R plotting. standardize Default `TRUE`. Whether standardize (scale -1 1 center) continuous numeric columns. standardizing numeric columns can increase multi-collinearity (predictors correlated predictors model). plot Default `TRUE`. `FALSE`, return correlation matrix.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/plot_correlations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots design diagnostics — plot_correlations","text":"Silently returns correlation matrix proper row column names.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/plot_correlations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots design diagnostics — plot_correlations","text":"","code":"#We can pass either the output of gen_design or eval_design to plot_correlations #in order to obtain the correlation map. Passing the output of eval_design is useful #if you want to plot the correlation map from an externally generated design.  #First generate the design:  candidatelist = expand.grid(cost = c(15000, 20000), year = c(\"2001\", \"2002\", \"2003\", \"2004\"),                            type = c(\"SUV\", \"Sedan\", \"Hybrid\")) cardesign = gen_design(candidatelist, ~(cost+type+year)^2, 30) plot_correlations(cardesign)   #We can also increase the level of interactions that are shown by default.  plot_correlations(cardesign, pow = 3)   #You can also pass in a custom color map. plot_correlations(cardesign, customcolors = c(\"blue\", \"grey\", \"red\"))  plot_correlations(cardesign, customcolors = c(\"blue\", \"green\", \"yellow\", \"orange\", \"red\"))"},{"path":"https://tylermorganwall.github.io/skpr/reference/plot_fds.html","id":null,"dir":"Reference","previous_headings":"","what":"Fraction of Design Space Plot — plot_fds","title":"Fraction of Design Space Plot — plot_fds","text":"Creates fraction design space plot","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/plot_fds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fraction of Design Space Plot — plot_fds","text":"","code":"plot_fds(   genoutput,   model = NULL,   continuouslength = 1001,   plot = TRUE,   sample_size = 10000,   yaxis_max = NULL,   description = \"Fraction of Design Space\" )"},{"path":"https://tylermorganwall.github.io/skpr/reference/plot_fds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fraction of Design Space Plot — plot_fds","text":"genoutput design, output power evaluation functions. can also list several designs, result plotted row (easy comparison). model Default `NULL`. model, `NULL` defaults model used `eval_design` `gen_design`. continuouslength Default `11`. precision continuous variables. Decrease faster (less precise) plotting. plot Default `TRUE`. Whether plot FDS, just calculate cumulative distribution function. sample_size Default `10000`. Number samples take design space. yaxis_max Default `NULL`. Manually set maximum value prediction variance. description Default `Fraction Design Space`. description add plot. vector multiple designs passed genoutput, description plot.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/plot_fds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fraction of Design Space Plot — plot_fds","text":"Plots design diagnostics, invisibly returns vector values representing fraction design space plot. multiple designs passed, return list FDS vectors.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/plot_fds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fraction of Design Space Plot — plot_fds","text":"","code":"#We can pass either the output of gen_design or eval_design to plot_correlations #in order to obtain the correlation map. Passing the output of eval_design is useful #if you want to plot the correlation map from an externally generated design.  #First generate the design:  candidatelist = expand.grid(X1 = c(1, -1), X2 = c(1, -1))  design = gen_design(candidatelist, ~(X1 + X2), 15)  plot_fds(design)"},{"path":"https://tylermorganwall.github.io/skpr/reference/potential_permuted_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Find potential permuted interactions — potential_permuted_factors","title":"Find potential permuted interactions — potential_permuted_factors","text":"Returns permuted interactions","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/potential_permuted_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find potential permuted interactions — potential_permuted_factors","text":"","code":"potential_permuted_factors(x)"},{"path":"https://tylermorganwall.github.io/skpr/reference/potential_permuted_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find potential permuted interactions — potential_permuted_factors","text":"x character vector interaction terms","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/potential_permuted_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find potential permuted interactions — potential_permuted_factors","text":"character vector potential interaction terms","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/print.skpr_eval_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Print evaluation information — print.skpr_eval_output","title":"Print evaluation information — print.skpr_eval_output","text":"Prints design evaluation information data.frame power values Note: options(\"skpr.ANSI\") `NULL` `TRUE`, ANSI codes used printing prettify output. `FALSE`, ASCII used.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/print.skpr_eval_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print evaluation information — print.skpr_eval_output","text":"","code":"# S3 method for skpr_eval_output print(x, ...)"},{"path":"https://tylermorganwall.github.io/skpr/reference/print.skpr_eval_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print evaluation information — print.skpr_eval_output","text":"x x evaluation functions skpr ... Additional arguments.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/print.skpr_eval_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print evaluation information — print.skpr_eval_output","text":"","code":"#Generate/evaluate a design and print its information factorialcoffee = expand.grid(cost = c(1, 2),                               type = as.factor(c(\"Kona\", \"Colombian\", \"Ethiopian\", \"Sumatra\")),                               size = as.factor(c(\"Short\", \"Grande\", \"Venti\")))  designcoffee = gen_design(factorialcoffee,                          ~cost + size + type, trials = 29, optimality = \"D\", repeats = 100)  eval_design(designcoffee) #>      parameter            type     power #> 1  (Intercept)    effect.power 0.9990689 #> 2         cost    effect.power 0.9991530 #> 3         size    effect.power 0.9522717 #> 4         type    effect.power 0.9907584 #> 5  (Intercept) parameter.power 0.9990689 #> 6         cost parameter.power 0.9991530 #> 7        size1 parameter.power 0.9443775 #> 8        size2 parameter.power 0.9443775 #> 9        type1 parameter.power 0.8339422 #> 10       type2 parameter.power 0.8339422 #> 11       type3 parameter.power 0.8339422 #> ============Evaluation Info============= #> • Alpha = 0.05 • Trials = 29 • Blocked = FALSE  #> • Evaluating Model = ~cost + size + type  #> • Anticipated Coefficients = c(1, 1, 1, -1, 1, -1, 1)  #> • Contrasts = `contr.sum`  #> • Parameter Analysis Method = `lm(...)`  #> • Effect Analysis Method = `car::Anova(fit, type = \"III\")`"},{"path":"https://tylermorganwall.github.io/skpr/reference/print.skpr_power_curve_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Print evaluation information — print.skpr_power_curve_output","title":"Print evaluation information — print.skpr_power_curve_output","text":"Prints design evaluation information data.frame power values Note: options(\"skpr.ANSI\") `NULL` `TRUE`, ANSI codes used printing prettify output. `FALSE`, ASCII used.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/print.skpr_power_curve_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print evaluation information — print.skpr_power_curve_output","text":"","code":"# S3 method for skpr_power_curve_output print(x, ...)"},{"path":"https://tylermorganwall.github.io/skpr/reference/print.skpr_power_curve_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print evaluation information — print.skpr_power_curve_output","text":"x x evaluation functions skpr ... Additional arguments.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/print.skpr_power_curve_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print evaluation information — print.skpr_power_curve_output","text":"","code":"#Generate/evaluate a design and print its information factorialcoffee = expand.grid(cost = c(1, 2),                               type = as.factor(c(\"Kona\",                                                  \"Colombian\",                                                  \"Ethiopian\",                                                  \"Sumatra\")),                               size = as.factor(c(\"Short\",                                                  \"Grande\",                                                  \"Venti\")))  coffee_curves = calculate_power_curves(candidateset = factorialcoffee,                                       model = ~(cost + size + type)^2,                                       trials = 30:40, plot_results = FALSE) coffee_curves #>       parameter            type     power trials effectsize random_seed #> 1   (Intercept)    effect.power 0.6826885     30          1         123 #> 2          cost    effect.power 0.6799517     30          1         123 #> 3          size    effect.power 0.3791064     30          1         123 #> 4          type    effect.power 0.4506179     30          1         123 #> 5     cost:size    effect.power 0.3790878     30          1         123 #> 6     cost:type    effect.power 0.4478528     30          1         123 #> 7     size:type    effect.power 0.6245632     30          1         123 #> 8   (Intercept) parameter.power 0.6826885     30          1         123 #> 9          cost parameter.power 0.6799517     30          1         123 #> 10        size1 parameter.power 0.4052233     30          1         123 #> 11        size2 parameter.power 0.4027148     30          1         123 #> 12        type1 parameter.power 0.2798727     30          1         123 #> 13        type2 parameter.power 0.2821415     30          1         123 #> 14        type3 parameter.power 0.2983430     30          1         123 #> 15   cost:size1 parameter.power 0.4020228     30          1         123 #> 16   cost:size2 parameter.power 0.4042969     30          1         123 #> 17   cost:type1 parameter.power 0.2809834     30          1         123 #> 18   cost:type2 parameter.power 0.2809834     30          1         123 #> 19   cost:type3 parameter.power 0.2961708     30          1         123 #> 20  size1:type1 parameter.power 0.1736032     30          1         123 #> 21  size2:type1 parameter.power 0.1602483     30          1         123 #> 22  size1:type2 parameter.power 0.1605181     30          1         123 #> 23  size2:type2 parameter.power 0.1607885     30          1         123 #> 24  size1:type3 parameter.power 0.1641624     30          1         123 #> 25  size2:type3 parameter.power 0.1819501     30          1         123 #> 26  (Intercept)    effect.power 0.6997660     31          1         123 #> 27         cost    effect.power 0.6957588     31          1         123 #> 28         size    effect.power 0.3911743     31          1         123 #> 29         type    effect.power 0.4713329     31          1         123 #> 30    cost:size    effect.power 0.3857370     31          1         123 #> 31    cost:type    effect.power 0.4638559     31          1         123 #> 32    size:type    effect.power 0.6635006     31          1         123 #> 33  (Intercept) parameter.power 0.6997660     31          1         123 #> 34         cost parameter.power 0.6957588     31          1         123 #> 35        size1 parameter.power 0.4167653     31          1         123 #> 36        size2 parameter.power 0.4182993     31          1         123 #> 37        type1 parameter.power 0.2862835     31          1         123 #> 38        type2 parameter.power 0.3073151     31          1         123 #> 39        type3 parameter.power 0.3034260     31          1         123 #> 40   cost:size1 parameter.power 0.4115382     31          1         123 #> 41   cost:size2 parameter.power 0.4115382     31          1         123 #> 42   cost:type1 parameter.power 0.2864825     31          1         123 #> 43   cost:type2 parameter.power 0.3017406     31          1         123 #> 44   cost:type3 parameter.power 0.3017406     31          1         123 #> 45  size1:type1 parameter.power 0.1625825     31          1         123 #> 46  size2:type1 parameter.power 0.1621114     31          1         123 #> 47  size1:type2 parameter.power 0.1785585     31          1         123 #> 48  size2:type2 parameter.power 0.1674038     31          1         123 #> 49  size1:type3 parameter.power 0.1664224     31          1         123 #> 50  size2:type3 parameter.power 0.1850129     31          1         123 #> 51  (Intercept)    effect.power 0.7155349     32          1         123 #> 52         cost    effect.power 0.7114742     32          1         123 #> 53         size    effect.power 0.4042147     32          1         123 #> 54         type    effect.power 0.5010903     32          1         123 #> 55    cost:size    effect.power 0.4026865     32          1         123 #> 56    cost:type    effect.power 0.4843502     32          1         123 #> 57    size:type    effect.power 0.6122168     32          1         123 #> 58  (Intercept) parameter.power 0.7155349     32          1         123 #> 59         cost parameter.power 0.7114742     32          1         123 #> 60        size1 parameter.power 0.4200557     32          1         123 #> 61        size2 parameter.power 0.4325214     32          1         123 #> 62        type1 parameter.power 0.3205577     32          1         123 #> 63        type2 parameter.power 0.3205577     32          1         123 #> 64        type3 parameter.power 0.3153125     32          1         123 #> 65   cost:size1 parameter.power 0.4184315     32          1         123 #> 66   cost:size2 parameter.power 0.4313056     32          1         123 #> 67   cost:type1 parameter.power 0.3069861     32          1         123 #> 68   cost:type2 parameter.power 0.3069861     32          1         123 #> 69   cost:type3 parameter.power 0.3059611     32          1         123 #> 70  size1:type1 parameter.power 0.1700717     32          1         123 #> 71  size2:type1 parameter.power 0.1845655     32          1         123 #> 72  size1:type2 parameter.power 0.1700717     32          1         123 #> 73  size2:type2 parameter.power 0.1845655     32          1         123 #> 74  size1:type3 parameter.power 0.1815880     32          1         123 #> 75  size2:type3 parameter.power 0.1836763     32          1         123 #> 76  (Intercept)    effect.power 0.7387166     33          1         123 #> 77         cost    effect.power 0.7252330     33          1         123 #> 78         size    effect.power 0.4248411     33          1         123 #> 79         type    effect.power 0.5182235     33          1         123 #> 80    cost:size    effect.power 0.4213750     33          1         123 #> 81    cost:type    effect.power 0.5011963     33          1         123 #> 82    size:type    effect.power 0.6893940     33          1         123 #> 83  (Intercept) parameter.power 0.7387166     33          1         123 #> 84         cost parameter.power 0.7252330     33          1         123 #> 85        size1 parameter.power 0.4426127     33          1         123 #> 86        size2 parameter.power 0.4459904     33          1         123 #> 87        type1 parameter.power 0.3234550     33          1         123 #> 88        type2 parameter.power 0.3157942     33          1         123 #> 89        type3 parameter.power 0.3141142     33          1         123 #> 90   cost:size1 parameter.power 0.4392456     33          1         123 #> 91   cost:size2 parameter.power 0.4392456     33          1         123 #> 92   cost:type1 parameter.power 0.3106586     33          1         123 #> 93   cost:type2 parameter.power 0.3106586     33          1         123 #> 94   cost:type3 parameter.power 0.3106586     33          1         123 #> 95  size1:type1 parameter.power 0.1849669     33          1         123 #> 96  size2:type1 parameter.power 0.1877676     33          1         123 #> 97  size1:type2 parameter.power 0.1705872     33          1         123 #> 98  size2:type2 parameter.power 0.1920915     33          1         123 #> 99  size1:type3 parameter.power 0.1848221     33          1         123 #> 100 size2:type3 parameter.power 0.1711518     33          1         123 #> 101 (Intercept)    effect.power 0.7562022     34          1         123 #> 102        cost    effect.power 0.7376450     34          1         123 #> 103        size    effect.power 0.4313392     34          1         123 #> 104        type    effect.power 0.5370600     34          1         123 #> 105   cost:size    effect.power 0.4260546     34          1         123 #> 106   cost:type    effect.power 0.5185534     34          1         123 #> 107   size:type    effect.power 0.6996227     34          1         123 #> 108 (Intercept) parameter.power 0.7562022     34          1         123 #> 109        cost parameter.power 0.7376450     34          1         123 #> 110       size1 parameter.power 0.4515092     34          1         123 #> 111       size2 parameter.power 0.4549005     34          1         123 #> 112       type1 parameter.power 0.3195412     34          1         123 #> 113       type2 parameter.power 0.3168617     34          1         123 #> 114       type3 parameter.power 0.3453909     34          1         123 #> 115  cost:size1 parameter.power 0.4464771     34          1         123 #> 116  cost:size2 parameter.power 0.4464771     34          1         123 #> 117  cost:type1 parameter.power 0.3149170     34          1         123 #> 118  cost:type2 parameter.power 0.3149170     34          1         123 #> 119  cost:type3 parameter.power 0.3315543     34          1         123 #> 120 size1:type1 parameter.power 0.1946197     34          1         123 #> 121 size2:type1 parameter.power 0.1734524     34          1         123 #> 122 size1:type2 parameter.power 0.1736798     34          1         123 #> 123 size2:type2 parameter.power 0.1922518     34          1         123 #> 124 size1:type3 parameter.power 0.1983996     34          1         123 #> 125 size2:type3 parameter.power 0.1978415     34          1         123 #> 126 (Intercept)    effect.power 0.7759456     35          1         123 #> 127        cost    effect.power 0.7500965     35          1         123 #> 128        size    effect.power 0.4634431     35          1         123 #> 129        type    effect.power 0.5550627     35          1         123 #> 130   cost:size    effect.power 0.4438808     35          1         123 #> 131   cost:type    effect.power 0.5352030     35          1         123 #> 132   size:type    effect.power 0.7196053     35          1         123 #> 133 (Intercept) parameter.power 0.7759456     35          1         123 #> 134        cost parameter.power 0.7500965     35          1         123 #> 135       size1 parameter.power 0.4683468     35          1         123 #> 136       size2 parameter.power 0.4863533     35          1         123 #> 137       type1 parameter.power 0.3279723     35          1         123 #> 138       type2 parameter.power 0.3498501     35          1         123 #> 139       type3 parameter.power 0.3415317     35          1         123 #> 140  cost:size1 parameter.power 0.4536851     35          1         123 #> 141  cost:size2 parameter.power 0.4664493     35          1         123 #> 142  cost:type1 parameter.power 0.3190901     35          1         123 #> 143  cost:type2 parameter.power 0.3356799     35          1         123 #> 144  cost:type3 parameter.power 0.3356799     35          1         123 #> 145 size1:type1 parameter.power 0.1755796     35          1         123 #> 146 size2:type1 parameter.power 0.1894879     35          1         123 #> 147 size1:type2 parameter.power 0.1999700     35          1         123 #> 148 size2:type2 parameter.power 0.2031490     35          1         123 #> 149 size1:type3 parameter.power 0.2025563     35          1         123 #> 150 size2:type3 parameter.power 0.2070205     35          1         123 #> 151 (Intercept)    effect.power 0.8017265     36          1         123 #> 152        cost    effect.power 0.7627026     36          1         123 #> 153        size    effect.power 0.4805044     36          1         123 #> 154        type    effect.power 0.5779224     36          1         123 #> 155   cost:size    effect.power 0.4613127     36          1         123 #> 156   cost:type    effect.power 0.5512069     36          1         123 #> 157   size:type    effect.power 0.7281702     36          1         123 #> 158 (Intercept) parameter.power 0.8017265     36          1         123 #> 159        cost parameter.power 0.7627026     36          1         123 #> 160       size1 parameter.power 0.4990130     36          1         123 #> 161       size2 parameter.power 0.4876976     36          1         123 #> 162       type1 parameter.power 0.3614727     36          1         123 #> 163       type2 parameter.power 0.3614727     36          1         123 #> 164       type3 parameter.power 0.3641507     36          1         123 #> 165  cost:size1 parameter.power 0.4733657     36          1         123 #> 166  cost:size2 parameter.power 0.4733657     36          1         123 #> 167  cost:type1 parameter.power 0.3397409     36          1         123 #> 168  cost:type2 parameter.power 0.3397409     36          1         123 #> 169  cost:type3 parameter.power 0.3397409     36          1         123 #> 170 size1:type1 parameter.power 0.2038731     36          1         123 #> 171 size2:type1 parameter.power 0.2033581     36          1         123 #> 172 size1:type2 parameter.power 0.1979074     36          1         123 #> 173 size2:type2 parameter.power 0.2033581     36          1         123 #> 174 size1:type3 parameter.power 0.2025072     36          1         123 #> 175 size2:type3 parameter.power 0.1980670     36          1         123 #> 176 (Intercept)    effect.power 0.7864642     37          1         123 #> 177        cost    effect.power 0.7790389     37          1         123 #> 178        size    effect.power 0.4924130     37          1         123 #> 179        type    effect.power 0.5814906     37          1         123 #> 180   cost:size    effect.power 0.4648473     37          1         123 #> 181   cost:type    effect.power 0.5733489     37          1         123 #> 182   size:type    effect.power 0.7515928     37          1         123 #> 183 (Intercept) parameter.power 0.7864642     37          1         123 #> 184        cost parameter.power 0.7790389     37          1         123 #> 185       size1 parameter.power 0.5102800     37          1         123 #> 186       size2 parameter.power 0.5065711     37          1         123 #> 187       type1 parameter.power 0.3462992     37          1         123 #> 188       type2 parameter.power 0.3655256     37          1         123 #> 189       type3 parameter.power 0.3462992     37          1         123 #> 190  cost:size1 parameter.power 0.4819740     37          1         123 #> 191  cost:size2 parameter.power 0.4819740     37          1         123 #> 192  cost:type1 parameter.power 0.3445838     37          1         123 #> 193  cost:type2 parameter.power 0.3445838     37          1         123 #> 194  cost:type3 parameter.power 0.3445838     37          1         123 #> 195 size1:type1 parameter.power 0.2095725     37          1         123 #> 196 size2:type1 parameter.power 0.2025349     37          1         123 #> 197 size1:type2 parameter.power 0.2087190     37          1         123 #> 198 size2:type2 parameter.power 0.2006279     37          1         123 #> 199 size1:type3 parameter.power 0.2020649     37          1         123 #> 200 size2:type3 parameter.power 0.2080426     37          1         123 #> 201 (Intercept)    effect.power 0.8131992     38          1         123 #> 202        cost    effect.power 0.7962184     38          1         123 #> 203        size    effect.power 0.5168405     38          1         123 #> 204        type    effect.power 0.6039908     38          1         123 #> 205   cost:size    effect.power 0.4893051     38          1         123 #> 206   cost:type    effect.power 0.5947261     38          1         123 #> 207   size:type    effect.power 0.8225300     38          1         123 #> 208 (Intercept) parameter.power 0.8131992     38          1         123 #> 209        cost parameter.power 0.7962184     38          1         123 #> 210       size1 parameter.power 0.5104082     38          1         123 #> 211       size2 parameter.power 0.5359919     38          1         123 #> 212       type1 parameter.power 0.3702930     38          1         123 #> 213       type2 parameter.power 0.3654661     38          1         123 #> 214       type3 parameter.power 0.3803947     38          1         123 #> 215  cost:size1 parameter.power 0.4910267     38          1         123 #> 216  cost:size2 parameter.power 0.5103905     38          1         123 #> 217  cost:type1 parameter.power 0.3495862     38          1         123 #> 218  cost:type2 parameter.power 0.3495862     38          1         123 #> 219  cost:type3 parameter.power 0.3773299     38          1         123 #> 220 size1:type1 parameter.power 0.2021133     38          1         123 #> 221 size2:type1 parameter.power 0.2090356     38          1         123 #> 222 size1:type2 parameter.power 0.2032873     38          1         123 #> 223 size2:type2 parameter.power 0.2078892     38          1         123 #> 224 size1:type3 parameter.power 0.2149422     38          1         123 #> 225 size2:type3 parameter.power 0.2152043     38          1         123 #> 226 (Intercept)    effect.power 0.8294224     39          1         123 #> 227        cost    effect.power 0.8143658     39          1         123 #> 228        size    effect.power 0.5315027     39          1         123 #> 229        type    effect.power 0.6352887     39          1         123 #> 230   cost:size    effect.power 0.5131909     39          1         123 #> 231   cost:type    effect.power 0.6153382     39          1         123 #> 232   size:type    effect.power 0.8335248     39          1         123 #> 233 (Intercept) parameter.power 0.8294224     39          1         123 #> 234        cost parameter.power 0.8143658     39          1         123 #> 235       size1 parameter.power 0.5279173     39          1         123 #> 236       size2 parameter.power 0.5441380     39          1         123 #> 237       type1 parameter.power 0.3697391     39          1         123 #> 238       type2 parameter.power 0.3867470     39          1         123 #> 239       type3 parameter.power 0.3932962     39          1         123 #> 240  cost:size1 parameter.power 0.5191018     39          1         123 #> 241  cost:size2 parameter.power 0.5191018     39          1         123 #> 242  cost:type1 parameter.power 0.3548121     39          1         123 #> 243  cost:type2 parameter.power 0.3822490     39          1         123 #> 244  cost:type3 parameter.power 0.3822490     39          1         123 #> 245 size1:type1 parameter.power 0.2044219     39          1         123 #> 246 size2:type1 parameter.power 0.2080000     39          1         123 #> 247 size1:type2 parameter.power 0.2174639     39          1         123 #> 248 size2:type2 parameter.power 0.2198694     39          1         123 #> 249 size1:type3 parameter.power 0.2097721     39          1         123 #> 250 size2:type3 parameter.power 0.2369955     39          1         123 #> 251 (Intercept)    effect.power 0.8368222     40          1         123 #> 252        cost    effect.power 0.8303912     40          1         123 #> 253        size    effect.power 0.5310633     40          1         123 #> 254        type    effect.power 0.6565705     40          1         123 #> 255   cost:size    effect.power 0.5160100     40          1         123 #> 256   cost:type    effect.power 0.6390699     40          1         123 #> 257   size:type    effect.power 0.8417282     40          1         123 #> 258 (Intercept) parameter.power 0.8368222     40          1         123 #> 259        cost parameter.power 0.8303912     40          1         123 #> 260       size1 parameter.power 0.5436906     40          1         123 #> 261       size2 parameter.power 0.5339482     40          1         123 #> 262       type1 parameter.power 0.3985223     40          1         123 #> 263       type2 parameter.power 0.4052082     40          1         123 #> 264       type3 parameter.power 0.3919700     40          1         123 #> 265  cost:size1 parameter.power 0.5269844     40          1         123 #> 266  cost:size2 parameter.power 0.5269844     40          1         123 #> 267  cost:type1 parameter.power 0.3866960     40          1         123 #> 268  cost:type2 parameter.power 0.3900963     40          1         123 #> 269  cost:type3 parameter.power 0.3900963     40          1         123 #> 270 size1:type1 parameter.power 0.2133629     40          1         123 #> 271 size2:type1 parameter.power 0.2365138     40          1         123 #> 272 size1:type2 parameter.power 0.2155276     40          1         123 #> 273 size2:type2 parameter.power 0.2166345     40          1         123 #> 274 size1:type3 parameter.power 0.2172680     40          1         123 #> 275 size2:type3 parameter.power 0.2213500     40          1         123 #> No errors or warnings encountered during power curve generation!"},{"path":"https://tylermorganwall.github.io/skpr/reference/priorlevels.html","id":null,"dir":"Reference","previous_headings":"","what":"Prior levels — priorlevels","title":"Prior levels — priorlevels","text":"Returns number levels prior parameter","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/priorlevels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prior levels — priorlevels","text":"","code":"priorlevels(levelvector)"},{"path":"https://tylermorganwall.github.io/skpr/reference/priorlevels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prior levels — priorlevels","text":"Returns vector consisting number levels preceeding parameter (including intercept)","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/quad.html","id":null,"dir":"Reference","previous_headings":"","what":"quadratic — quad","title":"quadratic — quad","text":"quadratic","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/quad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"quadratic — quad","text":"","code":"quad(formula)"},{"path":"https://tylermorganwall.github.io/skpr/reference/quad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"quadratic — quad","text":"formula formula expanded","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/quad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"quadratic — quad","text":"Returns quadratic model formula","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/rearrange_formula_by_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Rearrange formula by order — rearrange_formula_by_order","title":"Rearrange formula by order — rearrange_formula_by_order","text":"Rearrange higher order arithmatic terms end formula","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/rearrange_formula_by_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rearrange formula by order — rearrange_formula_by_order","text":"","code":"rearrange_formula_by_order(model, data)"},{"path":"https://tylermorganwall.github.io/skpr/reference/rearrange_formula_by_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rearrange formula by order — rearrange_formula_by_order","text":"model Base model","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/rearrange_formula_by_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rearrange formula by order — rearrange_formula_by_order","text":"Rearranged model","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/reduceRunMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove columns not in model — reduceRunMatrix","title":"Remove columns not in model — reduceRunMatrix","text":"Remove columns model","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/reduceRunMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove columns not in model — reduceRunMatrix","text":"","code":"reduceRunMatrix(RunMatrix, model, first_run = TRUE)"},{"path":"https://tylermorganwall.github.io/skpr/reference/reduceRunMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove columns not in model — reduceRunMatrix","text":"reduced model matrix.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/remove_skpr_blockcols.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove skpr-generated blocking columns — remove_skpr_blockcols","title":"Remove skpr-generated blocking columns — remove_skpr_blockcols","text":"Remove skpr-generated REML blocking columns present","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/remove_skpr_blockcols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove skpr-generated blocking columns — remove_skpr_blockcols","text":"","code":"remove_skpr_blockcols(RunMatrix)"},{"path":"https://tylermorganwall.github.io/skpr/reference/remove_skpr_blockcols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove skpr-generated blocking columns — remove_skpr_blockcols","text":"RunMatrix run matrix","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/remove_skpr_blockcols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove skpr-generated blocking columns — remove_skpr_blockcols","text":"Run Matrix","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/run_documentation.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Documentation — run_documentation","title":"Run Documentation — run_documentation","text":"Run Documentation","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/run_documentation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Documentation — run_documentation","text":"","code":"run_documentation()"},{"path":"https://tylermorganwall.github.io/skpr/reference/run_documentation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Documentation — run_documentation","text":"bool","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/set_up_progressr_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up progressr handler — set_up_progressr_handler","title":"Set up progressr handler — set_up_progressr_handler","text":"Set progressr handler","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/set_up_progressr_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up progressr handler — set_up_progressr_handler","text":"","code":"set_up_progressr_handler(msg_string, type_string)"},{"path":"https://tylermorganwall.github.io/skpr/reference/skprGUI.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphical User Interface for skpr — skprGUI","title":"Graphical User Interface for skpr — skprGUI","text":"skprGUI provides graphical user interface skpr, within R Studio.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/skprGUI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graphical User Interface for skpr — skprGUI","text":"","code":"skprGUI(   browser = FALSE,   return_app = FALSE,   multiuser = FALSE,   progress = TRUE )"},{"path":"https://tylermorganwall.github.io/skpr/reference/skprGUI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graphical User Interface for skpr — skprGUI","text":"browser Default `FALSE`. Whether open application external browser. return_app Default `FALSE`. `TRUE`, return shinyApp object. multiuser Default `FALSE`. `TRUE`, turn disable multicore functionality enable non-blocking operation. progress Default `TRUE`. Whether include progress bar application. Note: `multiuser = TRUE`, progress bars turned default.","code":""},{"path":"https://tylermorganwall.github.io/skpr/reference/skprGUI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graphical User Interface for skpr — skprGUI","text":"","code":"#Type `skprGUI()` to begin"}]
